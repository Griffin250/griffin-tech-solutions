<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>So far, the shellcode used in our exploits has been just a string of copied and pasted bytes. We have seen standard shell-spawning shellcode for local exploits and port-binding shellcode for remote ones. Shellcode</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part113.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part115.htm">Next &gt;</a></p><p class="s26" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">So far, the shellcode used in our exploits has been just a string of copied and pasted bytes. We have seen standard shell-spawning shellcode for local exploits and port-binding shellcode for remote ones. Shellcode</p><p style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;line-height: 112%;text-align: justify;">is also sometimes referred to as an exploit payload, since these self-contained programs do the real work once a program has been hacked. Shellcode usually spawns a shell, as that is an elegant way to hand off control; but it can do any- thing a program can do.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Unfortunately, for many hackers the shellcode story stops at copying and pasting bytes. These hackers are just scratching the surface of whatâ€™s possible. Custom shellcode gives you absolute control over the exploited program. Perhaps you want your shellcode to add an admin account to /etc/passwd or to automatically remove lines from log files. Once you know how to write your own shellcode, your exploits are limited only by your imagination. In addition, writing shellcode develops assembly language skills and employs a number of hacking techniques worth knowing.</p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part115.htm">0x510 Assembly vs. C</a><a class="toc0" href="part116.htm">0x511 Linux System Calls in Assembly</a><a class="toc1" href="part117.htm">0x520 The Path to Shellcode</a><a class="toc0" href="part118.htm">0x521 Assembly Instructions Using the Stack</a><a class="toc0" href="part119.htm">0x522 Investigating with GDB</a><a class="toc0" href="part120.htm">0x523 Removing Null Bytes</a><a class="toc1" href="part121.htm">0x530 Shell-Spawning Shellcode</a><a class="toc0" href="part122.htm">0x531 A Matter of Privilege</a><a class="toc0" href="part123.htm">0x532 And Smaller Still</a><a class="toc1" href="part124.htm">0x540 Port-Binding Shellcode</a><a class="toc0" href="part125.htm">0x541 Duplicating Standard File Descriptors</a><a class="toc0" href="part126.htm">0x542 Branching Control Structures</a><a class="toc1" href="part127.htm">0x550 Connect-Back Shellcode</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part113.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part115.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
