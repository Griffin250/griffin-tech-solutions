<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x286  Pseudo-random Numbers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part47.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part49.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark38">0x286  Pseudo-random Numbers</a></p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Since computers are deterministic machines, it is impossible for them to produce truly random numbers. But many applications require some form of randomness. The pseudo-random number generator functions fill this need by generating a stream of numbers that is <span class="s27">pseudo-random</span>. These functions can produce a seemingly random sequence of numbers started from a seed number; however, the same exact sequence can be generated again with the same seed. Deterministic machines cannot produce true randomness, but if the seed value of the pseudo-random generation function isn’t known, the</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">sequence will seem random. The generator must be seeded with a value using the function <span class="s31">srand()</span>, and from that point on, the function <span class="s31">rand() </span>will return a pseudo-random number from 0 to <span class="s31">RAND_MAX</span>. These functions and <span class="s31">RAND_MAX </span>are defined in stdlib.h. While the numbers <span class="s31">rand() </span>returns will appear to be random, they are dependent on the seed value provided to <span class="s31">srand()</span>. To maintain pseudo-randomness between subsequent program executions, the randomizer must be seeded with a different value each time. One common practice is to use the number of seconds since epoch (returned from the <span class="s31">time() </span>function) as the seed. The rand_example.c program demonstrates this technique.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">rand_example.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_317.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main() { int i;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;RAND_MAX is %u\n&quot;, RAND_MAX); srand(time(0));</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;random values from 0 to RAND_MAX\n&quot;); for(i=0; i &lt; 8; i++)</p><p class="s31" style="padding-left: 104pt;text-indent: 12pt;line-height: 106%;text-align: left;">printf(&quot;%d\n&quot;, rand()); printf(&quot;random values from 1 to 20\n&quot;); for(i=0; i &lt; 8; i++)</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;%d\n&quot;, (rand()%20)+1);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_318.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Notice how the modulus operator is used to obtain random values from 1 to 20.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_319.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc rand_example.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">RAND_MAX is 2147483647</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">random values from 0 to RAND_MAX</p><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">815015288</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1315541117</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">2080969327</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">450538726</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">710528035</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">907694519</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1525415338</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1843056422</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">random values from 1 to 20</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">2</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">3</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">8</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">5</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">9</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">20</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./a.out RAND_MAX is 2147483647</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">random values from 0 to RAND_MAX 678789658</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">577505284</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1472754734</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">2134715072</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1227404380</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1746681907</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">341911720</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">93522744</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">random values from 1 to 20</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">6</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">16</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">12</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">19</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">8</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">19</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">2</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_320.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The program’s output just displays random numbers. Pseudo-randomness can also be used for more complex programs, as you will see in this section’s final script.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part47.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part49.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
