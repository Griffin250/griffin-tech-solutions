<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x423 Network Byte Order</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part77.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part79.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;"><a name="bookmark67">0x423 Network Byte Order</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: justify;">The port number and IP address used in the <span class="s31">AF_INET </span>socket address structure are expected to follow the network byte ordering, which is big-endian. This is the opposite of <span class="s27">x</span>86’s little-endian byte ordering, so these values must be con- verted. There are several functions specifically for these conversions, whose prototypes are defined in the netinet/in.h and arpa/inet.h include files. Here is a summary of these common byte order conversion functions:</p><p class="s46" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">htonl(<span class="s78">long value</span>) <span class="s76">Host-to-Network Long</span></p><p style="padding-left: 109pt;text-indent: 0pt;text-align: left;">Converts a 32-bit integer from the host’s byte order to network byte order</p><p class="s46" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">htons(<span class="s78">short value</span>) <span class="s76">Host-to-Network Short</span></p><p style="padding-left: 109pt;text-indent: 0pt;text-align: left;">Converts a 16-bit integer from the host’s byte order to network byte order</p><p class="s46" style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">ntohl(<span class="s78">long value</span>) <span class="s76">Network-to-Host Long</span></p><p style="padding-left: 109pt;text-indent: 0pt;text-align: left;">Converts a 32-bit integer from network byte order to the host’s byte order</p><p class="s46" style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">ntohs(<span class="s78">long value</span>) <span class="s76">Network-to-Host Short</span></p><p style="padding-left: 109pt;text-indent: 0pt;text-align: left;">Converts a 16-bit integer from network byte order to the host’s byte order</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">For compatibility with all architectures, these conversion functions should still be used even if the host is using a processor with big-endian byte ordering.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part77.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part79.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
