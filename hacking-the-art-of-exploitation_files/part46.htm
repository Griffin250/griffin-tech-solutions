<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x284 Structs</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part45.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part47.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark36">0x284 Structs</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">Sometimes there are multiple variables that should be grouped together and treated like one. In C, <span class="s27">structs </span>are variables that can contain many other vari- ables. Structs are often used by various system functions and libraries, so understanding how to use structs is a prerequisite to using these functions.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">A simple example will suffice for now. When dealing with many time functions, these functions use a time struct called <span class="s31">tm</span>, which is defined in /usr/include/ time.h. The structâ€™s definition is as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_303.png"/></span></p><p class="s31" style="padding-bottom: 1pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">struct tm {</p><table style="border-collapse:collapse;margin-left:118.694pt" cellspacing="0"><tr style="height:10pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">tm_sec;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">/* seconds */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">tm_min;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/* minutes */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">tm_hour;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">/* hours */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">tm_mday;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">/* day of the month */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">tm_mon;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/* month */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">tm_year;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 10pt;text-align: left;">/* year */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">tm_wday;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">/* day of the week */</p></td></tr><tr style="height:11pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">tm_yday;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">/* day in the year */</p></td></tr><tr style="height:10pt"><td style="width:26pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int</p></td><td style="width:64pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">tm_isdst;</p></td><td style="width:128pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">/* daylight saving time */</p></td></tr></table><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_304.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">After this struct is defined, <span class="s31">struct tm </span>becomes a usable variable type, which can be used to declare variables and pointers with the data type of the <span class="s31">tm </span>struct. The time_example.c program demonstrates this. When <span class="s31">time.h </span>is included, the <span class="s31">tm </span>struct is defined, which is later used to declare the <span class="s31">current_time </span>and <span class="s31">time_ptr </span>variables.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">time_example.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_305.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;time.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">int main() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">long int seconds_since_epoch; struct tm current_time, *time_ptr;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">int hour, minute, second, day, month, year;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">seconds_since_epoch = time(0); // Pass time a null pointer as argument. printf(&quot;time() - seconds since epoch: %ld\n&quot;, seconds_since_epoch);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">time_ptr = &amp;current_time; // Set time_ptr to the address of</p><p class="s31" style="padding-left: 104pt;text-indent: 114pt;line-height: 107%;text-align: left;">// the current_time struct. localtime_r(&amp;seconds_since_epoch, time_ptr);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Three different ways to access struct elements: hour = current_time.tm_hour; // Direct access minute = time_ptr-&gt;tm_min;  // Access via pointer second = *((int *) time_ptr); // Hacky pointer access</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;Current time is: %02d:%02d:%02d\n&quot;, hour, minute, second);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_306.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">The <span class="s31">time() </span>function will return the number of seconds since January 1, 1970. Time on Unix systems is kept relative to this rather arbitrary point in time, which is also known as the <span class="s27">epoch</span>. The <span class="s31">localtime_r() </span>function expects two pointers as arguments: one to the number of seconds since epoch and the other to a <span class="s31">tm </span>struct. The pointer <span class="s31">time_ptr </span>has already been set to the address</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">of <span class="s31">current_time</span>, an empty <span class="s31">tm </span>struct. The address-of operator is used to provide a pointer to <span class="s31">seconds_since_epoch </span>for the other argument to <span class="s31">localtime_r()</span>, which fills the elements of the <span class="s31">tm </span>struct. The elements of structs can be accessed in three different ways; the first two are the proper ways to access struct elements, and the third is a hacked solution. If a struct variable is used, its elements can be accessed by adding the elementsâ€™ names to the end of the variable name with a period. Therefore, <span class="s31">current_time.tm_hour </span>will access just the <span class="s31">tm_hour </span>element of the <span class="s31">tm </span>struct called <span class="s31">current_time</span>. Pointers to structs are often used, since it is much more efficient to pass a four-byte pointer than an entire data structure. Struct pointers are so common that C has a built-in method to access struct elements from a struct pointer without needing to dereference the pointer. When using a struct pointer like <span class="s31">time_ptr</span>, struct elements can be similarly accessed by the struct elementâ€™s name, but using a series of charac- ters that looks like an arrow pointing right. Therefore, <span class="s31">time_ptr-&gt;tm_min </span>will access the <span class="s31">tm_min </span>element of the <span class="s31">tm </span>struct that is pointed to by <span class="s31">time_ptr</span>. The seconds could be accessed via either of these proper methods, using the <span class="s31">tm_sec </span>element or the <span class="s31">tm </span>struct, but a third method is used. Can you figure out how this third method works?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_307.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc time_example.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">time() - seconds since epoch: 1189311588 Current time is: 04:19:48 reader@hacking:~/booksrc $ ./a.out time() - seconds since epoch: 1189311600 Current time is: 04:20:00 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_308.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The program works as expected, but how are the seconds being accessed in the <span class="s31">tm </span>struct? Remember that in the end, itâ€™s all just memory. Since <span class="s31">tm_sec </span>is defined at the beginning of the <span class="s31">tm </span>struct, that integer value is also found at the beginning. In the line <span class="s31">second = *((int *) time_ptr)</span>, the variable <span class="s31">time_ptr </span>is typecast from a <span class="s31">tm </span>struct pointer to an integer pointer. Then this typecast pointer is dereferenced, returning the data at the pointerâ€™s address. Since the address to the <span class="s31">tm </span>struct also points to the first element of this struct, this will retrieve the integer value for <span class="s31">tm_sec </span>in the struct. The following addition to the time_example.c code (time_example2.c) also dumps the bytes of the <span class="s31">current_time</span>. This shows that the elements of <span class="s31">tm </span>struct are right next to each other in memory. The elements further down in the struct can also be directly accessed with pointers by simply adding to the address of the pointer.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">time_example2.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_309.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;time.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void dump_time_struct_bytes(struct tm *time_ptr, int size) { int i;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">unsigned char *raw_ptr;</p><p class="s31" style="padding-top: 2pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;bytes of struct located at 0x%08x\n&quot;, time_ptr); raw_ptr = (unsigned char *) time_ptr;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; size; i++)</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;%02x &quot;, raw_ptr[i]);</p><p class="s31" style="padding-left: 129pt;text-indent: -12pt;text-align: left;">if(i%16 == 15) // Print a newline every 16 bytes. printf(&quot;\n&quot;);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\n&quot;);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">int main() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">long int seconds_since_epoch; struct tm current_time, *time_ptr;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int hour, minute, second, i, *int_ptr;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">seconds_since_epoch = time(0); // Pass time a null pointer as argument. printf(&quot;time() - seconds since epoch: %ld\n&quot;, seconds_since_epoch);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">time_ptr = &amp;current_time; // Set time_ptr to the address of</p><p class="s31" style="padding-left: 104pt;text-indent: 114pt;text-align: left;">// the current_time struct. localtime_r(&amp;seconds_since_epoch, time_ptr);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">// Three different ways to access struct elements: hour = current_time.tm_hour; // Direct access minute = time_ptr-&gt;tm_min;  // Access via pointer second = *((int *) time_ptr); // Hacky pointer access</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 209%;text-align: left;">printf(&quot;Current time is: %02d:%02d:%02d\n&quot;, hour, minute, second); dump_time_struct_bytes(time_ptr, sizeof(struct tm));</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">minute = hour = 0; // Clear out minute and hour. int_ptr = (int *) time_ptr;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; 3; i++) {</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;int_ptr @ 0x%08x : %d\n&quot;, int_ptr, *int_ptr); int_ptr++; // Adding 1 to int_ptr adds 4 to the address,</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}      // since an int is 4 bytes in size.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_310.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The results of compiling and executing time_example2.c are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_311.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gcc -g time_example2.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">time() - seconds since epoch: 1189311744 Current time is: 04:22:24</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">bytes of struct located at 0xbffff7f0</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">18 00 00 00 16 00 00 00 04 00 00 00 09 00 00 00</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">08 00 00 00 6b 00 00 00 00 00 00 00 fb 00 00 00</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00 00 00 00 00 00 00 00 28 a0 04 08</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">int_ptr @ 0xbffff7f0 : 24 int_ptr @ 0xbffff7f4 : 22 int_ptr @ 0xbffff7f8 : 4 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_312.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">While struct memory can be accessed this way, assumptions are made about the type of variables in the struct and the lack of any padding between variables. Since the data types of a structâ€™s elements are also stored in the struct, using proper methods to access struct elements is much easier.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part45.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part47.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
