<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x270 Memory Segmentation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part37.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part39.htm">Next &gt;</a></p><p class="s30" style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><a name="bookmark28">0x270 Memory Segmentation</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">A compiled program’s memory is divided into five segments: text, data, bss, heap, and stack. Each segment represents a special portion of memory that is set aside for a certain purpose.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">The <span class="s27">text segment </span>is also sometimes called the <span class="s27">code segment</span>. This is where the assembled machine language instructions of the program are located. The execution of instructions in this segment is nonlinear, thanks to the aforementioned high-level control structures and functions, which compile into branch, jump, and call instructions in assembly language. As a program executes, the EIP is set to the first instruction in the text segment. The processor then follows an execution loop that does the following:</p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">1. Reads the instruction that EIP is pointing to</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">2. Adds the byte length of the instruction to EIP</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">3. Executes the instruction that was read in step 1</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">4. Goes back to step 1</p><p style="padding-top: 9pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">Sometimes the instruction will be a jump or a call instruction, which changes the EIP to a different address of memory. The processor doesn’t care about the change, because it’s expecting the execution to be nonlinear anyway. If EIP is changed in step 3, the processor will just go back to step 1 and read the instruction found at the address of whatever EIP was changed to.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">Write permission is disabled in the text segment, as it is not used to store variables, only code. This prevents people from actually modifying the pro- gram code; any attempt to write to this segment of memory will cause the program to alert the user that something bad happened, and the program will be killed. Another advantage of this segment being read-only is that it can be shared among different copies of the program, allowing multiple executions of the program at the same time without any problems. It should also be noted that this memory segment has a fixed size, since nothing ever changes in it.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: left;">The data and bss segments are used to store global and static program variables. The <span class="s27">data segment </span>is filled with the initialized global and static variables, while the <span class="s27">bss segment </span>is filled with their uninitialized counterparts. Although these segments are writable, they also have a fixed size. Remember that global variables persist, despite the functional context (like the variable <span class="s31">j </span>in the previous examples). Both global and static variables are able to persist because they are stored in their own memory segments.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">The <span class="s27">heap segment </span>is a segment of memory a programmer can directly control. Blocks of memory in this segment can be allocated and used for whatever the programmer might need. One notable point about the heap segment is that it isn’t of fixed size, so it can grow larger or smaller as needed. All of the memory within the heap is managed by allocator and deallocator algorithms, which respectively reserve a region of memory in the heap for use and remove reservations to allow that portion of memory to be reused for later reservations. The heap will grow and shrink depending on how much memory is reserved for use. This means a programmer using the heap allocation functions can reserve and free memory on the fly. The growth of the heap moves downward toward higher memory addresses.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">The <span class="s27">stack segment </span>also has variable size and is used as a temporary scratch pad to store local function variables and context during function calls. This is what GDB’s backtrace command looks at. When a program calls a function, that function will have its own set of passed variables, and the function’s code will be at a different memory location in the text (or code) segment. Since the context and the EIP must change when a function is called, the stack is used to remember all of the passed variables, the location the EIP should return to after the function is finished, and all the local variables used by that function. All of this information is stored together on the stack in what is collectively called a <span class="s27">stack frame</span>. The stack contains many stack frames.</p><p style="padding-left: 91pt;text-indent: 18pt;text-align: left;">In general computer science terms, a <span class="s27">stack </span>is an abstract data structure that is used frequently. It has <span class="s27">first-in, last-out (FILO) ordering</span>, which means the first item that is put into a stack is the last item to come out of it. Think of it as putting beads on a piece of string that has a knot on one end—you can’t get the first bead off until you have removed all the other beads. When an item is placed into a stack, it’s known as <span class="s27">pushing</span>, and when an item is removed from a stack, it’s called <span class="s27">popping</span>.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">As the name implies, the stack segment of memory is, in fact, a stack data structure, which contains stack frames. The ESP register is used to keep track of the address of the end of the stack, which is constantly changing as items are pushed into and popped off of it. Since this is very dynamic behavior, it makes sense that the stack is also not of a fixed size. Opposite to the dynamic growth of the heap, as the stack changes in size, it grows upward in a visual listing of memory, toward lower memory addresses.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: left;">The FILO nature of a stack might seem odd, but since the stack is used to store context, it’s very useful. When a function is called, several things are pushed to the stack together in a <span class="s27">stack frame</span>. The EBP register—sometimes called the <span class="s27">frame pointer (FP) </span>or <span class="s27">local base (LB) pointer</span>—is used to reference local function variables in the current stack frame. Each stack frame contains the parameters to the function, its local variables, and two pointers that are nec- essary to put things back the way they were: the saved frame pointer (SFP) and the return address. The <span class="s27">SFP </span>is used to restore EBP to its previous value, and the <span class="s27">return address </span>is used to restore EIP to the next instruction found after the function call. This restores the functional context of the previous stack frame.</p><p style="padding-top: 3pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The following stack_example.c code has two functions: <span class="s31">main() </span>and</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">test_function()<span class="p">.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">stack_example.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_231.png"/></span></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void test_function(int a, int b, int c, int d) { int flag;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">char buffer[10];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">flag = 31337; buffer[0] = &#39;A&#39;;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main() { test_function(1, 2, 3, 4);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_232.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">This program first declares a test function that has four arguments, which are all declared as integers: <span class="s31">a</span>, <span class="s31">b</span>, <span class="s31">c</span>, and <span class="s31">d</span>. The local variables for the function include a single character called <span class="s31">flag </span>and a 10-character buffer called <span class="s31">buffer</span>. The memory for these variables is in the stack segment, while the machine instructions for the function’s code is stored in the text segment. After compiling the program, its inner workings can be examined with GDB. The following output shows the disassembled machine instructions for <span class="s31">main() </span>and <span class="s31">test_function()</span>. The <span class="s31">main() </span>function starts at <span class="s31">0x08048357 </span>and <span class="s31">test_function() </span>starts at <span class="s31">0x08048344</span>. The first few instructions of each function (shown in bold below) set up the stack frame. These instructions are collectively called the <span class="s27">procedure prologue </span>or <span class="s27">function prologue</span>. They save the frame pointer on the stack, and they save stack memory for the local function variables. Sometimes the function prologue will handle some stack alignment as well. The exact prologue instructions will vary greatly depending on the compiler and compiler options, but in general these instructions build the stack frame.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_233.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g stack_example.c reader@hacking:~/booksrc $ gdb -q ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) disass main</p><p class="s31" style="padding-bottom: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Dump of assembler code for function main():</p><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048357</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+0&gt;:</p></td><td style="width:32pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">push</p></td><td style="width:113pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048358</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+1&gt;:</p></td><td style="width:32pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp,esp</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804835a</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+3&gt;:</p></td><td style="width:32pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">sub</p></td><td style="width:113pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">esp,0x18</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804835d</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+6&gt;:</p></td><td style="width:32pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">and</p></td><td style="width:113pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp,0xfffffff0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048360</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+9&gt;:</p></td><td style="width:32pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">eax,0x0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048365</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+14&gt;:</p></td><td style="width:32pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sub</p></td><td style="width:113pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp,eax</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048367</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+16&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp+12],0x4</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804836f</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+24&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [esp+8],0x3</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048377</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+32&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [esp+4],0x2</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804837f</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+40&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp],0x1</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048386</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+47&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">call</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x8048344 &lt;test_function&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804838b</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+52&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">leave</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804838c</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+53&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ret</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">End of assembler dump</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) disass test_function()</p><p class="s31" style="padding-bottom: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Dump of assembler code for function test_function:</p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:31pt"><td style="width:132pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048344 &lt;test_function+0&gt;:</p><p class="s45" style="padding-right: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048345 &lt;test_function+1&gt;: 0x08048347 &lt;test_function+3&gt;:</p></td><td style="width:29pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">push</p><p class="s45" style="padding-left: 4pt;padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov sub</p></td><td style="width:172pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp</p><p class="s45" style="padding-left: 4pt;padding-right: 105pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ebp,esp esp,0x28</p></td></tr><tr style="height:11pt"><td style="width:132pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0x0804834a &lt;test_function+6&gt;:</p></td><td style="width:29pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:172pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [ebp-12],0x7a69</p></td></tr><tr style="height:55pt"><td style="width:132pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-right: 4pt;text-indent: 0pt;line-height: 106%;text-align: justify;">0x08048351 &lt;test_function+13&gt;: 0x08048355 &lt;test_function+17&gt;: 0x08048356 &lt;test_function+18&gt;:</p><p class="s42" style="padding-right: 42pt;text-indent: 0pt;text-align: justify;">End of assembler dump (gdb)</p></td><td style="width:29pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">mov leave ret</p></td><td style="width:172pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">BYTE PTR [ebp-40],0x41</p></td></tr></table><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">When the program is run, the <span class="s31">main() </span>function is called, which simply calls</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">test_function()<span class="p">.</span></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">When the <span class="s31">test_function() </span>is called from the <span class="s31">main() </span>function, the various values are pushed to the stack to create the start of the stack frame as follows. When <span class="s31">test_function() </span>is called, the function arguments are pushed onto the stack in reverse order (since it’s FILO). The arguments for the function are 1, 2, 3, and 4, so the subsequent push instructions push 4, 3, 2, and finally 1 onto the stack. These values correspond to the variables <span class="s31">d</span>, <span class="s31">c</span>, <span class="s31">b</span>, and <span class="s31">a </span>in the function. The instructions that put these values on the stack are shown in bold in the <span class="s31">main() </span>function’s disassembly below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_234.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) disass main</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Dump of assembler code for function main:</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x08048357 &lt;main+0&gt;:  push  ebp 0x08048358 &lt;main+1&gt;:  mov  ebp,esp 0x0804835a &lt;main+3&gt;:  sub  esp,0x18</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x0804835d &lt;main+6&gt;:  and  esp,0xfffffff0 0x08048360 &lt;main+9&gt;:  mov  eax,0x0 0x08048365 &lt;main+14&gt;:  sub  esp,eax</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">0x08048367 &lt;main+16&gt;:  mov  DWORD PTR [esp+12],0x4</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x0804836f &lt;main+24&gt;:  mov  DWORD PTR [esp+8],0x3 0x08048377 &lt;main+32&gt;:  mov  DWORD PTR [esp+4],0x2</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">0x0804837f &lt;main+40&gt;:  mov  DWORD PTR [esp],0x1 <span class="s31">0x08048386 &lt;main+47&gt;:  call  0x8048344 &lt;test_function&gt; 0x0804838b &lt;main+52&gt;:  leave</span></p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x0804838c &lt;main+53&gt;:  ret End of assembler dump (gdb)</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_235.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Next, when the assembly call instruction is executed, the return address is pushed onto the stack and the execution flow jumps to the start of <span class="s31">test_function() </span>at <span class="s31">0x08048344</span>. The return address value will be the location of the instruction following the current EIP—specifically, the value stored</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">during step 3 of the previously mentioned execution loop. In this case, the return address would point to the leave instruction in <span class="s31">main() </span>at <span class="s31">0x0804838b</span>.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The call instruction both stores the return address on the stack and jumps EIP to the beginning of <span class="s31">test_function()</span>, so <span class="s31">test_function()</span>’s procedure pro- logue instructions finish building the stack frame. In this step, the current value of EBP is pushed to the stack. This value is called the saved frame</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">pointer (SFP) and is later used to restore EBP back to its original state. The current value of ESP is then copied into EBP to set the new frame pointer. This frame pointer is used to reference the local variables of the function (<span class="s31">flag </span>and <span class="s31">buffer</span>). Memory is saved for these variables by subtracting from ESP. In the end, the stack frame looks something like this:</p><p class="s49" style="padding-top: 8pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">Top of the Stack</p><table style="border-collapse:collapse;margin-left:3pt" cellspacing="0"><tr style="height:16pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s50" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">buffer</p></td></tr><tr style="height:15pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s50" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">flag</p></td></tr><tr style="height:15pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s51" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Saved frame pointer (SFP)</p></td></tr><tr style="height:15pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s51" style="padding-top: 3pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Return address (<span class="s50">ret</span>)</p></td></tr><tr style="height:15pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s51" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">a</p></td></tr><tr style="height:15pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s51" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">b</p></td></tr><tr style="height:15pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s51" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">c</p></td></tr><tr style="height:16pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s51" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">d</p></td></tr><tr style="height:18pt"><td style="width:86pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p class="s52" style="padding-top: 2pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">Low addresses</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="11" height="3" alt="image" src="Image_236.png"/></span></p><p class="s52" style="padding-left: 242pt;text-indent: 0pt;text-align: left;">Frame pointer (EBP)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="16" height="7" alt="image" src="Image_237.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="12" height="12" alt="image" src="Image_238.png"/></span></p><p class="s52" style="padding-top: 5pt;padding-left: 92pt;text-indent: 0pt;text-align: left;">High addresses   <span><img width="89" height="11" alt="image" src="Image_239.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">We can watch the stack frame construction on the stack using GDB. In the following output, a breakpoint is set in <span class="s31">main() </span>before the call to <span class="s31">test_function() </span>and also at the beginning of <span class="s31">test_function()</span>. GDB will put the first break- point before the function arguments are pushed to the stack, and the second breakpoint after <span class="s31">test_function()</span>’s procedure prologue. When the program is run, execution stops at the breakpoint, where the register’s ESP (stack pointer), EBP (frame pointer), and EIP (execution pointer) are examined.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_240.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) list main 4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">5     flag = 31337;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">6     buffer[0] = &#39;A&#39;;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">7   }</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">8</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">9   int main() {</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">10    test_function(1, 2, 3, 4);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">11   }</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) break 10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Breakpoint 1 at 0x8048367: file stack_example.c, line 10. (gdb) break test_function</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Breakpoint 2 at 0x804834a: file stack_example.c, line 5. (gdb) run</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Starting program: /home/reader/booksrc/a.out</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Breakpoint 1, main () at stack_example.c:10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">10    test_function(1, 2, 3, 4); (gdb) i r esp ebp eip</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp      0xbffff7f0    0xbffff7f0</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">ebp       0xbffff808    0xbffff808</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">eip      0x8048367    0x8048367 &lt;main+16&gt; (gdb) x/5i $eip</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x8048367 &lt;main+16&gt;:  mov  DWORD PTR [esp+12],0x4</p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:10pt"><td style="width:93pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0x804836f &lt;main+24&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:208pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp+8],0x3</p></td></tr><tr style="height:11pt"><td style="width:93pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0x8048377 &lt;main+32&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:208pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp+4],0x2</p></td></tr><tr style="height:11pt"><td style="width:93pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">0x804837f &lt;main+40&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:208pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [esp],0x1</p></td></tr><tr style="height:11pt"><td style="width:93pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">0x8048386 &lt;main+47&gt;:</p></td><td style="width:32pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">call</p></td><td style="width:208pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x8048344 &lt;test_function&gt;</p></td></tr><tr style="height:14pt"><td style="width:93pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb)</p></td><td style="width:32pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:208pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">This breakpoint is right before the stack frame for the <span class="s31">test_function() </span>call is created. This means the bottom of this new stack frame is at the current value of ESP, <span class="s31">0xbffff7f0</span>. The next breakpoint is right after the procedure prologue for <span class="s31">test_function()</span>, so continuing will build the stack frame. The output below shows similar information at the second breakpoint. The local variables (<span class="s31">flag </span>and <span class="s31">buffer</span>) are referenced relative to the frame pointer (EBP).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_241.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">(gdb) cont Continuing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Breakpoint 2, test_function (a=1, b=2, c=3, d=4) at stack_example.c:5</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">5     flag = 31337; (gdb) i r esp ebp eip</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp      0xbffff7c0    0xbffff7c0</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">ebp       0xbffff7e8    0xbffff7e8</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">eip      0x804834a    0x804834a &lt;test_function+6&gt; (gdb) disass test_function</p><p class="s31" style="padding-bottom: 1pt;padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Dump of assembler code for function test_function:</p><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048344 &lt;test_function+0&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">push</p></td><td style="width:172pt" colspan="2"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp</p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048345 &lt;test_function+1&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:172pt" colspan="2"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ebp,esp</p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048347 &lt;test_function+3&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">sub</p></td><td style="width:172pt" colspan="2"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">esp,0x28</p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x0804834a &lt;test_function+6&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:172pt" colspan="2"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [ebp-12],0x7a69</p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048351 &lt;test_function+13&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:172pt" colspan="2"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">BYTE PTR [ebp-40],0x41</p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048355 &lt;test_function+17&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">leave</p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048356 &lt;test_function+18&gt;:</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ret</p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">End of assembler dump.</p></td><td style="width:34pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb) print $ebp-12</p></td><td style="width:34pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">$1 = (void *) 0xbffff7dc</p></td><td style="width:34pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(gdb) print $ebp-40</p></td><td style="width:34pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">$2 = (void *) 0xbffff7c0</p></td><td style="width:34pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:130pt" colspan="2"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(gdb) x/16xw $esp</p></td><td style="width:34pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:172pt" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:12pt"><td style="width:56pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff7c0:</p></td><td style="width:74pt"><p class="s35" style="padding-right: 17pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0<span class="s42">0x00000000</span></p></td><td style="width:59pt"><p class="s42" style="padding-left: 7pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08049548</p></td><td style="width:70pt"><p class="s42" style="padding-right: 10pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff7d8</p></td><td style="width:77pt"><p class="s42" style="padding-right: 19pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x08048249</p></td></tr><tr style="height:11pt"><td style="width:56pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff7d0:</p></td><td style="width:74pt"><p class="s42" style="padding-right: 16pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xb7f9f729</p></td><td style="width:59pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xb7fd6ff4</p></td><td style="width:70pt"><p class="s42" style="padding-right: 9pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff808</p></td><td style="width:77pt"><p class="s42" style="padding-right: 18pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x080483b9</p></td></tr><tr style="height:11pt"><td style="width:56pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff7e0:</p></td><td style="width:74pt"><p class="s42" style="padding-right: 16pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xb7fd6ff4</p></td><td style="width:59pt"><p class="s35" style="text-indent: 0pt;line-height: 9pt;text-align: left;">@<span class="s42">0xbffff89c</span></p></td><td style="width:70pt"><p class="s35" style="padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: right;">8<span class="s42">0xbffff808</span></p></td><td style="width:77pt"><p class="s35" style="padding-right: 17pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0<span class="s42">0x0804838b</span></p></td></tr><tr style="height:11pt"><td style="width:56pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff7f0:</p></td><td style="width:74pt"><p class="s35" style="padding-right: 17pt;text-indent: 0pt;line-height: 10pt;text-align: right;">@<span class="s45">0x00000001</span></p></td><td style="width:59pt"><p class="s45" style="padding-left: 7pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000002</p></td><td style="width:70pt"><p class="s45" style="padding-right: 10pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x00000003</p></td><td style="width:77pt"><p class="s45" style="padding-right: 19pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x00000004</p></td></tr><tr style="height:14pt"><td style="width:56pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb)</p></td><td style="width:74pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:59pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:70pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:77pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">The stack frame is shown on the stack at the end. The four arguments to the function can be seen at the bottom of the stack frame (<span class="s53">0</span>), with the return address found directly on top (<span class="s53">0</span>). Above that is the saved frame pointer of <span class="s31">0xbffff808 </span>(<span class="s53">@</span>), which is what EBP was in the previous stack frame. The rest of the memory is saved for the local stack variables: <span class="s31">flag </span>and <span class="s31">buffer</span>. Calculat- ing their relative addresses to EBP show their exact locations in the stack frame. Memory for the <span class="s31">flag </span>variable is shown at <span class="s53">@ </span>and memory for the buffer variable is shown at <span class="s53">O</span>. The extra space in the stack frame is just</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">padding.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">After the execution finishes, the entire stack frame is popped off of the stack, and the EIP is set to the return address so the program can continue execution. If another function was called within the function, another stack frame would be pushed onto the stack, and so on. As each function ends, its stack frame is popped off of the stack so execution can be returned to the previous function. This behavior is the reason this segment of memory is organized in a FILO data structure.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The various segments of memory are arranged in the order they were presented, from the lower memory addresses to the higher memory addresses. Since most people are familiar with seeing numbered lists that count downward, the smaller memory addresses are shown at the top.</p><table style="border-collapse:collapse;margin-left:3pt" cellspacing="0"><tr style="height:16pt"><td style="width:101pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Text (code) segment</p></td></tr><tr style="height:16pt"><td style="width:101pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Data segment</p></td></tr><tr style="height:16pt"><td style="width:101pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">bss segment</p></td></tr><tr style="height:98pt"><td style="width:101pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 2pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Heap segment</p><p class="s55" style="padding-top: 7pt;padding-left: 33pt;padding-right: 27pt;text-indent: -2pt;text-align: right;">The heap grows down toward higher memory addresses.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s55" style="padding-left: 30pt;padding-right: 26pt;text-indent: 0pt;text-align: left;">The stack grows up toward lower</p><p class="s55" style="padding-left: 30pt;text-indent: 0pt;text-align: left;">memory addresses.</p><p class="s54" style="padding-top: 7pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Stack segment</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"/><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Some texts have this reversed, which can be very confusing; so for this book, smaller memory addresses</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">are always shown at the top. Most debuggers also display memory in this style, with the smaller memory addresses at the top and the higher ones at the bottom.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Since the heap and the stack are both dynamic, they both grow in different directions toward each other. This minimizes wasted space, allowing the stack to be larger if the heap is small and vice versa.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part37.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part39.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
