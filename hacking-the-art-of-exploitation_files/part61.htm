<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x350 Format Strings</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part60.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part62.htm">Next &gt;</a></p><p class="s30" style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><a name="bookmark51">0x350 Format Strings</a></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">A format string exploit is another technique you can use to gain control of a privileged program. Like buffer overflow exploits, <span class="s27">format string exploits </span>also depend on programming mistakes that may not appear to have an obvious impact on security. Luckily for programmers, once the technique is known, it’s fairly easy to spot format string vulnerabilities and eliminate them.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Although format string vulnerabilities aren’t very common anymore, the following techniques can also be used in other situations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part60.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part62.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
