<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x251 The Bigger Picture</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part26.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part28.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;"><a name="bookmark17">0x251 The Bigger Picture</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Okay, this has all been stuff you would learn in an elementary programming class—basic, but essential. Most introductory programming classes just teach how to read and write C. Don’t get me wrong, being fluent in C is very useful and is enough to make you a decent programmer, but it’s only a piece of the bigger picture. Most programmers learn the language from the top down and never see the big picture. Hackers get their edge from knowing how all the pieces interact within this bigger picture. To see the bigger picture in the realm of programming, simply realize that C code is meant to be compiled. The code can’t actually do anything until it’s compiled into an executable binary file. Thinking of C-source as a program is a common misconception that is exploited by hackers every day. The binary <span class="s31">a.out</span>’s instructions are written in machine language, an elementary language the CPU can under- stand. Compilers are designed to translate the language of C code into machine language for a variety of processor architectures. In this case, the processor is in a family that uses the <span class="s27">x</span>86 architecture. There are also Sparc processor architectures (used in Sun Workstations) and the PowerPC processor arch- itecture (used in pre-Intel Macs). Each architecture has a different machine language, so the compiler acts as a middle ground—translating C code into machine language for the target architecture.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">As long as the compiled program works, the average programmer is only concerned with source code. But a hacker realizes that the compiled program is what actually gets executed out in the real world. With a better understanding of how the CPU operates, a hacker can manipulate the pro- grams that run on it. We have seen the source code for our first program and compiled it into an executable binary for the <span class="s27">x</span>86 architecture. But what does this executable binary look like? The GNU development tools include a pro- gram called <span class="s31">objdump</span>, which can be used to examine compiled binaries. Let’s start by looking at the machine code the <span class="s31">main() </span>function was translated into.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_070.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;"><a name="bookmark40">reader@hacking:~/booksrc $ objdump -D a.out | grep -A20 main.: 08048374 &lt;main&gt;:</a></p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048374:    55           push  %ebp</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048375:    89 e5          mov  %esp,%ebp</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048377:    83 ec 08        sub  $0x8,%esp</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;line-height: 107%;text-align: left;">804837a:    83 e4 f0         and   $0xfffffff0,%esp 804837d:    b8 00 00 00 00      mov   $0x0,%eax</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048382:    29 c4          sub  %eax,%esp</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;line-height: 107%;text-align: justify;">8048384:    c7 45 fc 00 00 00 00   movl  $0x0,0xfffffffc(%ebp) 804838b:    83 7d fc 09        cmpl  $0x9,0xfffffffc(%ebp) 804838f:    7e 02           jle   8048393 &lt;main+0x1f&gt;</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: justify;">8048391:    eb 13         jmp  80483a6 &lt;main+0x32&gt;</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: justify;">8048393:    c7 04 24 84 84 04 08  movl  $0x8048484,(%esp)</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;line-height: 107%;text-align: justify;">804839a:    e8 01 ff ff ff     call  80482a0 &lt;printf@plt&gt; 804839f:    8d 45 fc        lea  0xfffffffc(%ebp),%eax</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483a2:    ff 00          incl  (%eax)</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483a4:    eb e5         jmp  804838b &lt;main+0x17&gt;</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483a6:    c9           leave</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483a7:    c3            ret</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483a8:    90           nop</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483a9:    90           nop</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">80483aa:    90           nop</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_071.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">The <span class="s31">objdump </span>program will spit out far too many lines of output to sensibly examine, so the output is piped into <span class="s31">grep </span>with the command-line option to only display 20 lines after the regular expression <span class="s31">main.:</span>. Each byte is represented in <span class="s27">hexadecimal notation</span>, which is a base-16 numbering system. The numbering system you are most familiar with uses a base-10 system, since at 10 you need to add an extra symbol. Hexadecimal uses 0 through 9 to represent 0 through 9, but it also uses A through F to represent the values 10 through 15. This is a convenient notation since a byte contains 8 bits, each of which can be either true or false. This means a byte has 256 (2<span class="s41">8</span>) possible values, so each byte can be described with 2 hexadecimal digits.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">The hexadecimal numbers—starting with <span class="s31">0x8048374 </span>on the far left—are memory addresses. The bits of the machine language instructions must be put somewhere, and this somewhere is called <span class="s27">memory</span>. Memory is just a collection of bytes of temporary storage space that are numbered with addresses.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">Like a row of houses on a local street, each with its own address, memory can be thought of as a row of bytes, each with its own memory address. Each byte of memory can be accessed by its address, and in this case the CPU accesses this part of memory to retrieve the machine language instructions that make up the compiled program. Older Intel <span class="s27">x</span>86 processors use a 32-bit addressing scheme, while newer ones use a 64-bit one. The 32-bit processors have 2<span class="s41">32</span> (or 4,294,967,296) possible addresses, while the 64-bit ones have 2<span class="s41">64</span> (1.84467441 × 10<span class="s41">19</span>) possible addresses. The 64-bit processors can run in 32-bit compatibility mode, which allows them to run 32-bit code quickly.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: left;">The hexadecimal bytes in the middle of the listing above are the machine language instructions for the <span class="s27">x</span>86 processor. Of course, these hexadecimal values are only representations of the bytes of binary 1s and 0s the CPU can under- stand. But since <span class="s27">0101010110001001111001011000001111101100111100001 . . .</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">isn’t very useful to anything other than the processor, the machine code is displayed as hexadecimal bytes and each instruction is put on its own line, like splitting a paragraph into sentences.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">Come to think of it, the hexadecimal bytes really aren’t very useful them- selves, either—that’s where assembly language comes in. The instructions on the far right are in assembly language. Assembly language is really just a col- lection of mnemonics for the corresponding machine language instructions. The instruction <span class="s31">ret </span>is far easier to remember and make sense of than <span class="s31">0xc3 </span>or <span class="s31">11000011</span>. Unlike C and other compiled languages, assembly language instruc- tions have a direct one-to-one relationship with their corresponding machine language instructions. This means that since every processor architecture has different machine language instructions, each also has a different form of assembly language. Assembly is just a way for programmers to represent the machine language instructions that are given to the processor. Exactly how these machine language instructions are represented is simply a matter of convention and preference. While you can theoretically create your own <span class="s27">x</span>86 assembly language syntax, most people stick with one of the two main types:</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;"><a href="part27.htm#bookmark40" class="a">AT&amp;T syntax and Intel syntax. The assembly shown in the output on page </a>21 is AT&amp;T syntax, as just about all of Linux’s disassembly tools use this syntax by default. It’s easy to recognize AT&amp;T syntax by the cacophony of <span class="s31">% </span>and <span class="s31">$ </span><a href="part27.htm#bookmark40" class="a">symbols prefixing everything (take a look again at the example on page </a>21). The same code can be shown in Intel syntax by providing an additional command-line option, <span class="s31">-M intel</span>, to <span class="s31">objdump</span>, as shown in the output below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_072.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ objdump -M intel -D a.out | grep -A20 main.: 08048374 &lt;main&gt;:</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048374:    55           push  ebp</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048375:    89 e5          mov  ebp,esp</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048377:    83 ec 08        sub  esp,0x8</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;line-height: 107%;text-align: left;">804837a:    83 e4 f0         and   esp,0xfffffff0 804837d:    b8 00 00 00 00      mov   eax,0x0</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048382:    29 c4          sub  esp,eax</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">8048384:   c7 45 fc 00 00 00 00  mov  DWORD PTR [ebp-4],0x0</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">804838b:    83 7d fc 09      cmp  DWORD PTR [ebp-4],0x9</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">804838f:    7e 02          jle  8048393 &lt;main+0x1f&gt;</p><table style="border-collapse:collapse;margin-left:93.2601pt" cellspacing="0"><tr style="height:10pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">8048391:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">eb</p></td><td style="width:83pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">13</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">jmp</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80483a6 &lt;main+0x32&gt;</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">8048393:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">c7</p></td><td style="width:83pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">04 24 84 84 04 08</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp],0x8048484</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">804839a:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: right;">e8</p></td><td style="width:83pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">01 ff ff ff</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">call</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">80482a0 &lt;printf@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">804839f:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: right;">8d</p></td><td style="width:83pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">45 fc</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">lea</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">eax,[ebp-4]</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80483a2:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">ff</p></td><td style="width:83pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">00</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">inc</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [eax]</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80483a4:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">eb</p></td><td style="width:83pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">e5</p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">jmp</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">804838b &lt;main+0x17&gt;</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">80483a6:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: right;">c9</p></td><td style="width:83pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">leave</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">80483a7:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: right;">c3</p></td><td style="width:83pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ret</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80483a8:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">90</p></td><td style="width:83pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">nop</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80483a9:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">90</p></td><td style="width:83pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">nop</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80483aa:</p></td><td style="width:26pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">90</p></td><td style="width:83pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:34pt"><p class="s42" style="padding-left: 8pt;text-indent: 0pt;line-height: 9pt;text-align: left;">nop</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s31" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_073.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Personally, I think Intel syntax is much more readable and easier to understand, so for the purposes of this book, I will try to stick with this syntax. Regardless of the assembly language representation, the commands a pro- cessor understands are quite simple. These instructions consist of an oper- ation and sometimes additional arguments that describe the destination and/or the source for the operation. These operations move memory around, perform some sort of basic math, or interrupt the processor to get it to do something else. In the end, that’s all a computer processor can really do. But in the same way millions of books have been written using a relatively small alphabet of letters, an infinite number of possible programs can be created using a relatively small collection of machine instructions.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: justify;">Processors also have their own set of special variables called <span class="s27">registers</span>. Most of the instructions use these registers to read or write data, so understanding the registers of a processor is essential to understanding the instructions.</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: justify;">The bigger picture keeps getting bigger. . . .</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part26.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part28.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
