<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x760 Password Cracking</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part181.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part183.htm">Next &gt;</a></p><p class="s30" style="padding-top: 3pt;padding-left: 37pt;text-indent: 0pt;text-align: left;"><a name="bookmark167">0x760 Password Cracking</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Passwords aren’t generally stored in plaintext form. A file containing all the passwords in plaintext form would be far too attractive a target, so instead, a one-way hash function is used. The best-known of these functions is based on DES and is called <span class="s31">crypt()</span>, which is described in the manual page shown below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1284.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">NAME</p><p class="s31" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">crypt - password and data encryption</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">SYNOPSIS</p><p class="s31" style="padding-left: 119pt;text-indent: 0pt;line-height: 107%;text-align: left;">#define _XOPEN_SOURCE #include &lt;unistd.h&gt;</p><p class="s31" style="padding-top: 1pt;padding-left: 91pt;text-indent: 28pt;line-height: 21pt;text-align: left;">char *crypt(const char *key, const char *salt); DESCRIPTION</p><p class="s31" style="padding-left: 119pt;text-indent: 0pt;line-height: 8pt;text-align: left;">crypt() is the password encryption function. It is based on the Data</p><p class="s31" style="padding-left: 119pt;text-indent: 0pt;line-height: 107%;text-align: left;">Encryption Standard algorithm with variations intended (among other things) to discourage use of hardware implementations of a key search.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 119pt;text-indent: 0pt;text-align: left;">key is a user&#39;s typed password.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-bottom: 2pt;padding-left: 119pt;text-indent: 0pt;line-height: 107%;text-align: left;">salt is a two-character string chosen from the set [a–zA–Z0–9./]. This string is used to perturb the algorithm in one of 4096 different ways.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1285.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">This is a one-way hash function that expects a plaintext password and a salt value for input, and then outputs a hash with the salt value prepended to it. This hash is mathematically irreversible, meaning that it is impossible to determine the original password using only the hash. Writing a quick program to experiment with this function will help clarify any confusion.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">crypt_test.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1286.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#define _XOPEN_SOURCE #include &lt;unistd.h&gt; #include &lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main(int argc, char *argv[]) { if(argc &lt; 2) {</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;Usage: %s &lt;plaintext password&gt; &lt;salt value&gt;\n&quot;, argv[0]); exit(1);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;password \&quot;%s\&quot; with salt \&quot;%s\&quot; &quot;, argv[1], argv[2]); printf(&quot;hashes to ==&gt; %s\n&quot;, crypt(argv[1], argv[2]));</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1287.png"/></span></p><p style="padding-top: 7pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">When this program is compiled, the crypt library needs to be linked.</p><p style="padding-left: 36pt;text-indent: 0pt;text-align: center;">This is shown in the following output, along with some test runs.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1288.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gcc -o crypt_test crypt_test.c</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">/tmp/cccrSvYU.o: In function `main&#39;: crypt_test.c:(.text+0x73): undefined reference to `crypt&#39; collect2: ld returned 1 exit status</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -o crypt_test crypt_test.c -l crypt reader@hacking:~/booksrc $ ./crypt_test testing je</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">password &quot;testing&quot; with salt &quot;je&quot; hashes to ==&gt; jeLu9ckBgvgX. reader@hacking:~/booksrc $ ./crypt_test test je</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">password &quot;test&quot; with salt &quot;je&quot; hashes to ==&gt; jeHEAX1m66RV. reader@hacking:~/booksrc $ ./crypt_test test xy</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">password &quot;test&quot; with salt &quot;xy&quot; hashes to ==&gt; xyVSuHLjceD92 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1289.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Notice that in the last two runs, the same password is encrypted, but using different salt values. The salt value is used to perturb the algorithm further, so there can be multiple hash values for the same plaintext value if different salt values are used. The hash value (including the prepended salt) is stored in the password file under the premise that if an attacker were to steal the password file, the hashes would be useless.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When a legitimate user needs to authenticate using the password hash, that user’s hash is looked up in the password file. The user is prompted to enter her password, the original salt value is extracted from the password file, and whatever the user types is sent through the same one-way hash function with the salt value. If the correct password was entered, the one-way hashing function will produce the same hash output as is stored in the password file. This allows authentication to function as expected, without ever having to store the plaintext password.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part181.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part183.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
