<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x267 Variable Scoping</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part36.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part38.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark27">0x267 Variable Scoping</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Another interesting concept regarding memory in C is variable scoping or contextâ€”in particular, the contexts of variables within functions. Each func- tion has its own set of local variables, which are independent of everything else. In fact, multiple calls to the same function all have their own contexts. You can use the <span class="s31">printf() </span>function with format strings to quickly explore this; check it out in scope.c.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">scope.c</p><p style="text-indent: 0pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_207.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 21pt;text-align: left;">#include &lt;stdio.h&gt; void func3() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 8pt;text-align: left;">int i = 11;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t\t\t[in func3] i = %d\n&quot;, i);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void func2() { int i = 7;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t\t[in func2] i = %d\n&quot;, i); func3();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t\t[back in func2] i = %d\n&quot;, i);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void func1() { int i = 5;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t[in func1] i = %d\n&quot;, i); func2();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">printf(&quot;\t[back in func1] i = %d\n&quot;, i);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;text-align: left;">int main() { int i = 3;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;[in main] i = %d\n&quot;, i); func1();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;[back in main] i = %d\n&quot;, i);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_208.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The output of this simple program demonstrates nested function calls.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_209.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gcc scope.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[in main] i = 3</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">[in func1] i = 5</p><p class="s31" style="padding-left: 159pt;text-indent: 0pt;text-align: left;">[in func2] i = 7</p><p class="s31" style="padding-left: 159pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in func3] i = 11 [back in func2] i = 7</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 34pt;line-height: 106%;text-align: left;">[back in func1] i = 5 [back in main] i = 3 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_210.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In each function, the variable <span class="s31">i </span>is set to a different value and printed. Notice that within the <span class="s31">main() </span>function, the variable <span class="s31">i </span>is 3, even after calling <span class="s31">func1() </span>where the variable <span class="s31">i </span>is 5. Similarly, within <span class="s31">func1() </span>the variable <span class="s31">i </span>remains 5, even after calling <span class="s31">func2() </span>where <span class="s31">i </span>is 7, and so forth. The best way to think of this is that each function call has its own version of the variable <span class="s31">i</span>.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Variables can also have a global scope, which means they will persist across all functions. Variables are global if they are defined at the beginning of the code, outside of any functions. In the scope2.c example code shown below, the variable <span class="s31">j </span>is declared globally and set to 42. This variable can be read from and written to by any function, and the changes to it will persist between functions.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">scope2.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_211.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 21pt;text-align: left;">int j = 42; // j is a global variable. void func3() {</p><p class="s31" style="padding-top: 1pt;padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">int i = 11, j = 999; // Here, j is a local variable of func3(). printf(&quot;\t\t\t[in func3] i = %d, j = %d\n&quot;, i, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void func2() { int i = 7;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t\t[in func2] i = %d, j = %d\n&quot;, i, j); printf(&quot;\t\t[in func2] setting j = 1337\n&quot;);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">j = 1337; // Writing to j func3();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t\t[back in func2] i = %d, j = %d\n&quot;, i, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void func1() { int i = 5;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t[in func1] i = %d, j = %d\n&quot;, i, j); func2();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t[back in func1] i = %d, j = %d\n&quot;, i, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main() { int i = 3;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;[in main] i = %d, j = %d\n&quot;, i, j); func1();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;[back in main] i = %d, j = %d\n&quot;, i, j);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_212.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The results of compiling and executing scope2.c are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_213.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc scope2.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[in main] i = 3, j = 42</p><p class="s31" style="padding-top: 2pt;padding-left: 125pt;text-indent: 0pt;text-align: left;">[in func1] i = 5, j = 42</p><p class="s31" style="padding-left: 159pt;text-indent: 0pt;line-height: 107%;text-align: left;">[in func2] i = 7, j = 42 [in func2] setting j = 1337</p><p class="s31" style="padding-left: 159pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in func3] i = 11, j = 999 [back in func2] i = 7, j = 1337</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[back in func1] i = 5, j = 1337 [back in main] i = 3, j = 1337 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_214.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In the output, the global variable <span class="s31">j </span>is written to in <span class="s31">func2()</span>, and the change persists in all functions except <span class="s31">func3()</span>, which has its own local variable called <span class="s31">j</span>. In this case, the compiler prefers to use the local variable. With all these variables using the same names, it can be a little confusing, but remember that in the end, itâ€™s all just memory. The global variable <span class="s31">j </span>is just stored in memory, and every function is able to access that memory. The local variables for each function are each stored in their own places in memory, regardless of the identical names. Printing the memory addresses of these variables will give a clearer picture of what&#39;s going on. In the scope3.c example code below, the variable addresses are printed using the unary address-of operator.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">scope3.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_215.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 21pt;text-align: left;">int j = 42; // j is a global variable. void func3() {</p><p class="s31" style="padding-top: 1pt;padding-left: 104pt;text-indent: 0pt;line-height: 106%;text-align: left;">int i = 11, j = 999; // Here, j is a local variable of func3(). printf(&quot;\t\t\t[in func3] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;\t\t\t[in func3] j @ 0x%08x = %d\n&quot;, &amp;j, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;text-align: justify;">void func2() { int i = 7;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: justify;">printf(&quot;\t\t[in func2] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;\t\t[in func2] j @ 0x%08x = %d\n&quot;, &amp;j, j); printf(&quot;\t\t[in func2] setting j = 1337\n&quot;);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">j = 1337; // Writing to j func3();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t\t[back in func2] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;\t\t[back in func2] j @ 0x%08x = %d\n&quot;, &amp;j, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 9pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: justify;">void func1() { int i = 5;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: justify;">printf(&quot;\t[in func1] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;\t[in func1] j @ 0x%08x = %d\n&quot;, &amp;j, j); func2();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: justify;">printf(&quot;\t[back in func1] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;\t[back in func1] j @ 0x%08x = %d\n&quot;, &amp;j, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s31" style="padding-top: 2pt;padding-left: 104pt;text-indent: -12pt;text-align: justify;">int main() { int i = 3;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: justify;">printf(&quot;[in main] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;[in main] j @ 0x%08x = %d\n&quot;, &amp;j, j); func1();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: justify;">printf(&quot;[back in main] i @ 0x%08x = %d\n&quot;, &amp;i, i); printf(&quot;[back in main] j @ 0x%08x = %d\n&quot;, &amp;j, j);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_216.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The results of compiling and executing scope3.c are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_217.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc scope3.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[in main] i @ 0xbffff834 = 3 [in main] j @ 0x08049988 = 42</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">[in func1] i @ 0xbffff814 = 5 [in func1] j @ 0x08049988 = 42</p><p class="s31" style="padding-left: 159pt;text-indent: 0pt;line-height: 106%;text-align: left;">[in func2] i @ 0xbffff7f4 = 7 [in func2] j @ 0x08049988 = 42 [in func2] setting j = 1337</p><p class="s31" style="padding-left: 193pt;text-indent: 0pt;line-height: 107%;text-align: left;">[in func3] i @ 0xbffff7d4 = 11 [in func3] j @ 0xbffff7d0 = 999</p><p class="s31" style="padding-left: 159pt;text-indent: 0pt;line-height: 107%;text-align: left;">[back in func2] i @ 0xbffff7f4 = 7 [back in func2] j @ 0x08049988 = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">[back in func1] i @ 0xbffff814 = 5 [back in func1] j @ 0x08049988 = 1337</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">[back in main] i @ 0xbffff834 = 3 [back in main] j @ 0x08049988 = 1337 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_218.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In this output, it is obvious that the variable <span class="s31">j </span>used by <span class="s31">func3() </span>is different than the <span class="s31">j </span>used by the other functions. The <span class="s31">j </span>used by <span class="s31">func3() </span>is located at <span class="s31">0xbffff7d0</span>, while the <span class="s31">j </span>used by the other functions is located at <span class="s31">0x08049988</span>. Also, notice that the variable <span class="s31">i </span>is actually a different memory address for each function.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">In the following output, GDB is used to stop execution at a breakpoint in <span class="s31">func3()</span>. Then the backtrace command shows the record of each function call on the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_219.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g scope3.c reader@hacking:~/booksrc $ gdb -q ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) list 1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1   #include &lt;stdio.h&gt;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">2</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">3    int j = 42; // j is a global variable. 4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">5   void func3() {</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">6     int i = 11, j = 999; // Here, j is a local variable of func3().</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">7     printf(&quot;\t\t\t[in func3] i @ 0x%08x = %d\n&quot;, &amp;i, i);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">8     printf(&quot;\t\t\t[in func3] j @ 0x%08x = %d\n&quot;, &amp;j, j);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">9   }</p><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) break 7</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 1 at 0x8048388: file scope3.c, line 7. (gdb) run</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Starting program: /home/reader/booksrc/a.out [in main] i @ 0xbffff804 = 3</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[in main] j @ 0x08049988 = 42</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 107%;text-align: left;">[in func1] i @ 0xbffff7e4 = 5 [in func1] j @ 0x08049988 = 42</p><p class="s31" style="padding-left: 159pt;text-indent: 0pt;line-height: 107%;text-align: left;">[in func2] i @ 0xbffff7c4 = 7 [in func2] j @ 0x08049988 = 42 [in func2] setting j = 1337</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Breakpoint 1, func3 () at scope3.c:7</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">7     printf(&quot;\t\t\t[in func3] i @ 0x%08x = %d\n&quot;, &amp;i, i); (gdb) bt</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#0 func3 () at scope3.c:7</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#1 0x0804841d in func2 () at scope3.c:17 #2 0x0804849f in func1 () at scope3.c:26 #3 0x0804852b in main () at scope3.c:35 (gdb)</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_220.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">The backtrace also shows the nested function calls by looking at records kept on the stack. Each time a function is called, a record called a <span class="s27">stack frame </span>is put on the stack. Each line in the backtrace corresponds to a stack frame. Each stack frame also contains the local variables for that context. The local variables contained in each stack frame can be shown in GDB by adding the word <span class="s27">full </span>to the backtrace command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_221.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) bt full</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#0 func3 () at scope3.c:7</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">i = 11</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">j = 999</p><p class="s31" style="padding-left: 125pt;text-indent: -34pt;line-height: 107%;text-align: left;">#1 0x0804841d in func2 () at scope3.c:17 i = 7</p><p class="s31" style="padding-left: 125pt;text-indent: -34pt;line-height: 107%;text-align: left;">#2 0x0804849f in func1 () at scope3.c:26 i = 5</p><p class="s31" style="padding-left: 125pt;text-indent: -34pt;line-height: 107%;text-align: left;">#3 0x0804852b in main () at scope3.c:35 i = 3</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb)</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_222.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">The full backtrace clearly shows that the local variable <span class="s31">j </span>only exists in <span class="s31">func3()</span>â€™s context. The global version of the variable <span class="s31">j </span>is used in the other functionâ€™s contexts.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">In addition to globals, variables can also be defined as static variables by prepending the keyword <span class="s31">static </span>to the variable definition. Similar to global variables, a <span class="s27">static variable </span>remains intact between function calls; however, static variables are also akin to local variables since they remain local within a par- ticular function context. One different and unique feature of static variables is that they are only initialized once. The code in static.c will help explain these concepts.</p><p class="s40" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">static.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_223.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">void function() { // An example function, with its own context int var = 5;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">static int static_var = 5; // Static variable initialization</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t[in function] var = %d\n&quot;, var);  printf(&quot;\t[in function] static_var = %d\n&quot;, static_var); var++;       // Add one to var.</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static_var++;  // Add one to static_var.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: -12pt;text-align: left;">int main() { // The main function, with its own context int i;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">static int static_var = 1337; // Another static, in a different context</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; 5; i++) { // Loop 5 times.</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;[in main] static_var = %d\n&quot;, static_var); function(); // Call the function.</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_224.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The aptly named <span class="s31">static_var </span>is defined as a static variable in two places: within the context of <span class="s31">main() </span>and within the context of <span class="s31">function()</span>. Since static variables are local within a particular functional context, these variables can have the same name, but they actually represent two different locations in memory. The function simply prints the values of the two variables in its con- text and then adds 1 to both of them. Compiling and executing this code will show the difference between the static and nonstatic variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_225.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc static.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 125pt;text-indent: -34pt;line-height: 107%;text-align: left;">[in main] static_var = 1337 [in function] var = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var = 5 [in main] static_var = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[in function] var = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var = 6 [in main] static_var = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">[in function] var = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var = 7 [in main] static_var = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">[in function] var = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;text-align: left;">[in function] static_var = 8 [in main] static_var = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;text-align: left;">[in function] var = 5</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var = 9 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_226.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Notice that the <span class="s31">static_var </span>retains its value between subsequent calls to <span class="s31">function()</span>. This is because static variables retain their values, but also because they are only initialized once. In addition, since the static variables are local to a particular functional context, the <span class="s31">static_var </span>in the context of <span class="s31">main() </span>retains its value of 1337 the entire time.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Once again, printing the addresses of these variables by dereferencing them with the unary address operator will provide greater viability into whatâ€™s really going on. Take a look at static2.c for an example.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">static2.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_227.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;text-align: left;">void function() { // An example function, with its own context int var = 5;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">static int static_var = 5; // Static variable initialization</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t[in function] var @ %p = %d\n&quot;, &amp;var, var);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;\t[in function] static_var @ %p = %d\n&quot;, &amp;static_var, static_var); var++;     // Add 1 to var.</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static_var++;  // Add 1 to static_var.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main() { // The main function, with its own context int i;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">static int static_var = 1337; // Another static, in a different context</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; 5; i++) { // loop 5 times</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;[in main] static_var @ %p = %d\n&quot;, &amp;static_var, static_var); function(); // Call the function.</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_228.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The results of compiling and executing static2.c are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_229.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gcc static2.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 125pt;text-indent: -34pt;text-align: left;">[in main] static_var @ 0x804968c = 1337 [in function] var  @ 0xbffff814 = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var @ 0x8049688 = 5 [in main] static_var @ 0x804968c = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[in function] var @ 0xbffff814 = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var @ 0x8049688 = 6 [in main] static_var @ 0x804968c = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[in function] var @ 0xbffff814 = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var @ 0x8049688 = 7 [in main] static_var @ 0x804968c = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[in function] var @ 0xbffff814 = 5</p><p class="s31" style="padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var @ 0x8049688 = 8 [in main] static_var @ 0x804968c = 1337</p><p class="s31" style="padding-left: 125pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[in function] var @ 0xbffff814 = 5</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 34pt;line-height: 107%;text-align: left;">[in function] static_var @ 0x8049688 = 9 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_230.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">With the addresses of the variables displayed, it is apparent that the <span class="s31">static_var </span>in <span class="s31">main() </span>is different than the one found in <span class="s31">function()</span>, since they are located at different memory addresses (<span class="s31">0x804968c </span>and <span class="s31">0x8049688</span>, respectively). You may have noticed that the addresses of the local variables all have very high addresses, like <span class="s31">0xbffff814</span>, while the global and static variables all have very low memory addresses, like <span class="s31">0x0804968c </span>and <span class="s31">0x8049688</span>. Thatâ€™s very astute of youâ€”noticing details like this and asking why is one of the cornerstones of hacking. Read on for your answers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part38.htm">0x270 Memory Segmentation</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part36.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part38.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
