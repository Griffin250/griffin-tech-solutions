<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x273  Error-Checked malloc()</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part40.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part42.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark31">0x273  Error-Checked malloc()</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">In heap_example.c, there were several error checks for the <span class="s31">malloc() </span>calls. Even though the <span class="s31">malloc() </span>calls never failed, it’s important to handle all potential cases when coding in C. But with multiple <span class="s31">malloc() </span>calls, this error- checking code needs to appear in multiple places. This usually makes the code look sloppy, and it’s inconvenient if changes need to be made to the error-checking code or if new <span class="s31">malloc() </span>calls are needed. Since all the error- checking code is basically the same for every <span class="s31">malloc() </span>call, this is a perfect place to use a function instead of repeating the same instructions in multiple places. Take a look at errorchecked_heap.c for an example.</p><p class="s40" style="padding-top: 9pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">errorchecked_heap.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_254.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt;</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;line-height: 21pt;text-align: left;">void *errorchecked_malloc(unsigned int); // Function prototype for errorchecked_malloc() int main(int argc, char *argv[]) {</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 8pt;text-align: left;">char *char_ptr; // A char pointer</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">int *int_ptr;  // An integer pointer int mem_size;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 44pt;text-indent: -12pt;line-height: 107%;text-align: left;">if (argc &lt; 2)  // If there aren&#39;t command-line arguments, mem_size = 50; // use 50 as the default value.</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">else</p><p class="s31" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">mem_size = atoi(argv[1]);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t[+] allocating %d bytes of memory on the heap for char_ptr\n&quot;, mem_size); char_ptr = (char *) errorchecked_malloc(mem_size); // Allocating heap memory</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">strcpy(char_ptr, &quot;This is memory is located on the heap.&quot;); printf(&quot;char_ptr (%p) --&gt; &#39;%s&#39;\n&quot;, char_ptr, char_ptr);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t[+] allocating 12 bytes of memory on the heap for int_ptr\n&quot;); int_ptr = (int *) errorchecked_malloc(12); // Allocated heap memory again</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">*int_ptr = 31337; // Put the value of 31337 where int_ptr is pointing. printf(&quot;int_ptr (%p) --&gt; %d\n&quot;, int_ptr, *int_ptr);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">printf(&quot;\t[-] freeing char_ptr&#39;s heap memory...\n&quot;); free(char_ptr); // Freeing heap memory</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">printf(&quot;\t[+] allocating another 15 bytes for char_ptr\n&quot;);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 212%;text-align: left;">char_ptr = (char *) errorchecked_malloc(15); // Allocating more heap memory strcpy(char_ptr, &quot;new memory&quot;);</p><p class="s31" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">printf(&quot;char_ptr (%p) --&gt; &#39;%s&#39;\n&quot;, char_ptr, char_ptr);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;\t[-] freeing int_ptr&#39;s heap memory...\n&quot;); free(int_ptr); // Freeing heap memory</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">printf(&quot;\t[-] freeing char_ptr&#39;s heap memory...\n&quot;); free(char_ptr); // Freeing the other block of heap memory</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 32pt;text-indent: -12pt;text-align: left;">void *errorchecked_malloc(unsigned int size) { // An error-checked malloc() function void *ptr;</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">ptr = malloc(size); if(ptr == NULL) {</p><p class="s31" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">fprintf(stderr, &quot;Error: could not allocate heap memory.\n&quot;); exit(-1);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">return ptr;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_255.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The errorchecked_heap.c program is basically equivalent to the previous heap_example.c code, except the heap memory allocation and error checking has been gathered into a single function. The first line of code [<span class="s31">void *errorchecked_malloc(unsigned int);</span>] is the function prototype. This lets the compiler know that there will be a function called <span class="s31">errorchecked_malloc() </span>that expects a single, unsigned integer argument and returns a <span class="s31">void </span>pointer. The actual function can then be anywhere; in this case it is after the <span class="s31">main() </span>func- tion. The function itself is quite simple; it just accepts the size in bytes to allocate and attempts to allocate that much memory using <span class="s31">malloc()</span>. If the allocation fails, the error-checking code displays an error and the program exits; otherwise, it returns the pointer to the newly allocated heap memory. This way, the custom <span class="s31">errorchecked_malloc() </span>function can be used in place of a normal <span class="s31">malloc()</span>, eliminating the need for repetitious error checking after- ward. This should begin to highlight the usefulness of programming with functions.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part42.htm">0x280 Building on Basics</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part40.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part42.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
