<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x784 IP Redirection</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part193.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part195.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark179">0x784 IP Redirection</a></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Another way to decrypt encrypted packets is to trick the access point into doing all the work. Usually, wireless access points have some form of Internet connectivity, and if this is the case, an IP redirection attack is possible. First, an encrypted packet is captured, and the destination address is changed to an IP address the attacker controls, without decrypting the packet. Then, the modified packet is sent back to the wireless access point, which will decrypt the packet and send it right to the attacker’s IP address.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The packet modification is made possible due to the CRC32 checksum being a linear, unkeyed function. This means that the packet can be strate- gically modified and the checksum will still come out the same.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This attack also assumes that the source and destination IP addresses are known. This information is easy enough to figure out, just based on the standard internal network IP addressing schemes. Also, a few cases of keystream reuse due to IV collisions can be used to determine the addresses.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Once the destination IP address is known, this value can be XORed with the desired IP address, and this whole thing can be XORed into place in the encrypted packet. The XORing of the destination IP address will cancel out, leaving behind the desired IP address XORed with the keystream. Then, to ensure that the checksum stays the same, the source IP address must be strategically modified.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">For example, assume the source address is 192.168.2.57 and the destination address is 192.168.2.1. The attacker controls the address 123.45.67.89 and wants to redirect traffic there. These IP addresses</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">exist in the packet in the binary form of high- and low-order 16-bit words. The conversion is fairly simple:</p><p class="s76" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Src IP = 192.168.2.57</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">SH <span class="p">= 192 · 256 + 168 = 50344</span></p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">SL <span class="p">= 2 · 256 + 57 = 569</span></p><p class="s76" style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Dst IP = 192.168.2.1</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">DH <span class="p">= 192 · 256 + 168 = 50344</span></p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">DL <span class="p">= 2 · 256 + 1 = 513</span></p><p class="s76" style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">New IP = 123.45.67.89</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">NH <span class="p">= 123 · 256 + 45 = 31533</span></p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">NL <span class="p">= 67 · 256 + 89 = 17241</span></p><p class="s27" style="padding-top: 5pt;padding-left: 91pt;text-indent: 17pt;line-height: 12pt;text-align: left;"><span class="p">The checksum will be changed by </span>N<span class="s100">H </span><span class="p">+ </span>N<span class="s100">L </span><span class="s47"></span><span class="s95"> </span>D<span class="s100">H </span><span class="s47"></span><span class="s95"> </span>D<span class="s100">L</span><span class="p">, so this value must be subtracted from somewhere else in the packet. Since the source address is also known and doesn’t matter too much, the low-order 16-bit word of that IP address makes a good target:</span></p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">S <span class="p">&#39;</span>L <span class="p">= </span>SL <span class="s47"></span><span class="s95"> </span><span class="p">(</span>NH <span class="p">+ </span>NL <span class="s47"></span><span class="s95"> </span>DH <span class="s47"></span><span class="s95"> </span>DL<span class="p">)</span></p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">S </span>&#39;<span class="s27">L </span>= 569 <span class="s47"></span><span class="s95"> </span>(31533 + 17241 <span class="s47"></span><span class="s95"> </span>50344 <span class="s47"></span><span class="s95"> </span>513)</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">S <span class="p">&#39;</span>L <span class="p">= 2652</span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The new source IP address should therefore be 192.168.10.92. The source IP address can be modified in the encrypted packet using the same XORing trick, and then the checksums should match. When the packet is sent to the wireless access point, the packet will be decrypted and sent to 123.45.67.89, where the attacker can retrieve it.</p><p class="s27" style="padding-left: 91pt;text-indent: 18pt;text-align: left;"><span class="p">If the attacker happens to have the ability to monitor packets on an entire class B network, the source address doesn’t even need to be modified. Assuming the attacker had control over the entire 123.45.</span>X<span class="p">.</span>X <span class="p">IP range, the low-order 16-bit word of the IP address could be strategically chosen not to disturb the checksum. If </span>NL <span class="p">= </span>DH <span class="p">+ </span>DL <span class="s47"></span><span class="s95"> </span>NH<span class="p">, the checksum won’t be changed. Here’s an example:</span></p><p class="s27" style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">NL <span class="p">= </span>DH <span class="p">+ </span>DL <span class="s47"></span><span class="s95"> </span>NH</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">NL </span>= 50,344 + 513 <span class="s47"></span><span class="s95"> </span>31,533</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">N <span class="p">&#39;</span>L <span class="p">= 82390</span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">The new destination IP address should be 123.45.75.124.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part193.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part195.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
