<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x422 Socket Addresses</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part76.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part78.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark66">0x422 Socket Addresses</a></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Many of the socket functions reference a <span class="s31">sockaddr </span>structure to pass address information that defines a host. This structure is also defined in bits/socket.h, as shown on the following page.</p><p class="s40" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">From /usr/include/bits/socket.h</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_607.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">/* Get the definition of the macro to define the common sockaddr members. */ #include &lt;bits/sockaddr.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">/* Structure describing a generic socket address. */ struct sockaddr</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">{</p><p class="s67" style="padding-left: 108pt;text-indent: 0pt;line-height: 107%;text-align: left;"> <span class="s31">SOCKADDR_COMMON (sa_); /* Common data: address family and length. */ char sa_data[14];  /* Address data. */</span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_608.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The macro for <span class="s31">SOCKADDR_COMMON </span>is defined in the included bits/sockaddr.h file, which basically translates to an unsigned short int. This value defines the address family of the address, and the rest of the structure is saved for address data. Since sockets can communicate using a variety of protocol families, each with their own way of defining endpoint addresses, the defini- tion of an address must also be variable, depending on the address family. The possible address families are also defined in bits/socket.h; they usually translate directly to the corresponding protocol families.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">From /usr/include/bits/socket.h</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_609.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">/* Address families. */ #define AF_UNSPEC PF_UNSPEC #define AF_LOCAL PF_LOCAL #define AF_UNIX  PF_UNIX #define AF_FILE  PF_FILE #define AF_INET  PF_INET #define AF_AX25  PF_AX25 #define AF_IPX  PF_IPX</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define AF_APPLETALK PF_APPLETALK</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">#define AF_NETROM PF_NETROM #define AF_BRIDGE PF_BRIDGE #define AF_ATMPVC PF_ATMPVC #define AF_X25  PF_X25 #define AF_INET6 PF_INET6</p><p class="s31" style="padding-bottom: 3pt;padding-left: 112pt;text-indent: 0pt;text-align: left;">...</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_610.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Since an address can contain different types of information, depending on the address family, there are several other address structures that contain, in the address data section, common elements from the <span class="s31">sockaddr </span>structure as well as information specific to the address family. These structures are also the same size, so they can be typecast to and from each other. This means that a <span class="s31">socket() </span>function will simply accept a pointer to a <span class="s31">sockaddr </span>structure, which can in fact point to an address structure for IPv4, IPv6, or X.25. This allows the socket functions to operate on a variety of protocols.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">In this book we are going to deal with Internet Protocol version 4, which is the protocol family <span class="s31">PF_INET</span>, using the address family <span class="s31">AF_INET</span>. The parallel socket address structure for <span class="s31">AF_INET </span>is defined in the netinet/in.h file.</p><p class="s40" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">From /usr/include/netinet/in.h</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_611.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">/* Structure describing an Internet socket address. */ struct sockaddr_in</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">{</p><p class="s67" style="padding-left: 108pt;text-indent: 0pt;text-align: left;"> <span class="s31">SOCKADDR_COMMON (sin_);</span></p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">in_port_t sin_port;  /* Port number. */</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">struct in_addr sin_addr;  /* Internet address. */</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">/* Pad to size of &#39;struct sockaddr&#39;. */</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">unsigned char sin_zero[sizeof (struct sockaddr) -</p><p class="s67" style="padding-left: 129pt;text-indent: 0pt;text-align: left;"> <span class="s31">SOCKADDR_COMMON_SIZE -</span></p><p class="s31" style="padding-left: 129pt;text-indent: 0pt;line-height: 107%;text-align: left;">sizeof (in_port_t) - sizeof (struct in_addr)];</p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">};</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_612.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The <span class="s31">SOCKADDR_COMMON </span>part at the top of the structure is simply the unsigned short int mentioned above, which is used to define the address family. Since a socket endpoint address consists of an Internet address and a port number, these are the next two values in the structure. The port number is a 16-bit short, while the <span class="s31">in_addr </span>structure used for the Internet address contains a 32-bit number. The rest of the structure is just 8 bytes of padding to fill out the rest of the <span class="s31">sockaddr </span>structure. This space isnâ€™t used for anything, but must be saved so the structures can be interchangeably typecast. In the end, the socket address structures end up looking like this:</p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_613.png"/></span></p><p class="s79" style="padding-top: 2pt;padding-left: 100pt;text-indent: 0pt;text-align: center;">sa_data <span class="s80">(14 bytes)</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 2pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">Family</p><p style="text-indent: 0pt;text-align: left;"/><p class="s79" style="padding-top: 8pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">sockaddr <span class="s80">structure (Generic structure)</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_614.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_615.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_616.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_617.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_618.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_619.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_620.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_621.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_622.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_623.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_624.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_625.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="403" height="54" alt="image" src="Image_626.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="1" height="8" alt="image" src="Image_627.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s79" style="padding-left: 1pt;text-indent: 0pt;text-align: left;">sockaddr_in <span class="s80">structure (Used for IP version 4)</span></p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 2pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">Extra padding (8 bytes)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 2pt;padding-left: 21pt;text-indent: 0pt;text-align: left;">IP address</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 2pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Port #</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 2pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">Family</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 1pt;padding-left: 63pt;text-indent: 0pt;text-align: center;">Both structures are the same size.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part76.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part78.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
