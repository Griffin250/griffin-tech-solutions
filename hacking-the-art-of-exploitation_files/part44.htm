<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x282 File Permissions</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part43.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part45.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark34">0x282 File Permissions</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">If the <span class="s31">O_CREAT </span>flag is used in access mode for the <span class="s31">open() </span>function, an additional argument is needed to define the file permissions of the newly created file. This argument uses bit flags defined in sys/stat.h, which can be combined with each other using bitwise OR logic.</p><p class="s46" style="padding-top: 8pt;padding-left: 109pt;text-indent: 0pt;line-height: 143%;text-align: left;">S_IRUSR <span class="p">Give the file read permission for the user (owner). </span>S_IWUSR <span class="p">Give the file write permission for the user (owner). </span>S_IXUSR <span class="p">Give the file execute permission for the user (owner). </span>S_IRGRP <span class="p">Give the file read permission for the group.</span></p><p class="s46" style="padding-left: 109pt;text-indent: 0pt;line-height: 143%;text-align: left;">S_IWGRP <span class="p">Give the file write permission for the group. </span>S_IXGRP <span class="p">Give the file execute permission for the group. </span>S_IROTH <span class="p">Give the file read permission for other (anyone). </span>S_IWOTH <span class="p">Give the file write permission for other (anyone).</span></p><p class="s46" style="padding-left: 109pt;text-indent: 0pt;text-align: left;">S_IXOTH <span class="p">Give the file execute permission for other (anyone).</span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">If you are already familiar with Unix file permissions, those flags should make perfect sense to you. If they don’t make sense, here’s a crash course in Unix file permissions.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: justify;">Every file has an owner and a group. These values can be displayed using</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;">ls -l <span class="p">and are shown below in the following output.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_267.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ls -l /etc/passwd simplenote*</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">-rw-r--r-- 1 root  root  1424 2007-09-06 09:45 /etc/passwd</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">-rwxr-xr-x 1 reader reader 8457 2007-09-07 02:51 simplenote</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">-rw------- 1 reader reader 1872 2007-09-07 02:51 simplenote.c reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_268.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">For the /etc/passwd file, the owner is root and the group is also root. For the other two simplenote files, the owner is reader and the group is users.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Read, write, and execute permissions can be turned on and off for three different fields: user, group, and other. User permissions describe what the owner of the file can do (read, write, and/or execute), group permissions describe what users in that group can do, and other permissions describe what everyone else can do. These fields are also displayed in the front of the <span class="s31">ls -l </span>output. First, the user read/write/execute permissions are displayed, using <span class="s31">r </span>for read, <span class="s31">w </span>for write, <span class="s31">x </span>for execute, and <span class="s31">- </span>for off. The next three characters display the group permissions, and the last three characters are for the other permissions. In the output above, the simplenote program has all three user permissions turned on (shown in bold). Each permission cor- responds to a bit flag; read is 4 (100 in binary), write is 2 (010 in binary), and execute is 1 (001 in binary). Since each value only contains unique bits,</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">a bitwise OR operation achieves the same result as adding these numbers together does. These values can be added together to define permissions for user, group, and other using the <span class="s31">chmod </span>command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_269.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ chmod 731 simplenote.c reader@hacking:~/booksrc $ ls -l simplenote.c</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">-rwx-wx--x 1 reader reader 1826 2007-09-07 02:51 simplenote.c reader@hacking:~/booksrc $ chmod ugo-wx simplenote.c reader@hacking:~/booksrc $ ls -l simplenote.c</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">-r-------- 1 reader reader 1826 2007-09-07 02:51 simplenote.c reader@hacking:~/booksrc $ chmod u+w simplenote.c reader@hacking:~/booksrc $ ls -l simplenote.c</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">-rw------- 1 reader reader 1826 2007-09-07 02:51 simplenote.c reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_270.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">The first command (<span class="s31">chmod 721</span>) gives read, write, and execute permissions to the user, since the first number is 7 (4 + 2 + 1), write and execute permissions to group, since the second number is 3 (2 + 1), and only execute permis- sion to other, since the third number is 1. Permissions can also be added or subtracted using <span class="s31">chmod</span>. In the next <span class="s31">chmod </span>command, the argument <span class="s31">ugo-wx </span>means <span class="s27">Subtract write and execute permissions from user, group, and other</span>. The final <span class="s31">chmod u+w </span>command gives write permission to user.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In the simplenote program, the <span class="s31">open() </span>function uses <span class="s31">S_IRUSR|S_IWUSR </span>for its additional permission argument, which means the /tmp/notes file should only have user read and write permission when it is created.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_271.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ls -l /tmp/notes</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">-rw------- 1 reader reader 36 2007-09-07 02:52 /tmp/notes reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_272.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part43.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part45.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
