<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x266 Command-Line Arguments</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part35.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part37.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark26">0x266 Command-Line Arguments</a></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Many nongraphical programs receive input in the form of command-line arguments. Unlike inputting with <span class="s31">scanf()</span>, command-line arguments don’t require user interaction after the program has begun execution. This tends to be more efficient and is a useful input method.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In C, command-line arguments can be accessed in the <span class="s31">main() </span>function by including two additional arguments to the function: an integer and a pointer to an array of strings. The integer will contain the number of arguments, and the array of strings will contain each of those arguments. The commandline.c program and its execution should explain things.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">commandline.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_193.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;text-align: left;">int main(int arg_count, char *arg_list[]) { int i;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;There were %d arguments provided:\n&quot;, arg_count); for(i=0; i &lt; arg_count; i++)</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;argument #%d\t-\t%s\n&quot;, i, arg_list[i]);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_194.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_195.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gcc -o commandline commandline.c reader@hacking:~/booksrc $ ./commandline</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">There were 1 arguments provided:</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">argument #0  -   ./commandline reader@hacking:~/booksrc $ ./commandline this is a test There were 5 arguments provided:</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">argument #0  -   ./commandline argument #1  -   this</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">argument #2  -   is</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">argument #3  -   a</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">argument #4  -   test reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_196.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;text-align: justify;">The zeroth argument is always the name of the executing binary, and the rest of the argument array (often called an <span class="s27">argument vector</span>) contains the remaining arguments as strings.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">Sometimes a program will want to use a command-line argument as an integer as opposed to a string. Regardless of this, the argument is passed in as a string; however, there are standard conversion functions. Unlike simple typecasting, these functions can actually convert character arrays containing numbers into actual integers. The most common of these functions is <span class="s31">atoi()</span>, which is short for <span class="s27">ASCII to integer</span>. This function accepts a pointer to a string as its argument and returns the integer value it represents. Observe its usage in convert.c.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">convert.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_197.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">void usage(char *program_name) {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;Usage: %s &lt;message&gt; &lt;# of times to repeat&gt;\n&quot;, program_name); exit(1);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main(int argc, char *argv[]) { int i, count;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 116pt;text-indent: -12pt;text-align: left;">if(argc &lt; 3)   // If fewer than 3 arguments are used, usage(argv[0]); // display usage message and exit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">count = atoi(argv[2]); // Convert the 2nd arg into an integer. printf(&quot;Repeating %d times..\n&quot;, count);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; count; i++)</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;%3d - %s\n&quot;, i, argv[1]); // Print the 1st arg.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_198.png"/></span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The results of compiling and executing convert.c are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_199.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gcc convert.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Usage: ./a.out &lt;message&gt; &lt;# of times to repeat&gt;</p><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./a.out &#39;Hello, world!&#39; 3 Repeating 3 times..</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">1 - Hello, world!</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 8pt;line-height: 107%;text-align: left;">2 - Hello, world! reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_200.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In the preceding code, an <span class="s31">if </span>statement makes sure that three arguments are used before these strings are accessed. If the program tries to access mem- ory that doesn’t exist or that the program doesn’t have permission to read, the program will crash. In C it’s important to check for these types of condi- tions and handle them in program logic. If the error-checking <span class="s31">if </span>statement is commented out, this memory violation can be explored. The convert2.c program should make this more clear.</p><p class="s40" style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">convert2.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_201.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#include &lt;stdio.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">void usage(char *program_name) {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;Usage: %s &lt;message&gt; &lt;# of times to repeat&gt;\n&quot;, program_name); exit(1);</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main(int argc, char *argv[]) { int i, count;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">// if(argc &lt; 3)   // If fewer than 3 arguments are used,</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">//  usage(argv[0]); // display usage message and exit.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">count = atoi(argv[2]); // Convert the 2nd arg into an integer. printf(&quot;Repeating %d times..\n&quot;, count);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; count; i++)</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;%3d - %s\n&quot;, i, argv[1]); // Print the 1st arg.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_202.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The results of compiling and executing convert2.c are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_203.png"/></span></p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc convert2.c reader@hacking:~/booksrc $ ./a.out test Segmentation fault (core dumped) reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_204.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">When the program isn’t given enough command-line arguments, it still tries to access elements of the argument array, even though they don’t exist. This results in the program crashing due to a segmentation fault.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: left;">Memory is split into segments (which will be discussed later), and some memory addresses aren’t within the boundaries of the memory segments the program is given access to. When the program attempts to access an address that is out of bounds, it will crash and die in what’s called a <span class="s27">segmentation fault</span>. This effect can be explored further with GDB.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_205.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -g convert2.c reader@hacking:~/booksrc $ gdb -q ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) run test</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Starting program: /home/reader/booksrc/a.out test</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">Program received signal SIGSEGV, Segmentation fault. 0xb7ec819b in ?? () from /lib/tls/i686/cmov/libc.so.6 (gdb) where</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#0 0xb7ec819b in ?? () from /lib/tls/i686/cmov/libc.so.6 #1 0xb800183c in ?? ()</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#2 0x00000000 in ?? ()</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">(gdb) break main</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 1 at 0x8048419: file convert2.c, line 14. (gdb) run test</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">The program being debugged has been started already. Start it from the beginning? (y or n) y</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Starting program: /home/reader/booksrc/a.out test</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Breakpoint 1, main (argc=2, argv=<b>0xbffff894</b>) at convert2.c:14</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">14     count = atoi(argv[2]); // convert the 2nd arg into an integer (gdb) cont</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Continuing.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Program received signal SIGSEGV, Segmentation fault. 0xb7ec819b in ?? () from /lib/tls/i686/cmov/libc.so.6 (gdb) x/3xw 0xbffff894</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">0xbffff894:  0xbffff9b3   0xbffff9ce   0x00000000 (gdb) x/s 0xbffff9b3</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">0xbffff9b3:   &quot;/home/reader/booksrc/a.out&quot; (gdb) x/s 0xbffff9ce</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">0xbffff9ce:   &quot;test&quot; (gdb) x/s 0x00000000</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">0x0:   &lt;Address 0x0 out of bounds&gt; (gdb) quit</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">The program is running. Exit anyway? (y or n) y reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_206.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The program is executed with a single command-line argument of <span class="s31">test </span>within GDB, which causes the program to crash. The <span class="s31">where </span>command will sometimes show a useful backtrace of the stack; however, in this case, the stack was too badly mangled in the crash. A breakpoint is set on main and the program is re-executed to get the value of the argument vector (shown in bold). Since the argument vector is a pointer to list of strings, it is actually a pointer to a list of pointers. Using the command <span class="s31">x/3xw </span>to examine the first three memory addresses stored at the argument vector’s address shows that they are themselves pointers to strings. The first one is the zeroth argument, the second is the <span class="s31">test </span>argument, and the third is zero, which is out of bounds. When the program tries to access this memory address, it crashes with a segmentation fault.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part35.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part37.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
