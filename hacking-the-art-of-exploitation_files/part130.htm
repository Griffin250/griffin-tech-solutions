<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>The golden poison dart frog secretes an extremely toxic poison—one frog can emit enough to kill 10 adult humans. The only reason these frogs have such an amazingly powerful defense is that a certain species of snake kept eating them and developing a resistance.</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part129.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part131.htm">Next &gt;</a></p><p class="s26" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">The golden poison dart frog secretes an extremely toxic poison—one frog can emit enough to kill 10 adult humans. The only reason these frogs have such an amazingly powerful defense is that a certain species of snake kept eating them and developing a resistance.</p><p style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 112%;text-align: left;">In response, the frogs kept evolving stronger and stronger poisons as a defense. One result of this co-evolution is that the frogs are safe against all other predators. This type of co-evolution also happens with hackers. Their exploit techniques have been around for years, so it’s only natural that defensive countermeasures would develop. In response, hackers find ways to bypass and subvert these defenses, and then new defense techniques are created.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This cycle of innovation is actually quite beneficial. Even though viruses and worms can cause quite a bit of trouble and costly interruptions for busi- nesses, they force a response, which fixes the problem. Worms replicate by exploiting existing vulnerabilities in flawed software. Often these flaws are undiscovered for years, but relatively benign worms such as CodeRed or Sasser force these problems to be fixed. As with chickenpox, it’s better to suffer a</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">minor outbreak early instead of years later when it can cause real damage. If it weren’t for Internet worms making a public spectacle of these security flaws, they might remain unpatched, leaving us vulnerable to an attack from someone with more malicious goals than just replication. In this way, worms and viruses can actually strengthen security in the long run. However, there are more proactive ways to strengthen security. Defensive countermeasures exist which try to nullify the effect of an attack, or prevent the attack from happening. A countermeasure is a fairly abstract concept; this could be a security product, a set of policies, a program, or simply just an attentive system administrator. These defensive countermeasures can be separated into two groups: those that try to detect the attack and those that try to protect the vulnerability.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part131.htm">0x610 Countermeasures That Detect</a><a class="toc0" href="part132.htm">0x620 System Daemons</a><a class="toc0" href="part133.htm">0x621 Crash Course in Signals</a><a class="toc0" href="part134.htm">0x622 Tinyweb Daemon</a><a class="toc1" href="part135.htm">0x630 Tools of the Trade</a><a class="toc0" href="part136.htm">0x631 tinywebd Exploit Tool</a><a class="toc1" href="part137.htm">0x640 Log Files</a><a class="toc0" href="part138.htm">0x641 Blend In with the Crowd</a><a class="toc1" href="part139.htm">0x650 Overlooking the Obvious</a><a class="toc0" href="part140.htm">0x651 One Step at a Time</a><a class="toc0" href="part141.htm">0x652  Putting Things Back Together Again</a><a class="toc0" href="part142.htm">0x653 Child Laborers</a><a class="toc1" href="part143.htm">0x660 Advanced Camouflage</a><a class="toc0" href="part144.htm">0x661 Spoofing the Logged IP Address</a><a class="toc0" href="part145.htm">0x662 Logless Exploitation</a><a class="toc1" href="part146.htm">0x670 The Whole Infrastructure</a><a class="toc0" href="part147.htm">0x671 Socket Reuse</a><a class="toc1" href="part148.htm">0x680 Payload Smuggling</a><a class="toc0" href="part149.htm">0x681 String Encoding</a><a class="toc0" href="part150.htm">0x682 How to Hide a Sled</a><a class="toc1" href="part151.htm">0x690 Buffer Restrictions</a><a class="toc0" href="part152.htm">0x691 Polymorphic Printable ASCII Shellcode</a><a class="toc1" href="part153.htm">0x6a0 Hardening Countermeasures</a><a class="toc1" href="part154.htm">0x6b0 Nonexecutable Stack</a><a class="toc0" href="part155.htm">0x6b1 ret2libc</a><a class="toc0" href="part156.htm">0x6b2 Returning into system()</a><a class="toc1" href="part157.htm">0x6c0 Randomized Stack Space</a><a class="toc0" href="part158.htm">0x6c1 Investigations with BASH and GDB</a><a class="toc0" href="part159.htm">0x6c2  Bouncing Off linux-gate</a><a class="toc0" href="part160.htm">0x6c3 Applied Knowledge</a><a class="toc0" href="part161.htm">0x6c4 A First Attempt</a><a class="toc0" href="part162.htm">0x6c5 Playing the Odds</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part129.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part131.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
