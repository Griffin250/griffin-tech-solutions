<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x433 Transport Layer</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part85.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part87.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark75">0x433 Transport Layer</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">The transport layer can be thought of as the first line of office receptionists, picking up the mail from the network layer. If a customer wants to return a defective piece of merchandise, they send a message requesting a Return Material Authorization (RMA) number. Then the receptionist would follow the return protocol by asking for a receipt and eventually issuing an RMA number so the customer can mail the product in. The post office is only concerned with sending these messages (and packages) back and forth, not with what’s in them.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The two major protocols at this layer are the Transmission Control Protocol (TCP) and User Datagram Protocol (UDP). TCP is the most commonly used protocol for services on the Internet: telnet, HTTP (web traffic), SMTP (email traffic), and FTP (file transfers) all use TCP. One of the reasons for TCP’s popularity is that it provides a transparent, yet reliable and bidirectional, connection between two IP addresses. Stream sockets use TCP/IP connections. A bidirectional connection with TCP is similar to using a telephone—after dialing a number, a connection is made through which both parties can communicate. Reliability simply means that TCP will ensure that all the data will reach its destination in the proper order. If the packets of a connection get jumbled up and arrive out of order, TCP will make sure they’re put back in order before handing the data up to the next layer. If some packets in the middle of a connection are lost, the destination will hold on to the packets it has while the source retransmits the missing packets.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">All of this functionality is made possible by a set of flags, called <span class="s27">TCP flags</span>,</p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">and by tracking values called <span class="s27">sequence numbers</span>. The TCP flags are as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:13pt"><td style="width:35pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">TCP flag</p></td><td style="width:68pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Meaning</p></td><td style="width:231pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Purpose</p></td></tr><tr style="height:12pt"><td style="width:35pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">URG</p></td><td style="width:68pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Urgent</p></td><td style="width:231pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Identifies important data</p></td></tr><tr style="height:24pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">ACK</p></td><td style="width:68pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Acknowledgment</p></td><td style="width:231pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;line-height: 106%;text-align: left;">Acknowledges a packet; it is turned on for the majority of the connection</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">PSH</p></td><td style="width:68pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Push</p></td><td style="width:231pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Tells the receiver to push the data through instead of buffering it</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">RST</p></td><td style="width:68pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Reset</p></td><td style="width:231pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Resets a connection</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">SYN</p></td><td style="width:68pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Synchronize</p></td><td style="width:231pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Synchronizes sequence numbers at the beginning of a connection</p></td></tr><tr style="height:14pt"><td style="width:35pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">FIN</p></td><td style="width:68pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Finish</p></td><td style="width:231pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Gracefully closes a connection when both sides say goodbye</p></td></tr></table><p style="padding-top: 9pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">These flags are stored in the TCP header along with the source and destination ports. The TCP header is specified in RFC 793.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">From RFC 793</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_669.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[Page 14]</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">September 1981</p><p class="s31" style="padding-left: 274pt;text-indent: 0pt;text-align: left;">Transmission Control Protocol</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 185pt;text-indent: 0pt;text-align: left;">3. FUNCTIONAL SPECIFICATION</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">3.1. Header Format</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 106%;text-align: left;">TCP segments are sent as internet datagrams.  The Internet Protocol header carries several information fields, including the source and destination host addresses [2].  A TCP header follows the internet header, supplying information specific to the TCP protocol.  This division allows for the existence of host level protocols other than TCP.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">TCP Header Format</p><p class="s31" style="padding-top: 2pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">0          1          2          3</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|      Source Port      |    Destination Port     |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|            Sequence Number            |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|          Acknowledgment Number           |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">| Data |      |U|A|P|R|S|F|                |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">| Offset| Reserved |R|C|S|S|Y|I|      Window       |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|    |      |G|K|H|T|N|N|                |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|      Checksum      |     Urgent Pointer    |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|           Options           |   Padding   |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">|                data                |</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 67pt;text-indent: 0pt;text-align: center;">TCP Header Format</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 62pt;text-indent: 0pt;text-align: center;">Note that one tick mark represents one bit position.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 58pt;text-indent: 0pt;text-align: center;">Figure 3.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_670.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="30" height="5" alt="image" src="Image_671.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="163" height="59" alt="image" src="Image_672.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s84" style="padding-top: 7pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Server</p><p style="text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><span><img width="30" height="5" alt="image" src="Image_673.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The sequence number and acknowledgment number are used to maintain state. The SYN and ACK flags are used together to open connections in a three-step handshaking process. When a client wants to open a connection with a server, a packet with the SYN flag on, but the ACK flag off, is sent to the server. The server then responds with a packet that has both the SYN and ACK flags turned on. To complete the connection, the client sends back a packet with the SYN flag off but the ACK flag on. After that, every packet in the connection will have the ACK flag turned on and the SYN flag turned off. Only the first two packets of the connection have the SYN flag on, since those packets are used to synchronize sequence numbers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:92.869pt" cellspacing="0"><tr style="height:9pt"><td style="width:48pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101" rowspan="7"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s85" style="padding-top: 7pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">Client</p></td><td style="width:99pt;border-left-style:solid;border-left-width:1pt;border-left-color:#010101" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:22pt"><td style="width:19pt;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:80pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101" rowspan="2"><p class="s86" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">SYN packet</p><p class="s87" style="padding-left: 6pt;padding-right: 5pt;text-indent: 0pt;line-height: 107%;text-align: left;">SYN on ACK off seq # = 324808530</p><p class="s87" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">ack # = 0</p></td></tr><tr style="height:21pt"><td style="width:19pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:64pt"><td style="width:99pt;border-left-style:solid;border-left-width:1pt;border-left-color:#010101" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s86" style="padding-left: 26pt;padding-right: 5pt;text-indent: 0pt;line-height: 106%;text-align: left;">SYN/ACK packet <span class="s87">SYN on ACK on seq # = 288666267 ack # = 324808531</span></p></td></tr><tr style="height:22pt"><td style="width:19pt;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:80pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101" rowspan="2"><p class="s86" style="padding-top: 3pt;padding-left: 8pt;text-indent: 0pt;text-align: left;">ACK packet</p><p class="s87" style="padding-left: 8pt;padding-right: 3pt;text-indent: 0pt;line-height: 107%;text-align: left;">SYN off ACK on seq # = 324808531 ack # = 288666268</p></td></tr><tr style="height:21pt"><td style="width:19pt;border-top-style:solid;border-top-width:1pt;border-top-color:#010101;border-left-style:solid;border-left-width:1pt;border-left-color:#010101;border-right-style:solid;border-right-width:1pt;border-right-color:#010101"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:8pt"><td style="width:99pt;border-left-style:solid;border-left-width:1pt;border-left-color:#010101" colspan="2"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">Sequence numbers allow TCP to put unordered packets back into order, to determine whether packets are missing, and to prevent mixing up packets from other connections.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When a connection is initiated, each side generates an initial sequence number. This number is communicated to the other side in the first two SYN packets of the connection handshake. Then, with each packet that is sent, the sequence number is incremented by the number of bytes found in the data portion of the packet. This sequence number is included in the TCP packet header. In addition, each TCP header has an acknowledgment number, which is simply the other side’s sequence number plus one.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">TCP is great for applications where reliability and bidirectional communi- cation are needed. However, the cost of this functionality is paid in commu- nication overhead.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">UDP has much less overhead and built-in functionality than TCP. This lack of functionality makes it behave much like the IP protocol: It is connec- tionless and unreliable. Without built-in functionality to create connections and maintain reliability, UDP is an alternative that expects the application to deal with these issues. Sometimes connections aren’t needed, and the light- weight UDP is a much better protocol for these situations. The UDP header, defined in RFC 768, is relatively tiny. It only contains four 16-bit values in this order: source port, destination port, length, and checksum.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part87.htm">0x440 Network Sniffing</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part85.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part87.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
