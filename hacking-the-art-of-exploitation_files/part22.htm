<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x241 Variables</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part21.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part23.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark12">0x241 Variables</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">The counter used in the for loop is actually a type of variable. A <span class="s27">variable </span>can simply be thought of as an object that holds data that can be changed— hence the name. There are also variables that don’t change, which are aptly</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">called <span class="s27">constants</span>. Returning to the driving example, the speed of the car would be a variable, while the color of the car would be a constant. In pseudo- code, variables are simple abstract concepts, but in C (and in many other languages), variables must be declared and given a type before they can be used. This is because a C program will eventually be compiled into an exe- cutable program. Like a cooking recipe that lists all the required ingredients before giving the instructions, variable declarations allow you to make prep- arations before getting into the meat of the program. Ultimately, all variables are stored in memory somewhere, and their declarations allow the compiler to organize this memory more efficiently. In the end though, despite all of the variable type declarations, everything is all just memory.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In C, each variable is given a type that describes the information that is meant to be stored in that variable. Some of the most common types are <span class="s31">int </span>(integer values), <span class="s31">float </span>(decimal floating-point values), and <span class="s31">char </span>(single char- acter values). Variables are declared simply by using these keywords before listing the variables, as you can see below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_030.png"/></span></p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">int a, b; float k; char z;</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_031.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">The variables <span class="s31">a </span>and <span class="s31">b </span>are now defined as integers, <span class="s31">k </span>can accept floating- point values (such as 3.14), and <span class="s31">z </span>is expected to hold a character value, like <span class="s27">A </span>or <span class="s27">w</span>. Variables can be assigned values when they are declared or anytime afterward, using the <span class="s31">= </span>operator.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_032.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">int a = 13, b; float k;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">char z = &#39;A&#39;;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">k = 3.14;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">z = &#39;w&#39;;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">b = a + 5;</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_033.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">After the following instructions are executed, the variable <span class="s31">a </span>will contain the value of 13, <span class="s31">k </span>will contain the number 3.14, <span class="s31">z </span>will contain the character <span class="s27">w</span>, and <span class="s31">b </span>will contain the value 18, since 13 plus 5 equals 18. Variables are simply a way to remember values; however, with C, you must first declare each variable’s type.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part21.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part23.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
