<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x511 Linux System Calls in Assembly</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part115.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part117.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark105">0x511 Linux System Calls in Assembly</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Every possible Linux system call is enumerated, so they can be referenced by numbers when making the calls in assembly. These syscalls are listed in</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 11pt;text-align: left;">/usr/include/asm-i386/unistd.h.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">From /usr/include/asm-i386/unistd.h</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_837.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#ifndef _ASM_I386_UNISTD_H_ #define _ASM_I386_UNISTD_H_</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">/*</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">* This file contains the system call numbers.</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">*/</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_restart_syscall   0</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_exit   1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_fork   2</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_read   3</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_write   4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_open   5</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_close   6</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_waitpid  7</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_creat   8</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_link   9</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_unlink  10</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_execve  11</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_chdir  12</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_time   13</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_mknod  14</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_chmod  15</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_lchown  16</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_break  17</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_oldstat  18</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_lseek  19</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_getpid  20</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_mount  21</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_umount  22</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_setuid  23</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">#define <u>&nbsp;</u>NR_getuid  24</p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:10pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_stime</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">25</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_ptrace</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">26</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_alarm</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">27</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_oldfstat</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">28</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_pause</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">29</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_utime</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">30</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_stty</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">31</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_gtty</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">32</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_access</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">33</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_nice</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">34</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_ftime</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">35</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_sync</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">36</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_kill</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">37</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;"> <span class="s42">NR_rename</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">38</p></td></tr><tr style="height:11pt"><td style="width:32pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">#define</p></td><td style="width:61pt"><p class="s96" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;"> <span class="s42">NR_mkdir</span></p></td><td style="width:240pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">39</p></td></tr><tr style="height:14pt"><td style="width:32pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">...</p></td><td style="width:61pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:240pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-top: 9pt;padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: justify;">For our rewrite of helloworld.c in assembly, we will make a system call to the <span class="s31">write() </span>function for the output and then a second system call to <span class="s31">exit() </span>so the process quits cleanly. This can be done in <span class="s27">x</span>86 assembly using just two assembly instructions: <span class="s31">mov </span>and <span class="s31">int</span>.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">Assembly instructions for the <span class="s27">x</span>86 processor have one, two, three, or no operands. The operands to an instruction can be numerical values, memory addresses, or processor registers. The <span class="s27">x</span>86 processor has several 32-bit registers that can be viewed as hardware variables. The registers EAX, EBX, ECX, EDX, ESI, EDI, EBP, and ESP can all be used as operands, while the EIP register (execution pointer) cannot.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The <span class="s31">mov </span>instruction copies a value between its two operands. Using Intel assembly syntax, the first operand is the destination and the second is the source. The <span class="s31">int </span>instruction sends an interrupt signal to the kernel, defined by its single operand. With the Linux kernel, interrupt <span class="s31">0x80 </span>is used to tell the kernel to make a system call. When the <span class="s31">int 0x80 </span>instruction is executed, the kernel will make a system call based on the first four registers. The EAX register is used to specify which system call to make, while the EBX, ECX, and EDX registers are used to hold the first, second, and third arguments to the system call. All of these registers can be set using the <span class="s31">mov </span>instruction.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In the following assembly code listing, the memory segments are simply declared. The string <span class="s31">&quot;Hello, world!&quot; </span>with a newline character (<span class="s31">0x0a</span>) is in the data segment, and the actual assembly instructions are in the text segment. This follows proper memory segmentation practices.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">helloworld.asm</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_838.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">section .data   ; Data segment</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">msg   db   &quot;Hello, world!&quot;, 0x0a  ; The string and newline char</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">section .text   ; Text segment</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">global _start    ; Default entry point for ELF linking</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">_start:</p><p class="s31" style="padding-top: 2pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">; SYSCALL: write(1, msg, 14)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov eax, 4    ; Put 4 into eax, since write is syscall #4. mov ebx, 1    ; Put 1 into ebx, since stdout is 1.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov ecx, msg   ; Put the address of the string into ecx.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov edx, 14    ; Put 14 into edx, since our string is 14 bytes. int 0x80     ; Call the kernel to make the system call happen.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">; SYSCALL: exit(0)</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov eax, 1    ; Put 1 into eax, since exit is syscall #1. mov ebx, 0    ; Exit with success.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int 0x80     ; Do the syscall.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_839.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The instructions of this program are straightforward. For the <span class="s31">write() </span>syscall to standard output, the value of <span class="s31">4 </span>is put in EAX since the <span class="s31">write() </span>function is system call number 4. Then, the value of <span class="s31">1 </span>is put into EBX, since the first arg- ument of <span class="s31">write() </span>should be the file descriptor for standard output. Next, the address of the string in the data segment is put into ECX, and the length of the string (in this case, 14 bytes) is put into EDX. After these registers are loaded, the system call interrupt is triggered, which will call the <span class="s31">write() </span>function.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">To exit cleanly, the <span class="s31">exit() </span>function needs to be called with a single argument of <span class="s31">0</span>. So the value of <span class="s31">1 </span>is put into EAX, since <span class="s31">exit() </span>is system call number 1, and the value of <span class="s31">0 </span>is put into EBX, since the first and only argu- ment should be 0. Then the system call interrupt is triggered again.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">To create an executable binary, this assembly code must first be assembled and then linked into an executable format. When compiling C code, the GCC compiler takes care of all of this automatically. We are going to create an executable and linking format (ELF) binary, so the <span class="s31">global _start </span>line shows the linker where the assembly instructions begin.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The <span class="s31">nasm </span>assembler with the <span class="s31">-f elf </span>argument will assemble the helloworld.asm into an object file ready to be linked as an ELF binary.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">By default, this object file will be called helloworld.o. The linker program ld will produce an executable a.out binary from the assembled object.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_840.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ nasm -f elf helloworld.asm reader@hacking:~/booksrc $ ld helloworld.o reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Hello, world! reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_841.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This tiny program works, but it’s not shellcode, since it isn’t self-contained and must be linked.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part117.htm">0x520 The Path to Shellcode</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part115.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part117.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
