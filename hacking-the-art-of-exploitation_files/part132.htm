<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x620 System Daemons</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part131.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part133.htm">Next &gt;</a></p><p class="s30" style="padding-top: 3pt;padding-left: 37pt;text-indent: 0pt;text-align: left;"><a name="bookmark119">0x620 System Daemons</a></p><p style="padding-top: 10pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">To have a realistic discussion of exploit countermeasures and bypass methods, we first need a realistic exploitation target. A remote target will be a server program that accepts incoming connections. In Unix, these programs are</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">usually system daemons. A daemon is a program that runs in the back- ground and detaches from the controlling terminal in a certain way. The term <span class="s27">daemon </span>was first coined by MIT hackers in the 1960s. It refers to a molecule-sorting demon from an 1867 thought experiment by a physicist named James Maxwell. In the thought experiment, Maxwellâ€™s demon is a being with the supernatural ability to effortlessly perform difficult tasks, apparently violating the second law of thermodynamics. Similarly, in Linux, system daemons tirelessly perform tasks such as providing SSH service and keeping system logs. Daemon programs typically end with a <span class="s27">d </span>to signify they are daemons, such as <span class="s27">sshd </span>or <span class="s27">syslogd</span>.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 10pt;text-align: left;"><a href="part82.htm#bookmark101" class="a">With a few additions, the tinyweb.c code on page </a>214 can be made into a</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">more realistic system daemon. This new code uses a call to the <span class="s31">daemon() </span>func- tion, which will spawn a new background process. This function is used by many system daemon processes in Linux, and its man page is shown below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_993.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">DAEMON(3)         Linux Programmer&#39;s Manual         DAEMON(3)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">NAME</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">daemon - run in the background</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">SYNOPSIS</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">#include &lt;unistd.h&gt;</p><p class="s31" style="padding-top: 2pt;padding-left: 19pt;text-indent: 29pt;line-height: 21pt;text-align: left;">int daemon(int nochdir, int noclose); DESCRIPTION</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;line-height: 8pt;text-align: left;">The daemon() function is for programs wishing to detach themselves from</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">the controlling terminal and run in the background as system daemons.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unless the argument nochdir is non-zero, daemon() changes the current working directory to the root (&quot;/&quot;).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;line-height: 107%;text-align: left;">Unless the argument noclose is non-zero, daemon() will redirect stan dard input, standard output and standard error to /dev/null.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">RETURN VALUE</p><p class="s31" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">(This function forks, and if the fork() succeeds, the parent does</p><p class="s31" style="padding-bottom: 3pt;padding-left: 49pt;text-indent: 0pt;line-height: 106%;text-align: left;">_exit(0),  so that further errors are seen by the child only.)  On suc cess zero will be returned.  If an error occurs,  daemon()  returns  -1 and  sets  the global variable errno to any of the errors specified for the library functions fork(2) and setsid(2).</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_994.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">System daemons run detached from a controlling terminal, so the new tinyweb daemon code writes to a log file. Without a controlling terminal, system daemons are typically controlled with signals. The new tinyweb daemon program will need to catch the terminate signal so it can exit cleanly when killed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part131.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part133.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
