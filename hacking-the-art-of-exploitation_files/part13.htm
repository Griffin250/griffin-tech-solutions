<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>PR O G R A M M ING </title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part12.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part14.htm">Next &gt;</a></p><p class="s20" style="padding-top: 11pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">PR O G R A M M ING </p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part14.htm">Hacker is a term for both those who write code and those who exploit it. Even though these two groups of hackers have different end goals, both groups use similar problem-solving techniques. Since an understanding of programming helps those who exploit, and an under- standing of exploitation helps those who program, many</a><a class="toc1" href="part15.htm">0x210 What Is Programming?</a><a class="toc1" href="part16.htm">0x220 Pseudo-code</a><a class="toc1" href="part17.htm">0x230 Control Structures</a><a class="toc1" href="part18.htm">0x231 If-Then-Else</a><a class="toc1" href="part19.htm">0x232 While/Until Loops</a><a class="toc1" href="part20.htm">0x233 For Loops</a><a class="toc2" href="part21.htm">0x240 More Fundamental Programming Concepts</a><a class="toc1" href="part22.htm">0x241 Variables</a><a class="toc1" href="part23.htm">0x242 Arithmetic Operators</a><a class="toc1" href="part24.htm">0x243 Comparison Operators</a><a class="toc1" href="part25.htm">0x244 Functions</a><a class="toc2" href="part26.htm">0x250 Getting Your Hands Dirty</a><a class="toc1" href="part27.htm">0x251 The Bigger Picture</a><a class="toc1" href="part28.htm">0x252  The x86 Processor</a><a class="toc1" href="part29.htm">0x253 Assembly Language</a><a class="toc2" href="part30.htm">0x260 Back to Basics</a><a class="toc1" href="part31.htm">0x261 Strings</a><a class="toc1" href="part32.htm">0x262 Signed, Unsigned, Long, and Short</a><a class="toc1" href="part33.htm">0x263 Pointers</a><a class="toc1" href="part34.htm">0x264 Format Strings</a><a class="toc1" href="part35.htm">0x265 Typecasting</a><a class="toc1" href="part36.htm">0x266 Command-Line Arguments</a><a class="toc1" href="part37.htm">0x267 Variable Scoping</a><a class="toc2" href="part38.htm">0x270 Memory Segmentation</a><a class="toc1" href="part39.htm">0x271  Memory Segments in C</a><a class="toc1" href="part40.htm">0x272 Using the Heap</a><a class="toc1" href="part41.htm">0x273  Error-Checked malloc()</a><a class="toc2" href="part42.htm">0x280 Building on Basics</a><a class="toc1" href="part43.htm">0x281 File Access</a><a class="toc1" href="part44.htm">0x282 File Permissions</a><a class="toc1" href="part45.htm">0x283 User IDs</a><a class="toc1" href="part46.htm">0x284 Structs</a><a class="toc1" href="part47.htm">0x285 Function Pointers</a><a class="toc1" href="part48.htm">0x286  Pseudo-random Numbers</a><a class="toc1" href="part49.htm">0x287 A Game of Chance</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part12.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part14.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
