<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x741 RSA</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part175.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part177.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark161">0x741 RSA</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">RSA is one of the more popular asymmetric algorithms. The security of RSA is based on the difficulty of factoring large numbers. First, two prime numbers are chosen, <span class="s27">P </span>and <span class="s27">Q, </span>and their product, <span class="s27">N, </span>is computed:</p><p class="s27" style="padding-top: 5pt;padding-left: 27pt;text-indent: 0pt;text-align: center;">N <span class="p">= </span>P <span class="p">· </span>Q</p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">Then, the number of numbers between 1 and <span class="s27">N </span><span class="s47"></span><span class="s95"> </span>1 that are relatively prime to <span class="s27">N </span>must be calculated (two numbers are <span class="s27">relatively prime </span>if their greatest common divisor is 1). This is known as Euler’s totient function, and it is usually denoted by the lowercase Greek letter phi (<span class="s47"></span>).</p><p style="padding-left: 91pt;text-indent: 18pt;text-align: left;">For example, <span class="s47"></span>(9) = 6, since 1, 2, 4, 5, 7, and 8 are relatively prime to 9. It should be easy to notice that if <span class="s27">N </span>is prime, <span class="s47"></span>(<span class="s27">N </span>) will be <span class="s27">N </span><span class="s47"></span><span class="s95"> </span>1. A somewhat less obvious fact is that if <span class="s27">N </span>is the product of exactly two prime numbers, <span class="s27">P </span>and <span class="s27">Q</span>, then <span class="s47"></span>(<span class="s27">P </span>· <span class="s27">Q </span>) = (<span class="s27">P </span><span class="s47"></span><span class="s95"> </span>1) · (<span class="s27">Q </span><span class="s47"></span><span class="s95"> </span>1). This comes in handy, since <span class="s47"></span>(<span class="s27">N </span>) must be calculated for RSA.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: left;">An encryption key, <span class="s27">E</span>, that is relatively prime to <span class="s47"></span>(<span class="s27">N </span>), must be chosen at random. Then a decryption key must be found that satisfies the following equation, where <span class="s27">S </span>is any integer:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">E </span>· <span class="s27">D </span>= <span class="s27">S </span>· <span class="s47"></span>(<span class="s27">N </span>) + 1</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">This can be solved with the extended Euclidean algorithm. The <span class="s27">Euclidean algorithm </span>is a very old algorithm that happens to be a very fast way to calculate</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">the greatest common divisor (GCD) of two numbers. The larger of the two numbers is divided by the smaller number, paying attention only to the remainder. Then, the smaller number is divided by the remainder, and the process is repeated until the remainder is zero. The last value for the remainder before it reaches zero is the greatest common divisor of the two original numbers. This algorithm is quite fast, with a run time of O(log<span class="s110">10</span><span class="s27">N </span>). That means that it should take about as many steps to find the answer as the number of digits in the larger number.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 106%;text-align: left;">In the table below, the GCD of 7253 and 120, written as gcd(7253, 120), will be calculated. The table starts by putting the two numbers in the columns A and B, with the larger number in column A. Then A is divided by B<span class="s27">, </span>and the remainder is put in column R. On the next line, the old B becomes the new A<span class="s27">, </span>and the old R becomes the new B. R is calculated again, and this process is repeated until the remainder is zero. The last value of R before zero is the greatest common divisor.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s48" style="padding-top: 5pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">gcd(7253, 120)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:13pt"><td style="width:35pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">A</p></td><td style="width:39pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 12pt;text-indent: 0pt;line-height: 10pt;text-align: left;">B</p></td><td style="width:39pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 11pt;text-indent: 0pt;line-height: 10pt;text-align: left;">R</p></td></tr><tr style="height:12pt"><td style="width:35pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">7253</p></td><td style="width:39pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 12pt;text-indent: 0pt;text-align: left;">120</p></td><td style="width:39pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 11pt;text-indent: 0pt;text-align: left;">53</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">120</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">53</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">14</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">53</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">11</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">14</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">3</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">11</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">2</p></td></tr><tr style="height:14pt"><td style="width:35pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">3</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:39pt"><p class="s68" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">1</p></td></tr><tr style="height:14pt"><td style="width:35pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">2</p></td><td style="width:39pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 12pt;text-indent: 0pt;text-align: left;">1</p></td><td style="width:39pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 11pt;text-indent: 0pt;text-align: left;">0</p></td></tr></table><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">So, the greatest common divisor of 7243 and 120 is 1. That means that 7250 and 120 are relatively prime to each other.</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 12pt;text-align: left;">The <span class="s27">extended Euclidean algorithm </span>deals with finding two integers, <span class="s27">J </span>and <span class="s27">K,</span></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">such that</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">J <span class="p">· </span>A <span class="p">+ </span>K <span class="p">· </span>B <span class="p">= </span>R</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">when gcd(<span class="s27">A</span>, <span class="s27">B</span>) = <span class="s27">R </span>.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This is done by working the Euclidean algorithm backward. In this case, though, the quotients are important. Here is the math from the prior example, with the quotients:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">7253 = 60 · 120 + <span class="s76">53</span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">120 = 2 · 53 + <span class="s76">14</span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">53  = 3 · 14 + <span class="s76">11</span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">14  = 1 · 11 + <span class="s76">3</span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">11  = 3 · 3 + <span class="s76">2</span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">3  = 1 · 2 + <span class="s76">1</span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">With a little bit of basic algebra, the terms can be moved around for each line so the remainder (shown in bold) is by itself on the left of the equal sign:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s76">53 </span>= 7253 <span class="s47"></span><span class="s95"> </span>60 · 120</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s76">14 </span>= 120 <span class="s47"></span><span class="s95"> </span>2 · 53</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s76">11 </span>= 53 <span class="s47"></span><span class="s95"> </span>3 · 14</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s76">3 </span>= 14 <span class="s47"></span><span class="s95"> </span>1 · 11</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s76">2 </span>= 11 <span class="s47"></span><span class="s95"> </span>3 · 3</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s76">1 </span>= 3 <span class="s47"></span><span class="s95"> </span>1 · 2</p><p style="padding-top: 6pt;padding-left: 15pt;text-indent: 0pt;text-align: center;">Starting from the bottom, it’s clear that:</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 3 <span class="s47"></span><span class="s95"> </span>1 · <span class="s76">2</span></p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">The line above that, though, is 2 = 11 <span class="s47"></span><span class="s95"> </span>3 · 3, which gives a substitution for 2:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 3 <span class="s47"></span><span class="s95"> </span>1 · (11 <span class="s47"></span><span class="s95"> </span>3 · 3)</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 4 · <span class="s76">3 </span><span class="s47"></span><span class="s95"> </span>1 · 11</p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">The line above that shows that 3 = 14 <span class="s47"></span><span class="s95"> </span>1 · 11, which can also be substituted in for 3:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 4 · (14 <span class="s47"></span><span class="s95"> </span>1 · 11) <span class="s47"></span><span class="s95"> </span>1 · 11</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 4 · 14 <span class="s47"></span><span class="s95"> </span>5 · <span class="s76">11</span></p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">Of course, the line above that shows that 11 = 53 <span class="s47"></span><span class="s95"> </span>3 · 14, prompting another substitution:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 4 · 14 <span class="s47"></span><span class="s95"> </span>5 · (53 <span class="s47"></span><span class="s95"> </span>3 · 14)</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 19 · <span class="s76">14 </span><span class="s47"></span><span class="s95"> </span>5 · 53</p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">Following the pattern, we use the line that shows 14 = 120 <span class="s47"></span><span class="s95"> </span>2 · 53, resulting in another substitution:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 19 · (120 <span class="s47"></span><span class="s95"> </span>2 · 53) <span class="s47"></span><span class="s95"> </span>5 · 53</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 19 · 120 <span class="s47"></span><span class="s95"> </span>43 · <span class="s76">53</span></p><p style="padding-top: 5pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">And finally, the top line shows that 53 = 7253 <span class="s47"></span><span class="s95"> </span>60 · 120, for a final substitution:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 19 · 120 <span class="s47"></span><span class="s95"> </span>43 · (7253 <span class="s47"></span><span class="s95"> </span>60 · 120)</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">1 = 2599 · 120 <span class="s47"></span><span class="s95"> </span>43 · 7253</p><p style="padding-top: 6pt;padding-left: 15pt;text-indent: 0pt;text-align: center;">2599 · 120 + <span class="s47"></span>43 · 7253 = 1</p><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: center;">This shows that <span class="s27">J </span>and <span class="s27">K </span>would be 2599 and <span class="s47"></span>43, respectively.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: justify;">The numbers in the previous example were chosen for their relevance to RSA. Assuming the values for <span class="s27">P </span>and <span class="s27">Q </span>are 11 and 13, <span class="s27">N </span>would be 143. There- fore, <span class="s47"></span>(<span class="s27">N </span>) = 120 = (11 <span class="s47"></span><span class="s95"> </span>1) · (13 <span class="s47"></span><span class="s95"> </span>1). Since 7253 is relatively prime to 120, that number makes an excellent value for <span class="s27">E</span>.</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: justify;">If you recall, the goal was to find a value for <span class="s27">D </span>that satisfies the following equation:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">E </span>· <span class="s27">D </span>= <span class="s27">S </span>· <span class="s47"></span>(<span class="s27">N </span>) + 1</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Some basic algebra puts it in a more familiar form:</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">D </span>· <span class="s27">E </span>+ <span class="s27">S </span>· <span class="s47"></span>(<span class="s27">N </span>) = 1</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">D <span class="p">· 7253 ± </span>S <span class="p">· 120 = 1</span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">Using the values from the extended Euclidean algorithm, it’s apparent that <span class="s27">D </span>= <span class="s47"></span>43. The value for <span class="s27">S </span>doesn’t really matter, which means this math is done modulo <span class="s47"></span>(<span class="s27">N </span>), or modulo 120. That, in turn, means that a positive equivalent value for <span class="s27">D </span>is 77, since 120 <span class="s47"></span><span class="s95"> </span>43 = 77. This can be put into the prior equation from above:</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">E </span>· <span class="s27">D </span>= <span class="s27">S </span>· <span class="s47"></span>(<span class="s27">N </span>) + 1</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">7253 · 77 = 4654 · 120 + 1</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">The values for <span class="s27">N </span>and <span class="s27">E </span>are distributed as the public key, while <span class="s27">D </span>is kept secret as the private key. <span class="s27">P </span>and <span class="s27">Q </span>are discarded. The encryption and decryption functions are fairly simple.</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;line-height: 155%;text-align: left;">Encryption: <span class="s27">C </span>= <span class="s27">M</span><span class="s111">E</span>(mod<span class="s27">N</span>) Decryption: <span class="s27">M </span>= <span class="s27">C</span><span class="s111">D</span>(mod<span class="s27">N</span>)</p><p style="padding-left: 109pt;text-indent: -18pt;line-height: 155%;text-align: left;">For example, if the message, <span class="s27">M, </span>is 98, encryption would be as follows: 98<span class="s41">7253</span> = 76(mod143)</p><p style="padding-left: 91pt;text-indent: 17pt;text-align: justify;">The ciphertext would be 76. Then, only someone who knew the value for <span class="s27">D </span>could decrypt the message and recover the number 98 from the number 76, as follows:</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">76<span class="s41">77</span> = 98(mod143)</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">Obviously, if the message, <span class="s27">M</span>, is larger than <span class="s27">N</span>, it must be broken down into chunks that are smaller than <span class="s27">N</span>.</p><p style="padding-left: 91pt;text-indent: 18pt;text-align: left;">This process is made possible by Euler’s totient theorem. It states that if <span class="s27">M </span>and <span class="s27">N </span>are relatively prime, with <span class="s27">M </span>being the smaller number, then when <span class="s27">M </span>is multiplied by itself <span class="s47"></span>(<span class="s27">N </span>) times and divided by <span class="s27">N</span>, the remainder will always be 1:</p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">If gcd(<span class="s27">M</span>, <span class="s27">N</span>) = 1 and <span class="s27">M </span>&lt; <span class="s27">N </span>then <span class="s27">M</span><span class="s112"></span><span class="s41">(</span><span class="s111">N</span><span class="s41">)</span> = 1(mod<span class="s27">N</span>)</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">Since this is all done modulo <span class="s27">N</span>, the following is also true, due to the way multiplication works in modulus arithmetic:</p><p class="s41" style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">M</span><span class="s112"></span>(<span class="s111">N</span>)<span class="p"> · </span><span class="s27">M</span><span class="s112"></span>(<span class="s111">N</span>)<span class="p"> = 1 · 1(mod</span><span class="s27">N</span><span class="p">)</span></p><p class="s41" style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">M</span>2<span class="p"> </span>·<span class="p"> </span><span class="s112"></span>(<span class="s111">N</span>)<span class="p"> = 1(mod</span><span class="s27">N </span><span class="p">)</span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">This process could be repeated again and again <span class="s27">S </span>times to produce this:</p><p class="s41" style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">M</span><span class="s111">S</span><span class="s27"> </span>·<span class="p"> </span><span class="s112"></span>(<span class="s111">N</span>)<span class="p"> = 1(mod</span><span class="s27">N</span><span class="p">)</span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">If both sides are multiplied by <span class="s27">M</span>, the result is:</p><p class="s27" style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">M<span class="s111">S</span> <span class="s41">·</span><span class="p"> </span><span class="s112"></span><span class="s41">(</span><span class="s111">N</span><span class="s41">)</span><span class="p"> · </span>M <span class="p">= 1 · </span>M<span class="p">(mod</span>N <span class="p">)</span></p><p style="padding-top: 5pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">M</span><span class="s111">S</span><span class="s27"> </span><span class="s41">·</span> <span class="s112"></span><span class="s41">(</span><span class="s111">N</span><span class="s41">)</span> <span class="s41">+</span> <span class="s41">1</span> = <span class="s27">M</span>(mod<span class="s27">N </span>)</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;text-align: left;">This equation is basically the core of RSA. A number, <span class="s27">M, </span>raised to a power modulo <span class="s27">N, </span>produces the original number <span class="s27">M </span>again. This is basically a function that returns its own input, which isn’t all that interesting by itself. But if this equation could be broken up into two separate parts, then one part could be used to encrypt and the other to decrypt, producing the original message again. This can be done by finding two numbers, <span class="s27">E </span>and <span class="s27">D, </span>that multiplied together equal <span class="s27">S </span>times <span class="s47"></span>(<span class="s27">N </span>) plus 1. Then this value can be substituted into the previous equation:</p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;"><span class="s27">E </span>· <span class="s27">D </span>= <span class="s27">S </span>· <span class="s47"></span>(<span class="s27">N </span>) + 1</p><p class="s27" style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 155%;text-align: left;">M<span class="s111">E</span> <span class="s41">·</span><span class="p"> </span><span class="s111">D</span> <span class="p">= </span>M<span class="p">(mod</span>N<span class="p">) This is equivalent to:</span></p><p class="s113" style="padding-left: 25pt;text-indent: 0pt;line-height: 39%;text-align: right;">M<span class="s114">E</span><span class="s115">D</span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">= <span class="s27">M</span>(mod<span class="s27">N</span>)</p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">which can be broken up into two steps:</p><p class="s27" style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;line-height: 155%;text-align: left;">ME <span class="p">= </span>C<span class="p">(mod</span>N<span class="p">) </span>CD <span class="p">= </span>M<span class="p">(mod</span>N<span class="p">)</span></p><p style="padding-left: 91pt;text-indent: 17pt;text-align: left;">And that’s basically RSA. The security of the algorithm is tied to keeping <span class="s27">D </span>secret. But since <span class="s27">N </span>and <span class="s27">E </span>are both public values, if <span class="s27">N </span>can be factored into the original <span class="s27">P </span>and <span class="s27">Q</span>, then <span class="s47"></span>(<span class="s27">N</span>) can easily be calculated with (<span class="s27">P </span><span class="s47"></span><span class="s95"> </span>1) · (<span class="s27">Q </span><span class="s47"></span><span class="s95"> </span>1), and then <span class="s27">D </span>can be determined with the extended Euclidean algorithm. There- fore, the key sizes for RSA must be chosen with the best-known factoring algorithm in mind to maintain computational security. Currently, the best- known factoring algorithm for large numbers is the number field sieve (NFS). This algorithm has a subexponential run time, which is pretty good, but still not fast enough to crack a 2,048-bit RSA key in a reasonable amount of time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part175.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part177.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
