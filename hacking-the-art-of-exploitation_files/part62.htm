<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x351 Format Parameters</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part61.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part63.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark52">0x351 Format Parameters</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">You should be fairly familiar with basic format strings by now. They have been used extensively with functions like <span class="s31">printf() </span>in previous programs. A function that uses format strings, such as <span class="s31">printf()</span>, simply evaluates the format string passed to it and performs a special action each time a format parameter is encountered. Each format parameter expects an additional variable to be passed, so if there are three format parameters in a format string, there should be three more arguments to the function (in addition to the format string argument).</p><p style="padding-left: 109pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Recall the various format parameters explained in the previous chapter.</p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:13pt"><td style="width:42pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Parameter</p></td><td style="width:44pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Input Type</p></td><td style="width:116pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Output Type</p></td></tr><tr style="height:12pt"><td style="width:42pt;border-top-style:solid;border-top-width:2pt"><p class="s36" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">%d</p></td><td style="width:44pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Value</p></td><td style="width:116pt;border-top-style:solid;border-top-width:2pt"><p class="s68" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Decimal</p></td></tr><tr style="height:14pt"><td style="width:42pt"><p class="s36" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">%u</p></td><td style="width:44pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Value</p></td><td style="width:116pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Unsigned decimal</p></td></tr><tr style="height:14pt"><td style="width:42pt"><p class="s36" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">%x</p></td><td style="width:44pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Value</p></td><td style="width:116pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Hexadecimal</p></td></tr><tr style="height:14pt"><td style="width:42pt"><p class="s36" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">%s</p></td><td style="width:44pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Pointer</p></td><td style="width:116pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">String</p></td></tr><tr style="height:14pt"><td style="width:42pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s36" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">%n</p></td><td style="width:44pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Pointer</p></td><td style="width:116pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s68" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Number of bytes written so far</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The previous chapter demonstrated the use of the more common format parameters, but neglected the less common <span class="s31">%n </span>format parameter. The fmt_uncommon.c code demonstrates its use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">fmt_uncommon.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_487.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;stdlib.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">int main() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">int A = 5, B = 7, count_one, count_two;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">// Example of a %n format string</p><p class="s31" style="padding-top: 1pt;padding-left: 91pt;text-indent: 12pt;text-align: left;">printf(&quot;The number of bytes written up to this point X%n is being stored in count_one, and the number of bytes up to here X%n is being stored in count_two.\n&quot;, &amp;count_one, &amp;count_two);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;count_one: %d\n&quot;, count_one); printf(&quot;count_two: %d\n&quot;, count_two);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">// Stack example</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;A is %d and is at %08x. B is %x.\n&quot;, A, &amp;A, B);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">exit(0);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_488.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This program uses two <span class="s31">%n </span>format parameters in its <span class="s31">printf() </span>statement. The following is the output of the program’s compilation and execution.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_489.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc fmt_uncommon.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The number of bytes written up to this point X is being stored in count_one, and the number of bytes up to here X is being stored in count_two.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">count_one: 46</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">count_two: 113</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">A is 5 and is at bffff7f4. B is 7. reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_490.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The <span class="s31">%n </span>format parameter is unique in that it writes data without display- ing anything, as opposed to reading and then displaying data. When a format function encounters a <span class="s31">%n </span>format parameter, it writes the number of bytes that have been written by the function to the address in the corresponding func- tion argument. In <span class="s31">fmt_uncommon</span>, this is done in two places, and the unary</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">address operator is used to write this data into the variables <span class="s31">count_one </span>and <span class="s31">count_two</span>, respectively. The values are then outputted, revealing that 46 bytes are found before the first <span class="s31">%n </span>and 113 before the second.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The stack example at the end is a convenient segue into an explanation of the stack’s role with format strings:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_491.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 11pt;text-indent: 0pt;text-align: center;">printf(&quot;A is %d and is at %08x. B is %x.\n&quot;, A, &amp;A, B);</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_492.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">When this <span class="s31">printf() </span>function is called (as with any function), the argu- ments are pushed to the stack in reverse order. First the value of <span class="s31">B</span>, then the address of <span class="s31">A</span>, then the value of <span class="s31">A</span>, and finally the address of the format string. The stack will look like the diagram here.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The format function iterates through the format string one character at a time. If the character isn’t the beginning of a format parameter (which is designated by the per- cent sign), the character is copied to the output. If a format parameter is encountered, the appropriate action is taken, using the argument in the stack corresponding to that</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 11pt;text-align: left;">parameter.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">But what if only two arguments are pushed to the stack with a format string that uses three</p><p class="s56" style="padding-top: 2pt;padding-left: 28pt;text-indent: 0pt;text-align: left;">Top of the Stack</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:21.3694pt" cellspacing="0"><tr style="height:18pt"><td style="width:99pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Address of format string</p></td></tr><tr style="height:18pt"><td style="width:99pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Value of <span class="s55">A</span></p></td></tr><tr style="height:18pt"><td style="width:99pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Address of <span class="s55">A</span></p></td></tr><tr style="height:18pt"><td style="width:99pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Value of <span class="s55">B</span></p></td></tr><tr style="height:18pt"><td style="width:99pt;border-top-style:solid;border-top-width:1pt;border-top-color:#231F20;border-left-style:solid;border-left-width:1pt;border-left-color:#231F20;border-right-style:solid;border-right-width:1pt;border-right-color:#231F20"><p class="s54" style="padding-top: 4pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Bottom of the Stack</p></td></tr></table><p style="text-indent: 0pt;text-align: left;"><span><img width="132" height="16" alt="image" src="Image_493.png"/></span></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">format parameters? Try removing the last argument from the <span class="s31">printf()</span></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">line for the stack example so it matches the line shown below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_494.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">printf(&quot;A is %d and is at %08x. B is %x.\n&quot;, A, &amp;A);</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_495.png"/></span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">This can be done in an editor or with a little bit of <span class="s31">sed </span>magic.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_496.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ sed -e &#39;s/, B)/)/&#39; fmt_uncommon.c &gt; fmt_uncommon2.c reader@hacking:~/booksrc $ diff fmt_uncommon.c fmt_uncommon2.c</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">14c14</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">&lt;  printf(&quot;A is %d and is at %08x. B is %x.\n&quot;, A, &amp;A, B);</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">---</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">&gt;   printf(&quot;A is %d and is at %08x. B is %x.\n&quot;, A, &amp;A); reader@hacking:~/booksrc $ gcc fmt_uncommon2.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The number of bytes written up to this point X is being stored in count_one, and the number of bytes up to here X is being stored in count_two.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">count_one: 46</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">count_two: 113</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">A is 5 and is at bffffc24. B is b7fd6ff4. reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_497.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The result is <span class="s31">b7fd6ff4</span>. What the hell is <span class="s31">b7fd6ff4</span>? It turns out that since there wasn’t a value pushed to the stack, the format function just pulled data from where the third argument should have been (by adding to the current frame pointer). This means <span class="s31">0xb7fd6ff4 </span>is the first value found below the stack frame for the format function.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This is an interesting detail that should be remembered. It certainly would be a lot more useful if there were a way to control either the number of arguments passed to or expected by a format function. Luckily, there is a fairly common programming mistake that allows for the latter.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part61.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part63.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
