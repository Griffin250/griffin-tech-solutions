<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x264 Format Strings</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark24">0x264 Format Strings</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">The <span class="s31">printf() </span>function can be used to print more than just fixed strings. This function can also use format strings to print variables in many different for- mats. A <span class="s27">format string </span>is just a character string with special escape sequences that tell the function to insert variables printed in a specific format in place of the escape sequence. The way the <span class="s31">printf() </span>function has been used in the previous programs, the <span class="s31">&quot;Hello, world!\n&quot; </span>string technically is the format string; however, it is devoid of special escape sequences. These <span class="s27">escape sequences </span>are also called <span class="s27">format parameters</span>, and for each one found in the format string, the function is expected to take an additional argument. Each format parameter begins with a percent sign (<span class="s31">%</span>) and uses a single-character shorthand very similar to formatting characters used by GDB’s e<span class="s31">x</span>amine command.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="153" height="4" alt="image" src="Image_151.png"/></span></p><p class="s37" style="padding-bottom: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Parameter Output Type</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="153" height="3" alt="image" src="Image_152.png"/></span></p><p class="s48" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">%d    <span class="s39">Decimal</span></p><p class="s38" style="padding-top: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">%u    <span class="s39">Unsigned decimal</span></p><p class="s38" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">%x    <span class="s39">Hexadecimal</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="153" height="3" alt="image" src="Image_153.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">All of the preceding format parameters receive their data as values, not pointers to values. There are also some format parameters that expect pointers, such as the following.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="211" height="4" alt="image" src="Image_154.png"/></span></p><p class="s37" style="padding-bottom: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Parameter Output Type</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="210" height="3" alt="image" src="Image_155.png"/></span></p><p class="s48" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">%s    <span class="s39">String</span></p><p class="s38" style="padding-top: 3pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">%n    <span class="s39">Number of bytes written so far</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="210" height="3" alt="image" src="Image_156.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The <span class="s31">%s </span>format parameter expects to be given a memory address; it prints the data at that memory address until a null byte is encountered. The <span class="s31">%n </span>format parameter is unique in that it actually writes data. It also expects to be given a memory address, and it writes the number of bytes that have been written so far into that memory address.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">For now, our focus will just be the format parameters used for displaying data. The fmt_strings.c program shows some examples of different format parameters.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">fmt_strings.c</p><p style="text-indent: 0pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_157.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 21pt;text-align: left;">#include &lt;stdio.h&gt; int main() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 8pt;text-align: left;">char string[10];</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">int A = -73;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 214%;text-align: left;">unsigned int B = 31337; strcpy(string, &quot;sample&quot;);</p><p class="s31" style="padding-top: 2pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">// Example of printing with different format string printf(&quot;[A] Dec: %d, Hex: %x, Unsigned: %u\n&quot;, A, A, A);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;[B] Dec: %d, Hex: %x, Unsigned: %u\n&quot;, B, B, B);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;[field width on B] 3: &#39;%3u&#39;, 10: &#39;%10u&#39;, &#39;%08u&#39;\n&quot;, B, B, B); printf(&quot;[string] %s  Address %08x\n&quot;, string, string);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">// Example of unary address operator (dereferencing) and a %x format string printf(&quot;variable A is at address: %08x\n&quot;, &amp;A);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_158.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">In the preceding code, additional variable arguments are passed to each <span class="s31">printf() </span>call for every format parameter in the format string. The final <span class="s31">printf() </span>call uses the argument <span class="s31">&amp;A</span>, which will provide the address of the variable <span class="s31">A</span>. The program’s compilation and execution are as follows.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_159.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -o fmt_strings fmt_strings.c reader@hacking:~/booksrc $ ./fmt_strings</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">[A] Dec: -73, Hex: ffffffb7, Unsigned: 4294967223</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[B] Dec: 31337, Hex: 7a69, Unsigned: 31337</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">[field width on B] 3: &#39;31337&#39;, 10: &#39;  31337&#39;, &#39;00031337&#39;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">[string] sample Address bffff870 variable A is at address: bffff86c reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_160.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The first two calls to <span class="s31">printf() </span>demonstrate the printing of variables <span class="s31">A </span>and <span class="s31">B</span>, using different format parameters. Since there are three format parameters in each line, the variables <span class="s31">A </span>and <span class="s31">B </span>need to be supplied three times each. The</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">%d <span class="p">format parameter allows for negative values, while </span>%u <span class="p">does not, since it is expecting unsigned values.</span></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When the variable <span class="s31">A </span>is printed using the <span class="s31">%u </span>format parameter, it appears as a very high value. This is because <span class="s31">A </span>is a negative number stored in two’s complement, and the format parameter is trying to print it as if it were an unsigned value. Since two’s complement flips all the bits and adds one, the very high bits that used to be zero are now one.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The third line in the example, labeled <span class="s31">[field width on B]</span>, shows the use of the field-width option in a format parameter. This is just an integer that designates the minimum field width for that format parameter. However, this is not a maximum field width—if the value to be outputted is greater than the field width, the field width will be exceeded. This happens when 3 is used, since the output data needs 5 bytes. When 10 is used as the field width, 5 bytes of blank space are outputted before the output data. Additionally, if a field width value begins with a 0, this means the field should be padded with zeros. When 08 is used, for example, the output is 00031337.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The fourth line, labeled <span class="s31">[string]</span>, simply shows the use of the <span class="s31">%s </span>format parameter. Remember that the variable string is actually a pointer containing the address of the string, which works out wonderfully, since the <span class="s31">%s </span>format parameter expects its data to be passed by reference.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The final line just shows the address of the variable <span class="s31">A</span>, using the unary address operator to dereference the variable. This value is displayed as eight hexadecimal digits, padded by zeros.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: justify;">As these examples show, you should use <span class="s31">%d </span>for decimal, <span class="s31">%u </span>for unsigned, and <span class="s31">%x </span>for hexadecimal values. Minimum field widths can be set by putting a number right after the percent sign, and if the field width begins with 0, it will be padded with zeros. The <span class="s31">%s </span>parameter can be used to print strings and should be passed the address of the string. So far, so good.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Format strings are used by an entire family of standard I/O functions, including <span class="s31">scanf()</span>, which basically works like <span class="s31">printf() </span>but is used for input instead of output. One key difference is that the <span class="s31">scanf() </span>function expects all of its arguments to be pointers, so the arguments must actually be variable addresses—not the variables themselves. This can be done using pointer variables or by using the unary address operator to retrieve the address of the normal variables. The input.c program and execution should help explain.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">input.c</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_161.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">#include &lt;stdio.h&gt; #include &lt;string.h&gt;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">int main() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">char message[10]; int count, i;</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">strcpy(message, &quot;Hello, world!&quot;);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;Repeat how many times? &quot;); scanf(&quot;%d&quot;, &amp;count);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">for(i=0; i &lt; count; i++)</p><p class="s31" style="padding-left: 116pt;text-indent: 0pt;text-align: left;">printf(&quot;%3d - %s\n&quot;, i, message);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_162.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In input.c, the <span class="s31">scanf() </span>function is used to set the <span class="s31">count </span>variable. The output below demonstrates its use.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_163.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc -o input input.c reader@hacking:~/booksrc $ ./input</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Repeat how many times? 3</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">0 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">1 - Hello, world!</p><p class="s31" style="padding-left: 91pt;text-indent: 8pt;line-height: 106%;text-align: left;">2 - Hello, world! reader@hacking:~/booksrc $ ./input Repeat how many times? 12</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">0 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">1 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">2 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">3 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">4 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">5 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">6 - Hello, world!</p><p class="s31" style="padding-top: 2pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">7 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">8 - Hello, world!</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">9 - Hello, world!</p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;text-align: left;">10 - Hello, world!</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 4pt;text-align: left;">11 - Hello, world! reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_164.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Format strings are used quite often, so familiarity with them is valuable. In addition, the ability to output the values of variables allows for debugging in the program, without the use of a debugger. Having some form of immediate feedback is fairly vital to the hacker’s learning process, and something as simple as printing the value of a variable can allow for lots of exploitation.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
