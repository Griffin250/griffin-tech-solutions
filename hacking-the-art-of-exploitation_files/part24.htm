<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x243 Comparison Operators</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part23.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part25.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark14">0x243 Comparison Operators</a></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: justify;">Variables are frequently used in the conditional statements of the previously explained control structures. These conditional statements are based on some sort of comparison. In C, these comparison operators use a shorthand syntax that is fairly common across many programming languages.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:13pt"><td style="width:92pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Condition</p></td><td style="width:37pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Symbol</p></td><td style="width:46pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 4pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Example</p></td></tr><tr style="height:12pt"><td style="width:92pt;border-top-style:solid;border-top-width:2pt"><p class="s35" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Less than</p></td><td style="width:37pt;border-top-style:solid;border-top-width:2pt"><p class="s36" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">&lt;</p></td><td style="width:46pt;border-top-style:solid;border-top-width:2pt"><p class="s36" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">(a &lt; b)</p></td></tr><tr style="height:14pt"><td style="width:92pt"><p class="s35" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Greater than</p></td><td style="width:37pt"><p class="s36" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">&gt;</p></td><td style="width:46pt"><p class="s36" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">(a &gt; b)</p></td></tr><tr style="height:14pt"><td style="width:92pt"><p class="s35" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Less than or equal to</p></td><td style="width:37pt"><p class="s36" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">&lt;=</p></td><td style="width:46pt"><p class="s36" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">(a &lt;= b)</p></td></tr><tr style="height:14pt"><td style="width:92pt"><p class="s35" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Greater than or equal to</p></td><td style="width:37pt"><p class="s36" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">&gt;=</p></td><td style="width:46pt"><p class="s36" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">(a &gt;= b)</p></td></tr><tr style="height:14pt"><td style="width:92pt"><p class="s35" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Equal to</p></td><td style="width:37pt"><p class="s36" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">==</p></td><td style="width:46pt"><p class="s36" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">(a == b)</p></td></tr><tr style="height:14pt"><td style="width:92pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s35" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">Not equal to</p></td><td style="width:37pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s36" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">!=</p></td><td style="width:46pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s36" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">(a != b)</p></td></tr></table><p style="padding-top: 9pt;padding-left: 91pt;text-indent: 18pt;text-align: left;">Most of these operators are self-explanatory; however, notice that the shorthand for <span class="s27">equal to </span>uses double equal signs. This is an important distinc- tion, since the double equal sign is used to test equivalence, while the single equal sign is used to assign a value to a variable. The statement <span class="s31">a = 7 </span>means <span class="s27">Put the value 7 in the variable </span><span class="s33">a</span>, while <span class="s31">a == 7 </span>means <span class="s27">Check to see whether the variable </span><span class="s33">a </span><span class="s27">is equal to 7</span>. (Some programming languages like Pascal actually use <span class="s31">:= </span>for variable assignment to eliminate visual confusion.) Also, notice that an exclamation point generally means <span class="s27">not</span>. This symbol can be used by itself to invert any expression.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_046.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: justify;">!(a &lt; b)  is equivalent to  (a &gt;= b)</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_047.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">These comparison operators can also be chained together using short- hand for OR and AND.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:91.44pt" cellspacing="0"><tr style="height:13pt"><td style="width:25pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 2pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Logic</p></td><td style="width:38pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 5pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Symbol</p></td><td style="width:112pt;border-top-style:solid;border-top-width:5pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s34" style="padding-left: 6pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Example</p></td></tr><tr style="height:12pt"><td style="width:25pt;border-top-style:solid;border-top-width:2pt"><p class="s35" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">OR</p></td><td style="width:38pt;border-top-style:solid;border-top-width:2pt"><p class="s36" style="padding-left: 5pt;text-indent: 0pt;text-align: left;">||</p></td><td style="width:112pt;border-top-style:solid;border-top-width:2pt"><p class="s36" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">((a &lt; b) || (a &lt; c))</p></td></tr><tr style="height:14pt"><td style="width:25pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s35" style="padding-top: 2pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">AND</p></td><td style="width:38pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s36" style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">&amp;&amp;</p></td><td style="width:112pt;border-bottom-style:solid;border-bottom-width:2pt"><p class="s36" style="padding-top: 2pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">((a &lt; b) &amp;&amp; !(a &lt; c))</p></td></tr></table><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">The example statement consisting of the two smaller conditions joined with OR logic will fire true if <span class="s31">a </span>is less than <span class="s31">b</span>, OR if <span class="s31">a </span>is less than <span class="s31">c</span>. Similarly, the example statement consisting of two smaller comparisons joined with AND logic will fire true if <span class="s31">a </span>is less than <span class="s31">b </span>AND <span class="s31">a </span>is not less than <span class="s31">c</span>. These statements should be grouped with parentheses and can contain many different variations.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Many things can be boiled down to variables, comparison operators, and control structures. Returning to the example of the mouse searching for food, hunger can be translated into a Boolean true/false variable. Naturally, 1 means true and 0 means false.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_048.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">While (hungry == 1)</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">Find some food; Eat the food;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_049.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Here’s another shorthand used by programmers and hackers quite often. C doesn’t really have any Boolean operators, so any nonzero value is considered true, and a statement is considered false if it contains 0. In fact, the comparison operators will actually return a value of 1 if the comparison is true and a value of 0 if it is false. Checking to see whether the variable <span class="s31">hungry </span>is equal to 1 will return 1 if <span class="s31">hungry </span>equals 1 and 0 if <span class="s31">hungry </span>equals 0. Since the program only uses these two cases, the comparison operator can be dropped altogether.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_050.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">While (hungry)</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;text-align: left;">Find some food; Eat the food;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_051.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">A smarter mouse program with more inputs demonstrates how compari- son operators can be combined with variables.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_052.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">While ((hungry) &amp;&amp; !(cat_present))</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">{</p><p class="s31" style="padding-left: 99pt;text-indent: 0pt;line-height: 107%;text-align: left;">Find some food; If(!(food_is_on_a_mousetrap))</p><p class="s31" style="padding-left: 108pt;text-indent: 0pt;text-align: left;">Eat the food;</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_053.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-top: 4pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: justify;">This example assumes there are also variables that describe the presence of a cat and the location of the food, with a value of 1 for true and 0 for false. Just remember that any nonzero value is considered true, and the value of 0 is considered false.</p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part23.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part25.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
