<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x285 Function Pointers</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part46.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part48.htm">Next &gt;</a></p><p class="s32" style="padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark37">0x285 Function Pointers</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">A <span class="s27">pointer </span>simply contains a memory address and is given a data type that describes where it points. Usually, pointers are used for variables; however, they can also be used for functions. The funcptr_example.c program demonstrates the use of function pointers.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s40" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">funcptr_example.c</p><p style="text-indent: 0pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_313.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 21pt;text-align: left;">#include &lt;stdio.h&gt; int func_one() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 8pt;text-align: left;">printf(&quot;This is function one\n&quot;);</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">return 1;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">int func_two() {</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;This is function two\n&quot;); return 2;</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: -12pt;line-height: 107%;text-align: left;">int main() { int value;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">int (*function_ptr) ();</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">function_ptr = func_one;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;function_ptr is 0x%08x\n&quot;, function_ptr); value = function_ptr();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;text-align: left;">printf(&quot;value returned was %d\n&quot;, value);</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-top: 4pt;padding-left: 104pt;text-indent: 0pt;text-align: left;">function_ptr = func_two;</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 107%;text-align: left;">printf(&quot;function_ptr is 0x%08x\n&quot;, function_ptr); value = function_ptr();</p><p class="s31" style="padding-left: 104pt;text-indent: 0pt;line-height: 10pt;text-align: left;">printf(&quot;value returned was %d\n&quot;, value);</p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">}</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_314.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">In this program, a function pointer aptly named <span class="s31">function_ptr </span>is declared in <span class="s31">main()</span>. This pointer is then set to point at the function <span class="s31">func_one() </span>and is called; then it is set again and used to call <span class="s31">func_two()</span>. The output below shows the compilation and execution of this source code.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_315.png"/></span></p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ gcc funcptr_example.c reader@hacking:~/booksrc $ ./a.out</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">function_ptr is 0x08048374 This is function one</p><p class="s31" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">value returned was 1</p><p class="s31" style="padding-top: 2pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">function_ptr is 0x0804838d This is function two</p><p class="s31" style="padding-bottom: 2pt;padding-left: 91pt;text-indent: 0pt;line-height: 107%;text-align: left;">value returned was 2 reader@hacking:~/booksrc $</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_316.png"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part46.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part48.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
