<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>E</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part206.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part208.htm">Next &gt;</a></p><p class="s5" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">E</p><p class="s131" style="padding-top: 4pt;padding-left: 123pt;text-indent: -32pt;line-height: 109%;text-align: left;">EAX (Accumulator) register, 24, 312, 346</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">zeroing, 368</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">EBP (Base Pointer) register, 24, 31,</p><p class="s131" style="padding-top: 1pt;padding-left: 81pt;text-indent: 0pt;text-align: center;">70, 73, 344–345</p><p class="s131" style="padding-left: 80pt;text-indent: 0pt;text-align: center;">saving current values, 342</p><p class="s131" style="padding-left: 102pt;text-indent: -10pt;line-height: 109%;text-align: left;">EBX (Base) register, 24, 312, 344–345 saving current values, 342</p><p class="s48" style="padding-left: 91pt;text-indent: 0pt;line-height: 109%;text-align: left;">ec_malloc() <span class="s131">function, 91 ECX (Counter) register, 24</span></p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;line-height: 109%;text-align: left;">EDI (Destination Index) register, 24 EDX (Data) register, 24, 361</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">EFLAGS register, 25</p><p class="s131" style="padding-left: 123pt;text-indent: -32pt;text-align: left;">EIP register. <span class="s132">See </span>Instruction Pointer (EIP) register</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">elegance, 2, 6</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;line-height: 109%;text-align: left;">encapsulation, 196 encoded_sockreuserestore_dbg.s file,</p><p class="s131" style="padding-left: 25pt;text-indent: 0pt;text-align: right;">360–361</p><p class="s131" style="padding-left: 25pt;text-indent: 0pt;text-align: right;">encryption, 393</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;line-height: 109%;text-align: left;">asymmetric, 400–405 maximum allowable key size in</p><p class="s131" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">exported software, 394</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">symmetric, 398–400</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">wireless 802.11b, 433–436</p><p class="s48" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">env <span class="s131">command, 142</span></p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">environment variables, 142</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">displaying location, 146</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">for exploiting, 148</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">PATH, 172</p><p class="s131" style="padding-top: 1pt;padding-left: 102pt;text-indent: 0pt;line-height: 109%;text-align: left;">placing shellcode in, 188 randomization of stack</p><p class="s131" style="padding-left: 102pt;text-indent: 21pt;line-height: 109%;text-align: left;">location, 380 for storing string, 378</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">epoch, 97</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">equal to operator (<span class="s48">==</span>), 14</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">error checking, for <span class="s48">malloc()</span>, 79, 80–81</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">errorchecked_heap.c program, 80–81</p><p class="s131" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">errors, off-by-one, 116–117</p><p class="s131" style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">escape sequences, 48</p><p class="s131" style="padding-left: 123pt;text-indent: -32pt;line-height: 109%;text-align: left;">escaped character, backslash (<span class="s48">\</span>) for, 180</p><p class="s131" style="padding-top: 3pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">ESI (Source Index) register, 24</p><p class="s131" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">ESP (Stack Pointer) register, 24, 33,</p><p class="s131" style="padding-left: 48pt;text-indent: 0pt;text-align: left;">70, 73</p><p class="s131" style="padding-left: 86pt;text-indent: 0pt;text-align: center;">shellcode and, 367</p><p class="s131" style="padding-left: 45pt;text-indent: 0pt;text-align: center;">/etc/passwd file, 89, 153</p><p class="s131" style="padding-left: 48pt;text-indent: -32pt;line-height: 109%;text-align: left;">/etc/services file, default ports in, 207–208</p><p class="s48" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">ETHERhdr <span class="s131">structure, 245–246</span></p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">Ethernet, 218, 230</p><p class="s131" style="padding-left: 25pt;text-indent: 0pt;text-align: right;">header for, 230</p><p class="s131" style="padding-top: 1pt;padding-left: 25pt;text-indent: 0pt;text-align: right;">length of, 231</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">Euclidean algorithm, 400–401</p><p class="s131" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">extended, 401–402</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">Euler’s totient function, 400, 403</p><p class="s48" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">examine <span class="s131">command (GDB)</span></p><p class="s131" style="padding-left: 27pt;text-indent: 0pt;line-height: 109%;text-align: left;">for ASCII table lookup, 34–35 to display disassembled</p><p class="s131" style="padding-left: 27pt;text-indent: 21pt;line-height: 109%;text-align: left;">instructions, 30 display unit size for, 28–29 for memory, 27–28</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exclamation point (<span class="s48">!</span>), 14</p><p class="s48" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">execl() <span class="s131">function, 149, 389, 390</span></p><p class="s48" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">execle() <span class="s131">function, 149</span></p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exec_shell.c program, 296</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exec_shell.s program, 297</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">executable binaries, 21</p><p class="s131" style="padding-top: 1pt;padding-left: 16pt;text-indent: 10pt;line-height: 109%;text-align: left;">creating from assembly code, 286 execute permission, 87</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;line-height: 109%;text-align: left;">execution flow, controlling, 118 execution of arbitrary code, 118 <span class="s48">execve() </span>function, 295–296, 388–389</p><p class="s131" style="padding-left: 16pt;text-indent: 10pt;line-height: 109%;text-align: left;">structure for, 298 exhaustive brute-force attacks,</p><p class="s131" style="padding-left: 48pt;text-indent: 0pt;text-align: left;">422–423</p><p class="s131" style="padding-left: 48pt;text-indent: -32pt;line-height: 107%;text-align: left;">exit, automatically executing function on, 184</p><p class="s48" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exit() <span class="s131">function, 191, 286</span></p><p class="s131" style="padding-left: 25pt;text-indent: 0pt;text-align: right;">address of, 192</p><p class="s131" style="padding-left: 25pt;text-indent: 0pt;text-align: right;">exploit buffer, 332</p><p class="s131" style="padding-top: 1pt;padding-left: 16pt;text-indent: 0pt;text-align: left;">exploit programs, 329</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exploit scripts, 328–333</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exploit tools, 329</p><p class="s131" style="padding-left: 16pt;text-indent: 0pt;text-align: left;">exploitation, 115</p><p class="s131" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">with BASH, 133–150</p><p class="s131" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">buffer overflows, 119–133</p><p class="s131" style="padding-top: 1pt;padding-left: 38pt;text-indent: -10pt;line-height: 109%;text-align: left;">format strings, 167–193 direct parameter access,</p><p class="s131" style="padding-left: 48pt;text-indent: 0pt;text-align: left;">180–182</p><p class="s131" style="padding-left: 48pt;text-indent: -10pt;line-height: 109%;text-align: left;">reading from arbitrary memory addresses, 172</p><p class="s131" style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">exploitation, <span class="s132">continued</span></p><p class="s131" style="padding-left: 113pt;text-indent: -10pt;line-height: 106%;text-align: left;">format strings, <span class="s132">continued </span>with short writes, 182–183 vulnerability, 170–171</p><p class="s131" style="padding-left: 123pt;text-indent: -10pt;line-height: 109%;text-align: left;">writing to arbitrary memory addresses, 173–179</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;line-height: 10pt;text-align: left;">general techniques, 118</p><p class="s131" style="padding-left: 102pt;text-indent: 0pt;text-align: left;">heap-based overflow, 150–155</p><p class="s48" style="padding-left: 123pt;text-indent: -21pt;line-height: 109%;text-align: left;">jackpot() <span class="s131">function as target, 160–166</span></p><p class="s131" style="padding-left: 123pt;text-indent: -21pt;line-height: 109%;text-align: left;">overflowing function pointers, 156–167</p><p class="s131" style="padding-left: 123pt;text-indent: -21pt;line-height: 109%;text-align: left;">overwriting global offset table, 190–193</p><p class="s131" style="padding-left: 91pt;text-indent: 10pt;line-height: 108%;text-align: left;">without log file, 352–354 exploit_notesearch.c program, 121 exploit_notesearch_env.c program,</p><p class="s131" style="padding-left: 123pt;text-indent: 0pt;text-align: left;">149–150</p><p class="s131" style="padding-left: 123pt;text-indent: -32pt;line-height: 109%;text-align: left;">extended Euclidian algorithm, 401–402</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part206.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part208.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
