<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Hacker is a term for both those who write code and those who exploit it. Even though these two groups of hackers have different end goals, both groups use similar problem-solving techniques. Since an understanding of programming helps those who exploit, and an under- standing of exploitation helps those who program, many</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part13.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part15.htm">Next &gt;</a></p><p class="s29" style="padding-left: 91pt;text-indent: 0pt;text-align: left;">Hacker <span class="s26">is a term for both those who write code and those who exploit it. Even though these two groups of hackers have different end goals, both groups use similar problem-solving techniques. Since an understanding of programming helps those who exploit, and an under- standing of exploitation helps those who program, many</span></p><p style="padding-top: 1pt;padding-left: 91pt;text-indent: 0pt;line-height: 112%;text-align: left;">hackers do both. There are interesting hacks found in both the techniques used to write elegant code and the techniques used to exploit programs. Hacking is really just the act of finding a clever and counterintuitive solution to a problem.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">The hacks found in program exploits usually use the rules of the computer to bypass security in ways never intended. Programming hacks are similar in that they also use the rules of the computer in new and inventive ways, but the final goal is efficiency or smaller source code, not necessarily a security compromise. There are actually an infinite number of programs that</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 0pt;line-height: 106%;text-align: left;">can be written to accomplish any given task, but most of these solutions are unnecessarily large, complex, and sloppy. The few solutions that remain are small, efficient, and neat. Programs that have these qualities are said to have <span class="s27">elegance</span>, and the clever and inventive solutions that tend to lead to this efficiency are called <span class="s27">hacks</span>. Hackers on both sides of programming appreciate both the beauty of elegant code and the ingenuity of clever hacks.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In the business world, more importance is placed on churning out func- tional code than on achieving clever hacks and elegance. Because of the tremendous exponential growth of computational power and memory, spending an extra five hours to create a slightly faster and more memory- efficient piece of code just doesn’t make business sense when dealing with modern computers that have gigahertz of processing cycles and gigabytes of memory. While time and memory optimizations go without notice by all but the most sophisticated of users, a new feature is marketable. When the bottom line is money, spending time on clever hacks for optimization just doesn’t make sense.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">True appreciation of programming elegance is left for the hackers: computer hobbyists whose end goal isn’t to make a profit but to squeeze every possible bit of functionality out of their old Commodore 64s, exploit writers who need to write tiny and amazing pieces of code to slip through narrow security cracks, and anyone else who appreciates the pursuit and the challenge of finding the best possible solution. These are the people who get excited about programming and really appreciate the beauty of an elegant piece of code or the ingenuity of a clever hack. Since an understanding of programming is a prerequisite to understanding how programs can be exploited, programming is a natural starting point.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part15.htm">0x210 What Is Programming?</a><a class="toc0" href="part16.htm">0x220 Pseudo-code</a><a class="toc0" href="part17.htm">0x230 Control Structures</a><a class="toc0" href="part18.htm">0x231 If-Then-Else</a><a class="toc0" href="part19.htm">0x232 While/Until Loops</a><a class="toc0" href="part20.htm">0x233 For Loops</a><a class="toc1" href="part21.htm">0x240 More Fundamental Programming Concepts</a><a class="toc0" href="part22.htm">0x241 Variables</a><a class="toc0" href="part23.htm">0x242 Arithmetic Operators</a><a class="toc0" href="part24.htm">0x243 Comparison Operators</a><a class="toc0" href="part25.htm">0x244 Functions</a><a class="toc1" href="part26.htm">0x250 Getting Your Hands Dirty</a><a class="toc0" href="part27.htm">0x251 The Bigger Picture</a><a class="toc0" href="part28.htm">0x252  The x86 Processor</a><a class="toc0" href="part29.htm">0x253 Assembly Language</a><a class="toc1" href="part30.htm">0x260 Back to Basics</a><a class="toc0" href="part31.htm">0x261 Strings</a><a class="toc0" href="part32.htm">0x262 Signed, Unsigned, Long, and Short</a><a class="toc0" href="part33.htm">0x263 Pointers</a><a class="toc0" href="part34.htm">0x264 Format Strings</a><a class="toc0" href="part35.htm">0x265 Typecasting</a><a class="toc0" href="part36.htm">0x266 Command-Line Arguments</a><a class="toc0" href="part37.htm">0x267 Variable Scoping</a><a class="toc1" href="part38.htm">0x270 Memory Segmentation</a><a class="toc0" href="part39.htm">0x271  Memory Segments in C</a><a class="toc0" href="part40.htm">0x272 Using the Heap</a><a class="toc0" href="part41.htm">0x273  Error-Checked malloc()</a><a class="toc1" href="part42.htm">0x280 Building on Basics</a><a class="toc0" href="part43.htm">0x281 File Access</a><a class="toc0" href="part44.htm">0x282 File Permissions</a><a class="toc0" href="part45.htm">0x283 User IDs</a><a class="toc0" href="part46.htm">0x284 Structs</a><a class="toc0" href="part47.htm">0x285 Function Pointers</a><a class="toc0" href="part48.htm">0x286  Pseudo-random Numbers</a><a class="toc0" href="part49.htm">0x287 A Game of Chance</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part13.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part15.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
